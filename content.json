[{"title":"CSS相对单位","date":"2018-08-24T07:14:30.000Z","path":"2018/08/24/CSS相对单位/","text":"现在一提到响应式布局，css相对单位，相信众多前端行业的小可爱们都知道em|rem，再者是现在大家都比较熟知的视口单位 vh|vw。emm…在说这些之前，让我们回顾一下CSS单位的历史。 早期 Pixel (px)在web环境下，用户可以将浏览器窗口设置成任意大小，CSS需要去适应它，而且用户在打开一个页面之后，还会再去调整它的大小，CSS也需要去适应这些条件。由此我们可以知道，在创建页面的时候，样式并没有被调用，而是当页面开始渲染时，浏览器才会去计算样式的规则。 那么早些时候是如何解决设备窗口自适应的问题呢。 早些时候，我们的设计大大们就想出了完美像素设计，解放了前端工程师们的双手，设计师们会创建一个有效宽度的容器，例如800px-950px宽的居中纵向列，也这个为基准再进行设计，这跟他们在原生应用程序或印刷出版物中做的设计或多或少有点类似。 然后后来，有多年经验的前端应该能感受到，显示屏的分辨率越来越大，之前的950px的有效宽度开始延伸到1024px，但是兼容小分辨率屏幕使得这个问题变得不可解。而使得开发者不得不放弃“完美像素”设计的起因，是因为智能手机的普及。 于是，响应式设计应运而生！！ 响应式 —— 在CSS中，这指的针对不同大小的浏览器窗口，用不同的方式响应更新页面的样式。我们要对不同尺寸的手机、平板电脑或桌面显示器多花心思了。我们将在第8章中详细介绍响应式设计，但在本章中，我会先给大家介绍一些重要的基础概念。 开发人员曾经的宠儿（px）就要下线了。这里要提一下，CSS里1像素并不严格等同于显示器的1像素，在高分辨率显示器上更加明显。尽管根据浏览器、操作系统和硬件的不同，CSS的测量值可能会有细微的差别，但96px总是会大致等于屏幕上的物理1英寸。 em 的用法先来看看em，em是最为常见的相对长度单位，基准是当前元素的字号大小（font-size），例如：.box &#123; font-size: 16px; padding: 1em; // padding: 16px; &#125; 把padding赋值为1em，乘以字号，得到一个值为16px的padding渲染值，因为该元素的字号是16px，以此类推要2em = 16px * 2 = 32px; 使用相对单位声明的值会由浏览器转化为一个绝对值，我们称之为计算值。 em 通常用法在设置padding、height、width或border-radius等属性时，使用em可能会很方便，因为如果它们继承了不同的字号大小，或者用户更改了字体设置，这些属性会均匀地缩放。可以测试看看效果，熟悉一下不同盒子下em的用法。HTML:&lt;span class=&quot;box box-small&quot;&gt;Small&lt;/span&gt;&lt;span class=&quot;box box-large&quot;&gt;Large&lt;/span&gt; CSS:.box &#123; padding: 1em; border-radius: 1em; background-color: lightgray;&#125;.box-small &#123; font-size: 14px; &#125;.box-large &#123; font-size: 16px; &#125; 用于font-sizeem是基于font-size去计算的，那么如果用在font-size上呢？&lt;body&gt; &lt;p class=&quot;box&quot;&gt;猜猜我的字号是多少？&lt;/p&gt;&lt;/body&gt;// css.box&#123; font-size: 1.2em;&#125; 上面这种情况，em会以父元素的字号为基准，例如box的父元素是body，则会以body的font-size大小为基准。一般情况下我们会声明body的字号大小，如果没有声明，则以浏览器的默认样式为主通常情况下浏览器有默认的css样式，每个默认的样式都是不同的，看看下面例子：body &#123; font-size: 16px;&#125;.box &#123; font-size: 1.2em; // 19.2px padding: 1.2em; // 23.04px background-color: #ccc;&#125; box的font-size是基于body的字号大小计算的，而padding则是基于box的font-size计算的，所以是19.2 * 1.2 = 23.04px。 可以尝试用em去做多层的嵌套列表，可以做出字号层层收缩的效果，例如ul，li列表。 rem 的用法rem 顾名思义是 root em 的缩写，和em不同的是，em是依赖当前元素，而rem是和根元素关联的。说到根元素，大家可以先认识一下一个特别的伪类选择器 - :root:root &#123; /* 等同于 html 选择器 */ font-size: 1em; // 16px,浏览器的默认字号大小&#125;ul &#123; font-size: .8rem; // 16 * 0.8 = 12.8px&#125; 在这里 0.8rem 无论放在什么地方，都等同于0.8倍的根元素的字号大小。 很简单吧~ 当然rem也好em也好都只是一种方式，如果去搭配使用还是要看个人对页面布局的理解。比如说，对font-size使用rem，因为现在很多浏览器可以通过ctrl- 和 Ctrl+ 对页面进行缩放，rem只依赖根元素，这样不会产生字号收缩的问题，字号大小变得可预测。而对padding、margin、border-radius等使用em则会更好，因为这些度量方式只是针对当前的元素来看的。在然后border的宽度则用px比较好，因为边框这个一般不会根据页面放缩去做计算的。 视口单位 vh | vm我们知道em和rem都是以font-size为基准的，而视口单位是依靠浏览器的视口大小来定义长度的。 视口（viewport） —— 在浏览器窗口中用来渲染页面的可视区域，这不包括浏览器的地址栏、工具栏、状态栏等（如果有的话）。常见的视口单位： vh —— 视口高度的1/100 vw —— 视口宽度的1/100 vmin —— 视区宽度或高度较小值的1/100（IE9支持的是vm） vmax —— 视区宽度或高度较大值的1/100（在写本书时，IE或者Edge都不支持） 举个例子，50vw等于视口宽度的一半，而50vh等于视口高度的50%。vmin依赖两者（宽或高）的较小值，如果我们需要确保一个元素不管在横屏还是竖屏下适应屏幕展示的话，这个属性会很有帮助：如果是横屏，vmin的基准值是屏幕的高度，如果是竖屏，它的基准值是屏幕的宽度。.box &#123; width: 90vmin; height: 90vmin; background-color: #369;&#125; 这里笔者就不截图了，大家试试看就知道了（笑）。 vw用于font-size同样我们来看看视口单位用在字号上会发生什么。加入我们设置一个元素的font-size: 2vm；会怎么样呢。假设PC屏幕宽 1400px，那么2vm等于28px，pad的屏幕768px宽，2vm等于15px。可以看出问题了吧~ 28px的字体对于PC来说太大了，而这个你放到手机屏幕上，经过计算字号会小于10px，这个效果就不太好了。 这样我们就有个新的方法！！！ calc()calc()函数支持对2个或者更多个数值进行基础的运算。 注意：使用加减运算的时候左右必须要有空格，例如calc(3em + 16px)。好了为了解决vw在font-size使用造成的漏洞，我们可以尝试：:root &#123; font-size: calc(0.5em + 1vw);&#125; 0.5em这里表示字号的最小值，1vw代表根据设备宽度响应式的网上叠加，这样你就会发现字体收缩就正常多了。 总结当然要实现响应式的设计，不仅仅是灵活的运用好这些相对单位，而细节上的细微的调整可能还是需要依赖媒体查询的代码，但是现在的前端开发者们要慢慢停止使用px思维去思考布局，CSS的东西看上去简单，实际上深入学习有很多意想不到的优势，需要大家多多探究，辣么，笔者就先写到这里了。","tags":[{"name":"css","slug":"css","permalink":"http://www.mjpiero.cc/tags/css/"}]},{"title":"mainifest.json","date":"2018-08-23T04:24:55.000Z","path":"2018/08/23/mainifest-json/","text":"在看别人开发的架子的时候，看到了这个文件，网上大概搜了一下，在此mark一下。 developers.google.com 上有个简介，中译过来被叫做“网络应用清单”，很多人也将他和web离线缓存联系在一起。实际上，开发者可以利用 mainifest.json 控制在用户想要看到应用的区域（例如移动设备主屏幕）中如何向用户显示网络应用或网站，指示用户可以启动哪些功能，以及定义其在启动时的外观。 mainifest.json 提供了将网站书签保存到设备主屏幕的功能。当网站以这种方式启动时： 它具有唯一的图标和名称，以便用户将其与其他网站区分开来。 它会在下载资源或从缓存恢复资源时向用户显示某些信息。 它会向浏览器提供默认显示特性，以避免网站资源可用时的过渡过于生硬。 它通过一个文本文件中的元数据这一简单机制完成所有这些工作。那就是网络应用清单。 注：尽管您可以在任何网站上使用该文件，它们却是 PWA 的必备要素。 创建清单下面是一个示例：&#123; &quot;short_name&quot;: &quot;AirHorner&quot;, &quot;name&quot;: &quot;Kinlan&apos;s AirHorner of Infamy&quot;, &quot;icons&quot;: [ // 自定义图标 &#123; &quot;src&quot;: &quot;launcher-icon-1x.png&quot;, &quot;type&quot;: &quot;image/png&quot;, &quot;sizes&quot;: &quot;48x48&quot; &#125;, &#123; &quot;src&quot;: &quot;launcher-icon-2x.png&quot;, &quot;type&quot;: &quot;image/png&quot;, &quot;sizes&quot;: &quot;96x96&quot; &#125;, &#123; &quot;src&quot;: &quot;launcher-icon-4x.png&quot;, &quot;type&quot;: &quot;image/png&quot;, &quot;sizes&quot;: &quot;192x192&quot; &#125; ], &quot;start_url&quot;: &quot;index.html?launcher=true&quot;, // 设置启动网址 &quot;background_color&quot;: &quot;#000000&quot; // 设置背景颜色&#125; 确保包括以下内容： 在用户主屏幕上用作文本的 short_name。 在网络应用安装横幅中使用的 name。 将清单的相关信息告知浏览器在您创建清单且将清单添加到您的网站之后，将 link 标记添加到包含网络应用的所有页面上，如下所示：&lt;link rel=&quot;manifest&quot; href=&quot;/manifest.json&quot;&gt; 测试您的清单如果您想要手动验证网络应用清单是否已正确设置，请使用 Chrome DevTools 的 Application 面板上的 Manifest 标签。 google开发者原文","tags":[{"name":"web移动端","slug":"web移动端","permalink":"http://www.mjpiero.cc/tags/web移动端/"},{"name":"缓存","slug":"缓存","permalink":"http://www.mjpiero.cc/tags/缓存/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.mjpiero.cc/tags/JavaScript/"}]},{"title":"threeJS 学习笔记 - 材质","date":"2018-08-23T04:15:58.000Z","path":"2018/08/23/threeJS-学习笔记-材质/","text":"一个材质结合 THREE.Geometry 对象，可以构成 THREE.Mesh 对象。材质就相当于物体模型的皮肤，决定物体的外观光泽，看上去是不是像金属或者线框外表等。 threeJS 提供的材质 MeshBasicMaterial：网格基础材质。基础材质，用于给几何体赋予一种简单的颜色，或者显示几何体的线框。 MeshDepthMaterial：网格深度材质。这个材质使用从摄像机到网格的距离来决定如何给网格上色。 MeshNormalMaterial：网格法向材质。这是一种简单的材质，根据法向向量计算物体表面的颜色。 MeshFaceMaterial：网格面材质。这是一个容器，可以为几何体的各个表面指定不同的材质。 MeshLambertMaterial：网格Lambert材质。这是一种考虑光照影响的材质，用于创建暗淡的、不光亮的物体。 MeshPhongMaterial：网格Phong式材质。这是一种考虑光照影响的材质，用于创建光亮的物体。 ShaderMaterial：着色器材质。这种材质允许使用自定义的着色器程序，直接控制顶点的放置方式以及像素的着色方式。 LineBasicMaterial：直线基础材质。这种材质可以用于 THREE.Line（直线）几何体，用来创建着色的直线。 LineDashMaterial：直线基础材质。 这种材质与 LineBasicMaterial（直线基础材质）一样，但允许创建出一种虚线的效果。 3种常用材质基础属性常用的了解下： ID：标识材质 name： 名称 opacity：透明度，结合transparent使用，范围为0~1 transparent：是否透明，如果为true则结合opacity设置透明度。如果为false则物体不透明 visible：是否可见，false则看不见，默认可以看见 side：侧面，觉得几何体的哪一面应用这个材质，默认为THREE.FrontSide(前外面)，还有THREE.BackSide(后内面)和THREE.DoubleSide(两面) needUpdate：如果为true，则在几何体使用新的材质的时候更新材质缓存 ① THREE.MeshBasicMaterial 基础网格材质使用这种材质的网格，通常被渲染成简单的多边形，而且可以选择想要线框。除了一些THREE.Material的属性以外，还有如下属性 color：设置材质的颜色 wireframe：如果为true，则将材质渲染成线框，在调试的时候可以起到很好的作用 wireframeLinewidth：wireframe为true时，设置线框中线的宽度 wireframeLinecap：决定线框端点如何显示，可选的值 round，bevel(斜角)和miter(尖角)。 vertexColors：通过这属性，定义顶点的颜色，在canvasRender中不起作用。 fog：决定单个材质的是否受全局雾化的影响。 对于fog属性，在全局中如果设定了雾化属性，那么本应该对所有场景的物体都添加雾化效果。例如：scene.fog=new THREE.Fog(0xffffff,0.015,100) 而如果在当前材质中设置的如var cubeGeo= new THREE.CubeGeometry(30,30,30);var cubeMat= new THREE.MeshBasicMaterial(&#123;color:&quot;0x0c0c0c&quot;,fog:false&#125;)var cude= new THREE.Mesh(cubeGeo,cubeMat);scene.add(cube); 则在当前这个cude方块中，并不能体现雾化效果。material.wireframe = true; wireframe是否为true 显示如下 ② THREE.MeshLambertMaterial暗淡不发光该材质对光源有反应，除了之前说过的color，transparent，opacity，fog等属性，还有一些特有的属性，总结起来就只有2个 ambient：设置材质的环境色，和AmbientLight光源一起使用，这个颜色会与环境光的颜色相乘。即是对光源作出反应。 emissive：设置材质发射的颜色，不是一种光源，而是一种不受光照影响的颜色。默认为黑色var cubeGeometry = new THREE.BoxGeometry(15, 15, 15);var meshMaterial = new THREE.MeshLamebertMaterial(&#123;color: 0x7777ff&#125;);var cube = new THREE.Mesh(cubeGeometry, meshMaterial); ③ THREE.MeshPhongMaterial金属发亮的物体该材质对光源有反应，除了之前说过的color，transparent，opacity，fog等属性，还有一些特有的属性，总结起来有4个 ambient：设置材质的环境色，和AmbientLight光源一起使用，这个颜色会与环境光的颜色相乘。即是对光源作出反应。 emissive：设置材质发射的颜色，不是一种光源，而是一种不受光照影响的颜色。默认为黑色 specular：指定该材质的光亮程度及其高光部分的颜色，如果设置成和color属性相同的颜色，则会得到另一个更加类似金属的材质，如果设置成grey灰色，则看起来像塑料 shininess：指定高光部分的亮度，默认值为30. var meshMaterial = new THREE.MeshPhongMaterial(&#123; color: 0x7777ff， specular:0x7777ff, shininess:30&#125;);","tags":[{"name":"threejs","slug":"threejs","permalink":"http://www.mjpiero.cc/tags/threejs/"}]},{"title":"mac 使用tree命令","date":"2018-08-23T03:59:10.000Z","path":"2018/08/23/mac-使用tree命令/","text":"开发的时候想要生成树状的目录结构，Linux下有个tree命令可以直接打印出树状的目录结构，可以了解一下，但是mac下默认是木有tree命令的。网上搜了一下，mark一下： 使用find命令模拟出tree命令的效果，如显示当前目录的 tree 的命令： $ find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos; 还可以写一个别名来快速执行该命令，运行如下命令，将上面这个命令写到~/.bash_profile里，以后直接运行tree命令就更方便了: alias tree=&quot;find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos;&quot; 也可以使用 homebrew 安装 tree 命令行：$ brew install tree 这样就在你的mac上安装了 tree 命令行了。 tree命令行参数（只实用与安装了tree命令行工具）： -a 显示所有文件和目录。 -A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。 -C 在文件和目录清单加上色彩，便于区分各种类型。 -d 显示目录名称而非内容。 -D 列出文件或目录的更改时间。 -f 在每个文件或目录之前，显示完整的相对路径名称。 -F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上”*”,”/“,”=”,”@”,”|”号。 -g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。 -i 不以阶梯状列出文件或目录名称。 -I 不显示符合范本样式的文件或目录名称。 -l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。 -n 不在文件和目录清单加上色彩。 -N 直接列出文件和目录名称，包括控制字符。 -p 列出权限标示。 -P 只显示符合范本样式的文件或目录名称。 -q 用”?”号取代控制字符，列出文件和目录名称。 -s 列出文件或目录大小。 -t 用文件和目录的更改时间排序。 -u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。 -x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。","tags":[{"name":"环境搭建","slug":"环境搭建","permalink":"http://www.mjpiero.cc/tags/环境搭建/"},{"name":"linux","slug":"linux","permalink":"http://www.mjpiero.cc/tags/linux/"}]},{"title":"【Web移动端】web移动端软键盘状态","date":"2017-01-18T10:10:54.000Z","path":"2017/01/18/【Web移动端】web移动端软键盘状态/","text":"如今各种移动端设备盛行，虽然现在移动端开发已经非常通用和成熟，但是在开发过程中，还是经常遇到各种神奇的问题，在这里对于移动端web开发遇到的一些问题进行一一整理。对于移动端设备上的软键盘，在某些时候，会成为页面的一部分，并且不同型号的设备的软键盘对于Html布局的实现也有些不同。比如ios设备对于从下方推出键盘的时候，如果输入控件在页面推出之后，在键盘的高度的上方的话，则键盘是以一个浮层的方式弹出，并且将那个触发的控件推到键盘的上方。如果那个控件在页面底部，如果推出的键盘会覆盖该控件，系统会将整个页面向上推，直到将那个控件推到键盘上方为止。而android的实现的不同，有部分的android的实现和ios一样，有些android的机型的实现却不同，如果发现触发的input控件比键盘的高度底的时候，会自动将整个document的高度增加，增加到这个控件的高度超过键盘的高度为止。随后，在判断软键盘是否打开关闭的状态时，因为这两种展现方法的不同，我大概搜罗出可能的解决办法（没有测试全部机型）： 软键盘打开，整个页面向上滑动这种在ios系统里面比较常见，这类的基本上可以通过js的blur的方式来获取事件。$(&quot;.input-content input&quot;).on(&quot;blur&quot;,function()&#123; //键盘关闭事件 &#125;) 软键盘覆盖元素这种情况在ios和android中都有出现，这类的设备，可以通过检测窗口变化来识别var wHeight = window.innerHeight;//获取初始可视窗口高度 window.addEventListener(&apos;resize&apos;, function()&#123;//监测窗口大小的变化事件 var hh = window.innerHeight;//当前可视窗口高度 var viewTop = $(window).scrollTop();//可视窗口高度顶部距离网页顶部的距离 if(wHeight &gt; hh)&#123; //可以作为虚拟键盘弹出事件 &#125;else&#123; //可以作为虚拟键盘关闭事件 &#125; wHeight = hh; &#125;); 通用方法var flag = false;var wHeight = window.innerHeight;window.addEventListener(&apos;resize&apos;, function()&#123; var hh = window.innerHeight; var viewTop = $(window).scrollTop(); if(wHeight &gt; hh)&#123; flag = false; &#125;else&#123; if(!flag)&#123; alert($(&quot;.input-content input&quot;).val()); flag = true; &#125;else&#123; return; &#125; &#125; wHeight = hh; &#125;);$(&quot;.input-content input&quot;).on(&quot;blur&quot;,function()&#123; if(!flag)&#123; alert($(&quot;.input-content input&quot;).val()); flag = true; &#125;else&#123; return; &#125;&#125;).on(&quot;focus&quot;, function()&#123; flag = false;&#125;);","tags":[{"name":"Web移动端","slug":"Web移动端","permalink":"http://www.mjpiero.cc/tags/Web移动端/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.mjpiero.cc/tags/JavaScript/"}]},{"title":"【Web移动端】web移动端调试大法","date":"2016-12-29T07:02:38.000Z","path":"2016/12/29/【Web移动端】web移动端调试大法/","text":"在做移动端web开发的时候，头痛遇到移动端调试的问题，虽然现在很多PC浏览器的开发工具都自带移动端调试功能，但是显然和真机测试还是有一定差距，因为移动端不同的设备会出现不同的问题，在PC模拟器上显示正常的换到真机上测试就是会出问题。在这里整理一些常见的移动端调试方法。 先从一般的页面调试方法开始。 console方式这个是最常见的一种调试方法，通过console在浏览器控制台打印出每步所需的回调数据。详细可以参考Web API接口 浏览器自带的移动端模拟器调试这个现在也比较常见了。最常用的是chrome的模拟器，当然现在流行的浏览器基本上都有开发者的模式，也都携有移动端的模拟器。比如火狐浏览器、360浏览器等。基本上浏览器开启开发者模式的方法都统一了，在windows环境下按F12进入开发者攻击界面，mac环境则是下按option+command+i。 UC浏览器测试UC浏览器提供了开发版方便开发者们连接测试。详见：UC浏览器开发者版 第三方平台在线模拟器调试第三方开发的平台比较方便，功能也相当强大，对于一些需要完善测试的，其实使用第三方的平台还是比较方便的。这里我就推荐几个比较有名的第三方平台： BrowserStack Keynote BrowserShots Browsera Ghostlab等等… 下面介绍一些我比较喜欢的一些远程调试工具。 Weinre之前微信开发工具中的远程调试也是基于这个开发的。安装方法很简单快捷。安装 Weinre：npm install -g weinre 安装完成之后，输入指令启动：weinre --httpPort 8081 --boundHost -all- 显示如下则启动成功。 此时我们访问地址：http://localhost:8081/ 会显示下图： 在页面中也有提供几种方案，在你的项目中添加对应的js。例如：&lt;script src=&quot;http://192.168.55.23:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;随后便可以通过PC访问http://192.168.55.23:8081/client/#anonymous就可以看到手机上访问的项目页面了。 代理应用这类代理应用实际上是用于抓包的，但是比起Weinre是基于开发者自身开发测试的。如果我们想要去获取其他网站的一些资源，例如http请求，或则一些js源码等。这时候使用代理工具比较合适。mac下常使用的是Charles,windows环境下可以用Fiddler默认开启的是8888端口。在手机上设置一个网络代理即可，这个不多详细介绍了。 BrowserSync这是一个很强大的多终端测试工具，它可以跨设备同步操作行为，还可以监听你的文件，在文件修改时自动刷新所有设备中页面。BrowserSync官方网站也可以通过npm全局安装npm install -g browser-sync 随后进入项目根目录下browser-sync start --files &quot;*.*&quot;// 意思为监听当前目录下所有改动 终端中若显示如下，则启动成功： 终端中显示默认访问地址：http://localhost:3001 则可直接进入到控制台界面。之后和weinre类似，也是添加一段js在自己的项目底下。BrowserSync还可以和gulp以及webpack搭配使用，详细的可以看官方文档。 真机测试真机测试是一概而论的说法。由于像ios系统本身就提供了一些对前端十分友好的开发者工具。例如，Safari浏览器自带的开发者工具，或则xcode也有测试的方法，这里我局限性比较高，有这方面条件的是可以去搜罗一下相关的方法。再者，PhoneGap也是有调试工具的，只不过需要安装它测试app。这也是一种方法，不过个人还是偏爱Weinre或则BrowserSync的测试工具。 以上。是我整理的一些移动端测试的方法。欢迎补充~","tags":[{"name":"环境搭建","slug":"环境搭建","permalink":"http://www.mjpiero.cc/tags/环境搭建/"},{"name":"Web移动端","slug":"Web移动端","permalink":"http://www.mjpiero.cc/tags/Web移动端/"}]},{"title":"MongoDB如何开启认证权限功能","date":"2016-12-28T06:04:52.000Z","path":"2016/12/28/MongoDB如何开启认证权限功能/","text":"MongoDB预设不会开启认证权限功能（Authentication），所以任何人都可以随意连接到MongoDB的数据库。于是我们要去创建一个管理员的账号，并为其添加权限。 创建新用户在开启MongoDB服务的情况下。执行mongod或则mongod --dbpath &lt;path to data directory&gt; 进入MongoDB服务。进入服务之后，执行：use admindb.addUser(&quot;账户名称&quot;, &quot;密码&quot;)// 如果希望此账号只有读取的权限，则修改为// db.addUser(&quot;账户名称&quot;, &quot;密码&quot;, true) 执行完成之后，先停止MongoDB服务，在执行下面指令重新开启MongoDB服务：mongod --auth 进入库启动完成之后，在连接上MongoDB Shell，在其中执行以下命令才可进入到admin库中：use admin db.auth(&quot;账户名称&quot;, &quot;密码&quot;)","tags":[{"name":"mongodb","slug":"mongodb","permalink":"http://www.mjpiero.cc/tags/mongodb/"}]},{"title":"MongoDB添加到window服务，随系统自启动","date":"2016-12-28T03:38:01.000Z","path":"2016/12/28/MongoDB添加到window服务，随服务自启动/","text":"最近在window上安转MongoDB，记录一下遇到的一些的问题。 windows上安装MongoDB首先去官网下载Windows安装包：https://www.mongodb.org/downloads安装路径这里假设是安装在 D:/soft/mongodb/。安装好之后，我们可以随便在一个目录下，比如在 D:/ 根目录下创建一个目录 D:\\mongodb\\，进入该目录，新建data和logs两个目录。然后打开控制台命令窗口（CMD），输入D:\\soft\\mongodb\\bin 进入到安装目录下。再执行：mongod --dbpath d:/mongodb/data，开启MongoDB服务，并将运行目录指向之前创建好的 D:\\mongodb\\data 下。打开浏览器，进入：http://127.0.0.1:27017（window服务默认端口27017），这时你会看到以下提示语：You are trying to access MongoDB on the native driver port. For http diagnostic access, add 1000 to the port number 这说明MongoDB服务已经启动了。 添加MongoDB服务到windows本地服务中上面的方法要保证MongoDB服务运行，必须每次都要重复输入命令才能开启。为了方便在windows上开启MongoDB服务，我们需要将MongoDB服务到windows本地服务中，并且设置随系统启动开启。继续回到CMD中，在安装目录中（D:\\soft\\mongodb\\bin）执行：mongod.exe --logpath d:/soft/mongodb/logs/mongodb.log --logappend --dbpath d:/soft/mongodb/data --directoryperdb --serviceName MongoDB -install --auth 此处注意 “–auth” 是将服务开启权限认证，这样别人需要账户和密码才能去访问你的数据库。如果要开启认证，需要在前期运行时要在MongoDB服务中设置好账户密码。详细方法可参考：MongoDB如何开启认证权限功能如果不需要，或则选择后期再设置，可以不使用。 上面执行完毕之后，会在windows服务下创建一个名为MongoDB的服务。执行 net start MongoDB 便开启MongoDB服务了。可以在windows的服务窗口中看见MongoDB的服务状态。 删除MongoDB服务如果要删除MongoDB服务，首先先停止当前的MongoDB服务，这个可以去服务窗口停止。然后在CMD中执行：sc delete MongoDB这样之前安装的服务就会被删除。 安装时遇到的一些问题在安装时可能遇到的一些问题： Windows不能在本地计算机启动MongoDB，错误代码 100解决办法： MongoDB安装目录\\data\\将此文件夹下的mongod.lock、storage.bson删除 连接数据库时发生错误 failed to execute listdatabases command解决办法： 在安装服务的时候开启权限认证，确定一下账户密码是否有误。如果是在添加服务的时候使用了”–auth”命令，则需要进入MongoDB服务中重新添加新的账户和密码。详细方法可参考：MongoDB如何开启认证权限功能","tags":[{"name":"mongodb","slug":"mongodb","permalink":"http://www.mjpiero.cc/tags/mongodb/"},{"name":"环境搭建","slug":"环境搭建","permalink":"http://www.mjpiero.cc/tags/环境搭建/"}]},{"title":"兼容多种模块规范","date":"2016-12-08T04:13:38.000Z","path":"2016/12/08/兼容多种模块规范/","text":"我们通常需要将类库代码包装在一个闭包内，为了能兼容Node、AMD、CMD以及一些常见的浏览器环境中，我们可以使用如下的方法去包装。;(function (name, definition) &#123;// 检测上下文环境是否为AMD或CMDif (typeof define === &quot;function&quot; &amp;&amp; ( define.amd || define.cmd ) ) &#123; define(definition);// 检测上下文环境是否为Node&#125; else if ( typeof module !== &apos;undefined&apos; &amp;&amp; module.exports ) &#123; module.exports = definition();&#125; else &#123; // 将模块的执行结果在window变量中，在浏览器中this指向window对象 this[name] = definition();&#125;&#125;)(&apos;hello&apos;, function () &#123; var hello = function () &#123;&#125;; return hello;&#125;);","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.mjpiero.cc/tags/JavaScript/"}]},{"title":"包与NPM","date":"2016-12-08T02:39:20.000Z","path":"2016/12/08/包与NPM/","text":"在说到NPM之前，应该先提及CommonJS的包规范。 CommonJS包规范定义很简单，它是由包结构和包描述文件两个部分组成。 包结构包结构是用于组织包中的各种文件。完全符合CommonJS规范的包目录应该包含如下文件。 package.json ———— 包描述文件。 bin ———— 用于存放可执行二进制文件的目录。 lib ———— 用于存放js代码的目录。 doc ———— 用于存放文档的目录。 test ———— 用于存放单元测试用例的代码。 包描述文件包描述文件用于表达非代码相关的信息，它是一个JSON格式的文件（package.json），位于根目录下。 这里我们就只介绍 NPM 的 package.json 文件定义了哪些必需的字段： name ———— 项目名称。 version ———— 版本。在 http://semver.org/ 上有详细的定义，通常为 major.minor.revision 格式。 author ———— 作者。 description ———— 项目简介。 keywords ———— 关键词数组。用于NPM中做分类搜索的。 repository ———— 托管源代码的位置列表。示例：{ &quot;type&quot;: &quot;git&quot;, &quot;url&quot;: &quot;https://package/path&quot; } license ———— 当前包所使用的许可证列表。示例：[{ &quot;type&quot;: &quot;GPLv2&quot;, &quot;url&quot;: &quot;http://www.example.com/licenses/gpl.html&quot;, }] engines ———— 指明该项目所需要的nodejs版本。 bugs ———— 返回bug的网页地址或则邮箱地址。 contributors ———— 贡献者列表。 scripts ———— 指定了运行脚本命令的npm命令行缩写。可以自行写好运行脚本。 dependencies ———— 指定了项目运行所依赖的模块。npm install XX --save devDependencies ———— 指定项目开发所需要的模块。npm install XX --save-dev 波浪号（tilde）+指定版本：比如~1.2.2，表示安装1.2.x的最新版本（不低于1.2.2），但是不安装1.3.x，也就是说安装时不改变大版本号和次要版本号。 插入号（caret）+指定版本：比如ˆ1.2.2，表示安装1.x.x的最新版本（不低于1.2.2），但是不安装2.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。 latest：安装最新版本。 peerDependencies ———— 用来供插件指定其所需要的主工具的版本（从npm 3.0版开始，peerDependencies不再会默认安装了）。 bin ———— 用来指定各个内部命令对应的可执行文件的位置。 main ———— 指定加载的入口文件。 config ———— 用于向环境变量输出值。示例：{ &quot;port&quot; : &quot;8080&quot; }，则在server.js脚本就可以直接引用config里的值 http.createServer(...).listen(process.env.npm_package_config_port) 下面是express项目的package.json文件，可以参考下：&#123; &quot;name&quot;: &quot;express&quot;, &quot;description&quot;: &quot;Sinatra inspired web development framework&quot;, &quot;version&quot;: &quot;3.3.4&quot;, &quot;author&quot;: &quot;TJ Holowaychuk &lt;tj@vision-media.ca&gt;&quot;, &quot;contributors&quot;: [ &#123; &quot;name&quot;: &quot;TJ Holowaychuk&quot;, &quot;email&quot;: &quot;tj@vision-media.ca&quot; &#125;, &#123; &quot;name&quot;: &quot;Aaron Heckmann&quot;, &quot;email&quot;: &quot;aaron.heckmann+github@gmail.com&quot; &#125;, &#123; &quot;name&quot;: &quot;Ciaran Jessup&quot;, &quot;email&quot;: &quot;ciaranj@gmail.com&quot; &#125;, &#123; &quot;name&quot;: &quot;Guillermo Rauch&quot;, &quot;email&quot;: &quot;rauchg@gmail.com&quot; &#125; ], &quot;dependencies&quot;: &#123; &quot;connect&quot;: &quot;2.8.4&quot;, &quot;commander&quot;: &quot;1.2.0&quot;, &quot;range-parser&quot;: &quot;0.0.4&quot;, &quot;mkdirp&quot;: &quot;0.3.5&quot;, &quot;cookie&quot;: &quot;0.1.0&quot;, &quot;buffer-crc32&quot;: &quot;0.2.1&quot;, &quot;fresh&quot;: &quot;0.1.0&quot;, &quot;methods&quot;: &quot;0.0.1&quot;, &quot;send&quot;: &quot;0.1.3&quot;, &quot;cookie-signature&quot;: &quot;1.0.1&quot;, &quot;debug&quot;: &quot;*&quot; &#125;, &quot;devDependencies&quot;: &#123; &quot;ejs&quot;: &quot;*&quot;, &quot;mocha&quot;: &quot;*&quot;, &quot;jade&quot;: &quot;0.30.0&quot;, &quot;hjs&quot;: &quot;*&quot;, &quot;stylus&quot;: &quot;*&quot;, &quot;should&quot;: &quot;*&quot;, &quot;connect-redis&quot;: &quot;*&quot;, &quot;marked&quot;: &quot;*&quot;, &quot;supertest&quot;: &quot;0.6.0&quot; &#125;, &quot;keywords&quot;: [ &quot;express&quot;, &quot;framework&quot;, &quot;sinatra&quot;, &quot;web&quot;, &quot;rest&quot;, &quot;restful&quot;, &quot;router&quot;, &quot;app&quot;, &quot;api&quot; ], &quot;repository&quot;: &quot;git://github.com/visionmedia/express&quot;, &quot;main&quot;: &quot;index&quot;, &quot;bin&quot;: &#123; &quot;express&quot;: &quot;./bin/express&quot; &#125;, &quot;scripts&quot;: &#123; &quot;prepublish&quot;: &quot;npm prune&quot;, &quot;test&quot;: &quot;make test&quot; &#125;, &quot;engines&quot;: &#123; &quot;node&quot;: &quot;*&quot; &#125;&#125; 参考文献： 《深入浅出Node.js》朴灵 http://javascript.ruanyifeng.com/nodejs/packagejson.html","tags":[{"name":"nodeJs","slug":"nodeJs","permalink":"http://www.mjpiero.cc/tags/nodeJs/"}]},{"title":"Materialize UI 风格 WIKI 模板页","date":"2016-10-21T10:16:56.000Z","path":"2016/10/21/Materialize-UI-风格-WIKI-模板页/","text":"简介Materialize 是基于Material Design的UI框架。 使用Materialize框架制作了一个WIKI文档的模板页面。 实现功能 动态生成左侧栏导航 生成面包屑（这个一直没找到很好的控制方法，肯定是我蠢！） 【伪】templates加载（其实是想仿照做一个路由加载指定模块的功能） 源码github: https://github.com/MJPiero/wiki-materialize","tags":[{"name":"mywork","slug":"mywork","permalink":"http://www.mjpiero.cc/tags/mywork/"}]},{"title":"【接粽子】小游戏 Made With CreateJs","date":"2016-10-21T08:55:05.000Z","path":"2016/10/21/【接粽子】小游戏-Made-With-CreateJs/","text":"简介制作的一款类似于接金币一类的小游戏。公司为了在端午节做宣传用的。 一款好的游戏离不开好的设计，在此先给亲爱的设计妹纸点个赞~ (❁’▽’❁) 游戏效果如下： 第一次尝试用createJs框架去搭建H5游戏，确实比起以前自己用canvas写的要方面很多，也流畅了不少。 Demo在微信上发布的游戏，请用微信扫码查看： 源码github：https://github.com/MJPiero/catchzongzi 另外也在github上分享了源码。说实话本人对于我写的不算满意，因为…… 用了太多愚蠢的方法，不过当时时间有点赶，就没有花太多时间去优化。也希望大家能提出更好的优化方法来。大家一起学习一起奋进嘞嘿！！！！","tags":[{"name":"mywork","slug":"mywork","permalink":"http://www.mjpiero.cc/tags/mywork/"},{"name":"canvas","slug":"canvas","permalink":"http://www.mjpiero.cc/tags/canvas/"},{"name":"h5game","slug":"h5game","permalink":"http://www.mjpiero.cc/tags/h5game/"}]},{"title":"解决gem install SSL 证书错误","date":"2016-10-21T08:40:10.000Z","path":"2016/10/21/解决gem-install-SSL-证书错误/","text":"这个问题我是在替换gem镜像路径的时候遇到的。 详情见：解决国内Ruby Gem Install 失败问题 这个其实也折腾了我一个多小时在网上找解决办法。 问题相信有部分的人在按照上面方法安装的时候出现了和我一样的问题： 在网上搜索一圈之后，解释是： ruby 没有包含 SSL 证书，所以 https 的链接被服务器拒绝。 本来这个情况下，只要改用http路径就好了，偏偏淘宝已经停止基于HTTP协议的镜像服务了。 于是我继续在网上搜了一圈，找到了如下的解决办法（来源：https://gist.github.com/fnichol/867550 ）: 解决先下载证书 http://curl.haxx.se/ca/cacert.pem ，然后再环境变量里设置 SSL_CERT_FILE 这个环境变量，并指向 cacert.pem 文件。 之后再在cmd.exe中输入命令： set SSL_CERT_FILE=C:\\path\\to\\cacert.pem 之后再按照上面的方法来操作一遍~~~ Perfect！！","tags":[{"name":"环境搭建","slug":"环境搭建","permalink":"http://www.mjpiero.cc/tags/环境搭建/"},{"name":"Ruby","slug":"Ruby","permalink":"http://www.mjpiero.cc/tags/Ruby/"}]},{"title":"解决国内Ruby Gem Install 失败问题","date":"2016-10-21T06:55:48.000Z","path":"2016/10/21/解决国内Ruby-Gem-Install-失败问题/","text":"做一个国内的程序员真的是很辛苦很辛苦，各种被墙，科技还怎么进步捏。好在上有政策下有对策，国内大神还是很良心的给我们提供了很多不少解决方案。 淘宝团队提供了国内可以快速访问的镜像地址，官方地址：https://ruby.taobao.org/ 官方有详细的替换的方法，这里我也按照我的流程过一遍。 安装Ruby首先，我的系统是win7。 在window上安装Ruby，可以通过下载RubyInstaller工具（ http://rubyinstaller.org/ ）快速安装： 替换成taobao镜像之后 win+R 键打开运行窗口，输入cmd 快速打开命令行程序。$ gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/$ gem sources -l*** CURRENT SOURCES ***https://ruby.taobao.org# 请确保只有 ruby.taobao.org$ gem install rails 以上是淘宝官方的方法。很简单，然而现实总是没这么顺利… 和我一样安装遇到SSL证书错误的请看这里：解决gem install SSL 证书错误","tags":[{"name":"环境搭建","slug":"环境搭建","permalink":"http://www.mjpiero.cc/tags/环境搭建/"},{"name":"Ruby","slug":"Ruby","permalink":"http://www.mjpiero.cc/tags/Ruby/"}]},{"title":"开启新世界的大门！(灬ºωº灬)","date":"2016-10-21T06:38:33.000Z","path":"2016/10/21/开启新世界的大门！-灬ºωº灬/","text":"首先，欢迎你手残点进了此地！！！ξ( ✿＞◡❛) 博主前端开发人员一枚，于今涉足行业将近2年，在之前干过漫画编辑做过网页设计，可谓上得了厅堂下得了厨房。然而水平有限，寻求志同道合人士共同学习进步。 (´∩ω∩｀) 此博客内容仅仅是自己学习上的一些心得总结，并不一定是正确可取的，还希望发现BUG的小伙伴们积极指出错误！ 知错能改，善莫大焉。(⁰▿⁰) 还望大家文明交流，博主其实是玻璃心。(´▽`ʃ♡ƪ)","tags":[]}]