<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MJPiero&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/4becd097c993840b6d520e5672c7ecbc</icon>
  <subtitle>一只有节操的前端喵╮(╯_╰)╭。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.mjpiero.cc/"/>
  <updated>2018-09-05T08:08:37.123Z</updated>
  <id>http://www.mjpiero.cc/</id>
  
  <author>
    <name>MJPiero</name>
    <email>merlu.majing@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>npx 了解一下</title>
    <link href="http://www.mjpiero.cc/2018/09/05/npx-%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B/"/>
    <id>http://www.mjpiero.cc/2018/09/05/npx-了解一下/</id>
    <published>2018-09-05T07:44:54.000Z</published>
    <updated>2018-09-05T08:08:37.123Z</updated>
    
    <content type="html"><![CDATA[<p>在看vue-cli 3的时候才看到有关<a href="https://github.com/zkat/npx" target="_blank" rel="noopener">npx</a>的指令。npm更新至5.2.0会自动安装的一条指令，主要是为了方面开发者使用包内提供的命令行工具。<br>比如说：我们要用一个 <code>create-app-cli</code> 工具包去执行里面的某个指令，使用npm命令的话<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -g create-app-cli</span><br><span class="line">create-app-cli my-app</span><br></pre></td></tr></table></figure></p><p>使用npx命令：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npx create-app-cli my-app</span><br></pre></td></tr></table></figure></p><p>该命令会临时安装 <code>create-app-cli</code> 包，并且执行包内指令，完成后坏删除create-app-cli包，下次再执行需要重新安装。嗯，这个对于强迫症患者有奇效。</p><p>再者，npx 会帮你执行依赖包里的二进制文件。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -D webpack</span><br><span class="line">./node_modules/.bin/webpack -v</span><br><span class="line"># 也可以写成</span><br><span class="line"># `npm bin`/webpack -v   // bash命令写法</span><br></pre></td></tr></table></figure></p><p>npx命令：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -D webpack</span><br><span class="line">npx webpack -v</span><br></pre></td></tr></table></figure></p><p>npx 会自动查找当前依赖包中的可执行文件，如果找不到，就会去 PATH 里找。如果依然找不到，就会帮你安装。</p><p>甚至还支持运行远程仓库的可执行文件：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npx github:piuccio/cowsay hello</span><br></pre></td></tr></table></figure></p><p>最有意思的是 npx http-server 可以一句话帮你开启一个静态服务器，初次运行会稍微慢一些。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npx http-server</span><br></pre></td></tr></table></figure></p><p>还可以指定不同的node版本去运行npm script：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npx -p node@6 npm run dev</span><br></pre></td></tr></table></figure></p><p>可以省去使用nvm指令了。<br>可以尝试使用看看。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在看vue-cli 3的时候才看到有关&lt;a href=&quot;https://github.com/zkat/npx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;npx&lt;/a&gt;的指令。npm更新至5.2.0会自动安装的一条指令，主要是为了方面开发者使用包内提供
      
    
    </summary>
    
      <category term="nodejs" scheme="http://www.mjpiero.cc/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://www.mjpiero.cc/tags/nodejs/"/>
    
      <category term="npm" scheme="http://www.mjpiero.cc/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>js模块化规范总结</title>
    <link href="http://www.mjpiero.cc/2018/08/29/js%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83%E6%80%BB%E7%BB%93/"/>
    <id>http://www.mjpiero.cc/2018/08/29/js模块化规范总结/</id>
    <published>2018-08-29T02:17:23.000Z</published>
    <updated>2018-08-29T12:14:46.683Z</updated>
    
    <content type="html"><![CDATA[<p>早期，我们在使用js开发的时候，并没有类的概念，更不用说模块（Module）了，当然现在es2015|2016在语言标准的层面上，已经实现了模块的功能，而且实现的很简单，用意也是为了尽可能成为浏览器和服务器通用的模块解决方案。<br>那么，作为一个模块化的系统，需要具备的是以下能力：</p><ol><li>定义封装的模块。</li><li>定义新模块对其他模块的依赖。</li><li>可对其他模块的引入支持。</li></ol><p>让我们回忆一下广为人知的几个不同的模块化规范。</p><h2 id="commonJS"><a href="#commonJS" class="headerlink" title="commonJS"></a>commonJS</h2><p>在es2015之前，js没有模块化的规范，Nodejs的CommonJS率先制定了js的模块化标准，当然也是仅仅限制在Nodejs的服务器环境下使用。</p><ul><li><strong>模块化定义：</strong> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// hello.js</span><br><span class="line">// exports是作为模块文件唯一出口的对象</span><br><span class="line">function hello()&#123;</span><br><span class="line">console.log(&apos;hello&apos;);</span><br><span class="line">&#125;</span><br><span class="line">exports.hello = hello;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// module为全局的对象，其exports属性等同于全局的exports对象</span><br><span class="line">module.exports = &#123;</span><br><span class="line">sayName()&#123;</span><br><span class="line">console.log(&apos;my name is Luo Xia&apos;);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：这里需要注意的是一旦使用了module.exports，最终出口将会忽略在全局的exports对象上添加的属性和方法。</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//Module.js</span><br><span class="line">function a()&#123;</span><br><span class="line">console.log(&apos;a&apos;);</span><br><span class="line">&#125; </span><br><span class="line">exports.a = a;</span><br><span class="line">module.exports = &#123;</span><br><span class="line">b()&#123;</span><br><span class="line">console.log(&apos;b&apos;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//testM.js</span><br><span class="line">let m = require(&quot;./Module&quot;);</span><br><span class="line">console.log(typeof m.a); //undefined</span><br><span class="line">console.log(typeof m.b); //function</span><br></pre></td></tr></table></figure><ul><li><strong>导入：</strong> require(‘路径’)<br>有关require导入的路径规范，可以了解一下NodeJS里npm指令，这里要提到的是模块会优先从缓存加载，会优先加载核心模块（比如npm安装好的依赖包下的模块），之后才会加载文件模块。</li></ul><h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><p>AMD中译是“异步模块定义”的意思。它是一个浏览器环境下的模块化规范，可以采用同步和异步地加载方式加载模块文件。</p><ul><li><strong>模块化定义：</strong> 全局的 define(id?, dependencies?, factory);<br>id为模块标识符，dependencies为模块依赖的其他模块，factory为依赖加载完毕后执行的回调函数。</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 独立加载模块，不依赖其他模块，省略dependencies</span><br><span class="line">define(function()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">sayHello()&#123;</span><br><span class="line">console.log(&apos;hello&apos;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 依赖其他模块</span><br><span class="line">define([&apos;jquery&apos;],function()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p><strong>导入：</strong> require([‘模块名称’], function (‘模块变量引用’){// 代码});</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// a.js</span><br><span class="line">define(function ()&#123;</span><br><span class="line">　　return &#123;</span><br><span class="line">　　　a:&apos;hello world&apos;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;);</span><br><span class="line">// b.js</span><br><span class="line">require([&apos;./a.js&apos;], function (moduleA)&#123;</span><br><span class="line">    console.log(moduleA.a); // 打印出：hello world</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>应用：</strong> <a href="https://requirejs.org/" target="_blank" rel="noopener">requireJS</a></p></li></ul><h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><p>CMD是在AMD基础上改进的一种规范，和AMD不同在于对依赖模块的执行时机处理不同，CMD是就近依赖，而AMD是前置依赖。也就是说AMD要在一开始就加载所有的依赖，而CMD是一级一级的加载。</p><ul><li><strong>定义模块：</strong> define(function(require, exports, module) {});<br>像AMD和CommonJS的整合版，和NodeJS兼容性会比较好，后期requireJS</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">define(function(require,exports,module)&#123;</span><br><span class="line">    require(&apos;...&apos;);</span><br><span class="line">...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>导入：</strong> </li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// a.js</span><br><span class="line">define(function (require, exports, module)&#123;</span><br><span class="line">　　exports.a = &apos;hello world&apos;;</span><br><span class="line">&#125;);</span><br><span class="line">// b.js</span><br><span class="line">define(function (require, exports, module)&#123;</span><br><span class="line">    var moduleA = require(&apos;./a.js&apos;);  // 同步加载</span><br><span class="line">    // requie.async(id,callback?);  异步加载</span><br><span class="line">    console.log(moduleA.a); // 打印出：hello world</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>比起AMD默认一个当多个用，CMD则是按照API严格区分，AMD中require分全局和局部加载，但是CMD是没有全局require的，每个API都简单纯粹。</p><ul><li><strong>应用：</strong> <a href="https://seajs.github.io/seajs/" target="_blank" rel="noopener">Seajs</a></li></ul><h2 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h2><p>兼容AMD和CommonJS的规范，还兼容全局引用的方式。因此在浏览器和服务器的环境都可以应用此规范。<br>实际上就是一个兼容性的写法，详细可看：<a href="http://www.mjpiero.cc/2016/12/08/UMD%E5%85%BC%E5%AE%B9%E5%A4%9A%E7%A7%8D%E6%A8%A1%E5%9D%97%E8%A7%84%E8%8C%83/">UMD兼容多种模块规范</a></p><h2 id="ES2015-ES2016-Module规范"><a href="#ES2015-ES2016-Module规范" class="headerlink" title="ES2015|ES2016 Module规范"></a>ES2015|ES2016 Module规范</h2><p>ES2015出来之后，终于有了自己的模块规范。下面我们直接从es6开始说。</p><ul><li><strong>定义模块化：</strong> </li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// test.js</span><br><span class="line">let a = &apos;hello&apos;;</span><br><span class="line">let b = &apos;word&apos;;</span><br><span class="line">let year = 2018;</span><br><span class="line"></span><br><span class="line">// 和CommonJS不同的是，这里export后面跟着的不是对象，而是一系列代表出口的值</span><br><span class="line">// 同样可以用as设置别名</span><br><span class="line">// 例如：export&#123;a as aName&#125;</span><br><span class="line"></span><br><span class="line">// 这类</span><br><span class="line">export &#123;a, b&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>注：export后面可以直接跟一个函数，但是不能直接跟对象，对象都需要用<code>{}</code>框起来（export default输出不同）。</p></blockquote><ul><li><strong>导入：</strong><br>我们都知道CommonJS的模块是一个对象，es6的模块不是对象，是编译时执行的，使得编译时就能够确定依赖关系和输入输出的变量。<br>比如说：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 从fs里面加载3个方法，其他方法不加载，这叫”编译时加载“，ES6可以在编译时就完成模块加载。</span><br><span class="line">import &#123; stat, exists, readFile &#125; from &apos;fs&apos;;</span><br></pre></td></tr></table></figure><p>引用的时候我们没法引用模块本身，因为它不是对象。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123;a, b, c&#125; from &apos;./test&apos;;</span><br><span class="line"></span><br><span class="line">import &#123;a as name, b, c&#125; from &apos;./test&apos;;</span><br><span class="line"></span><br><span class="line">import * as ALLName from &apos;./test&apos;;</span><br></pre></td></tr></table></figure></p><ul><li><strong>默认输出：</strong><br>当我们并不知道模块的API，可以提供默认输出：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default function () &#123;</span><br><span class="line">  console.log(&apos;foo&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时通过import导出则不需要{}，因为只有一个变量：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import name from &apos;./export-default&apos;;</span><br><span class="line"></span><br><span class="line">// 例如我们在使用一些库</span><br><span class="line">// import $ from &apos;jquery&apos;;</span><br></pre></td></tr></table></figure><blockquote><p>注：es6 Module和CommonJS有个本质的区别，CommonJS加载的模块是对值的拷贝，而ES6 Module是对值的引用，这样模块定义文件内部变量的变化会实时反映到依赖文件，而CommonJS不同。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>自从es2015出来之后，AMD和CMD规范用的越来越少了，但是并不代表这些完全失去了可用性，考虑到浏览器的兼容性，虽然现在浏览器环境对es6的支持越来越完善了，但考虑对一些低版本的浏览器支持，很多在写es6的时候还是会使用babel对es6做一层转换，比如结合webpack配置去打包一个es6语法的js组件，打包出来会是UMD规范的，这是兼容性比较强的一种规范。<br>当然，实际上只是要大家尽可能养成模块化开发的思想，灵活的在不同环境下去运用好这些规范。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;早期，我们在使用js开发的时候，并没有类的概念，更不用说模块（Module）了，当然现在es2015|2016在语言标准的层面上，已经实现了模块的功能，而且实现的很简单，用意也是为了尽可能成为浏览器和服务器通用的模块解决方案。&lt;br&gt;那么，作为一个模块化的系统，需要具备的是
      
    
    </summary>
    
      <category term="javascript" scheme="http://www.mjpiero.cc/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://www.mjpiero.cc/tags/javascript/"/>
    
      <category term="模块化" scheme="http://www.mjpiero.cc/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>你还在用第三方组件做Base64的编码和解码么？</title>
    <link href="http://www.mjpiero.cc/2018/08/24/%E4%BD%A0%E8%BF%98%E5%9C%A8%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BB%84%E4%BB%B6%E5%81%9ABase64%E7%9A%84%E7%BC%96%E7%A0%81%E5%92%8C%E8%A7%A3%E7%A0%81%E4%B9%88%EF%BC%9F/"/>
    <id>http://www.mjpiero.cc/2018/08/24/你还在用第三方组件做Base64的编码和解码么？/</id>
    <published>2018-08-24T08:16:43.000Z</published>
    <updated>2018-08-24T09:59:08.737Z</updated>
    
    <content type="html"><![CDATA[<p>清早看到一篇张老师的文章，才发现自己傻傻的用了很多年的第三方组件。<br>早期web端要做base64编码和解码的时候最常用的就是去找个开源的组件base64.js。嗯，现在都还是这样的，觉得还满完美的，看了才发现实际浏览器原生提供了Base64编码解码的方法，啊，孤陋寡闻！！！<br>嗯，我按照自己的理解简单介绍一下，btoa和atob的方法。来，跟我学着在浏览器的控制器上测试一下。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.btoa(&apos;MJPiero&apos;);     //编码结果：&quot;TUpQaWVybw==&quot;</span><br><span class="line"></span><br><span class="line">window.atob(&quot;TUpQaWVybw==&quot;);    //解码结果 &quot;MJPiero&quot;</span><br></pre></td></tr></table></figure></p><p>是不是很简单！还有一个要注意的地方。如果你如下输入：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.btoa(&apos;博客&apos;);</span><br></pre></td></tr></table></figure></p><p>你会发现页面会报错：<br><code>Uncaught DOMException: Failed to execute &#39;btoa&#39; on &#39;Window&#39;: The string to be encoded contains characters outside of the Latin1 range.</code></p><p>这是因为不支持中文汉字的缘故，但是我们加一层转码就可以了。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.btoa(window.encodeURIComponent(&apos;博客&apos;));   //编码结果：&quot;JUU1JThEJTlBJUU1JUFFJUEy&quot;</span><br><span class="line"></span><br><span class="line">window.decodeURIComponent(window.atob(&apos;JUU1JThEJTlBJUU1JUFFJUEy&apos;));     //解码结果 &quot;博客&quot;</span><br></pre></td></tr></table></figure></p><p>此外这个还有很多可以拓展的地方，这里还是让大家去<a href="https://www.zhangxinxu.com/wordpress/2018/08/js-base64-atob-btoa-encode-decode/" target="_blank" rel="noopener">张鑫旭</a>老师的文章里面去看看：</p><ul><li>IE8/IE9的polyfill。由于这个方法支持IE10+的浏览器，所以有向下兼容的方法。</li><li>任意文件Base64编码。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;清早看到一篇张老师的文章，才发现自己傻傻的用了很多年的第三方组件。&lt;br&gt;早期web端要做base64编码和解码的时候最常用的就是去找个开源的组件base64.js。嗯，现在都还是这样的，觉得还满完美的，看了才发现实际浏览器原生提供了Base64编码解码的方法，啊，孤陋寡闻
      
    
    </summary>
    
      <category term="javascript" scheme="http://www.mjpiero.cc/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://www.mjpiero.cc/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>CSS相对单位</title>
    <link href="http://www.mjpiero.cc/2018/08/24/CSS%E7%9B%B8%E5%AF%B9%E5%8D%95%E4%BD%8D/"/>
    <id>http://www.mjpiero.cc/2018/08/24/CSS相对单位/</id>
    <published>2018-08-24T07:14:30.000Z</published>
    <updated>2018-08-24T07:14:30.842Z</updated>
    
    <content type="html"><![CDATA[<p>现在一提到响应式布局，css相对单位，相信众多前端行业的小可爱们都知道<code>em|rem</code>，再者是现在大家都比较熟知的<code>视口单位 vh|vw</code>。<br>emm…在说这些之前，让我们回顾一下CSS单位的历史。</p><h2 id="早期-Pixel-px"><a href="#早期-Pixel-px" class="headerlink" title="早期 Pixel (px)"></a>早期 Pixel (px)</h2><p>在web环境下，用户可以将浏览器窗口设置成任意大小，CSS需要去适应它，而且用户在打开一个页面之后，还会再去调整它的大小，CSS也需要去适应这些条件。由此我们可以知道，在创建页面的时候，样式并没有被调用，而是当页面开始渲染时，浏览器才会去计算样式的规则。</p><p>那么早些时候是如何解决设备窗口自适应的问题呢。</p><p>早些时候，我们的设计大大们就想出了<code>完美像素设计</code>，解放了前端工程师们的双手，设计师们会创建一个有效宽度的容器，例如800px-950px宽的居中纵向列，也这个为基准再进行设计，这跟他们在原生应用程序或印刷出版物中做的设计或多或少有点类似。</p><p>然后后来，有多年经验的前端应该能感受到，显示屏的分辨率越来越大，之前的950px的有效宽度开始延伸到1024px，但是兼容小分辨率屏幕使得这个问题变得不可解。而使得开发者不得不放弃“完美像素”设计的起因，是因为智能手机的普及。</p><p>于是，<code>响应式设计</code>应运而生！！</p><blockquote><p>响应式 —— 在CSS中，这指的针对不同大小的浏览器窗口，用不同的方式响应更新页面的样式。我们要对不同尺寸的手机、平板电脑或桌面显示器多花心思了。我们将在第8章中详细介绍响应式设计，但在本章中，我会先给大家介绍一些重要的基础概念。</p></blockquote><p>开发人员曾经的宠儿（px）就要下线了。这里要提一下，CSS里1像素并不严格等同于显示器的1像素，在高分辨率显示器上更加明显。尽管根据浏览器、操作系统和硬件的不同，CSS的测量值可能会有细微的差别，但96px总是会大致等于屏幕上的物理1英寸。</p><h2 id="em-的用法"><a href="#em-的用法" class="headerlink" title="em 的用法"></a>em 的用法</h2><p>先来看看em，em是最为常见的相对长度单位，基准是当前元素的<code>字号大小（font-size）</code>，例如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  padding: 1em; // padding: 16px;          </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>把padding赋值为1em，乘以字号，得到一个值为16px的padding渲染值，因为该元素的字号是16px，以此类推要2em = 16px * 2 = 32px; 使用相对单位声明的值会由浏览器转化为一个绝对值，我们称之为<code>计算值</code>。</p><h3 id="em-通常用法"><a href="#em-通常用法" class="headerlink" title="em 通常用法"></a>em 通常用法</h3><p>在设置padding、height、width或border-radius等属性时，使用em可能会很方便，因为如果它们继承了不同的字号大小，或者用户更改了字体设置，这些属性会均匀地缩放。<br>可以测试看看效果，熟悉一下不同盒子下em的用法。<br>HTML:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span class=&quot;box box-small&quot;&gt;Small&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;box box-large&quot;&gt;Large&lt;/span&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  padding: 1em;</span><br><span class="line">  border-radius: 1em;</span><br><span class="line">  background-color: lightgray;</span><br><span class="line">&#125;</span><br><span class="line">.box-small &#123;</span><br><span class="line">  font-size: 14px;              </span><br><span class="line">&#125;</span><br><span class="line">.box-large &#123;</span><br><span class="line">  font-size: 16px;              </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="用于font-size"><a href="#用于font-size" class="headerlink" title="用于font-size"></a>用于font-size</h3><p>em是基于font-size去计算的，那么如果用在font-size上呢？<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;p class=&quot;box&quot;&gt;猜猜我的字号是多少？&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">// css</span><br><span class="line">.box&#123;</span><br><span class="line">    font-size: 1.2em;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面这种情况，em会以<code>父元素</code>的字号为基准，例如box的父元素是body，则会以body的font-size大小为基准。一般情况下我们会声明body的字号大小，如果没有声明，则以浏览器的默认样式为主<br>通常情况下浏览器有默认的css样式，每个默认的样式都是不同的，看看下面例子：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">&#125;</span><br><span class="line">.box &#123;</span><br><span class="line">  font-size: 1.2em;     // 19.2px          </span><br><span class="line">  padding: 1.2em;       // 23.04px        </span><br><span class="line">  background-color: #ccc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>box的font-size是基于body的字号大小计算的，而padding则是基于box的font-size计算的，所以是19.2 * 1.2 = 23.04px。</p><blockquote><p>可以尝试用em去做多层的嵌套列表，可以做出字号层层收缩的效果，例如ul，li列表。</p></blockquote><h2 id="rem-的用法"><a href="#rem-的用法" class="headerlink" title="rem 的用法"></a>rem 的用法</h2><p>rem 顾名思义是 root em 的缩写，和em不同的是，em是依赖当前元素，而rem是和根元素关联的。<br>说到根元素，大家可以先认识一下一个特别的伪类选择器 - <code>:root</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:root &#123;                    /* 等同于 html 选择器 */</span><br><span class="line">  font-size: 1em;      // 16px,浏览器的默认字号大小</span><br><span class="line">&#125;</span><br><span class="line">ul &#123;</span><br><span class="line">  font-size: .8rem;     // 16 * 0.8 = 12.8px</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这里 0.8rem 无论放在什么地方，都等同于0.8倍的根元素的字号大小。</p><p>很简单吧~ 当然rem也好em也好都只是一种方式，如果去搭配使用还是要看个人对页面布局的理解。比如说，对font-size使用rem，因为现在很多浏览器可以通过ctrl- 和 Ctrl+ 对页面进行缩放，rem只依赖根元素，这样不会产生字号收缩的问题，字号大小变得可预测。而对padding、margin、border-radius等使用em则会更好，因为这些度量方式只是针对当前的元素来看的。在然后border的宽度则用px比较好，因为边框这个一般不会根据页面放缩去做计算的。</p><h2 id="视口单位-vh-vm"><a href="#视口单位-vh-vm" class="headerlink" title="视口单位 vh | vm"></a>视口单位 vh | vm</h2><p>我们知道em和rem都是以font-size为基准的，而视口单位是依靠浏览器的视口大小来定义长度的。</p><blockquote><p>视口（viewport） —— 在浏览器窗口中用来渲染页面的可视区域，这不包括浏览器的地址栏、工具栏、状态栏等（如果有的话）。<br><strong>常见的视口单位：</strong></p><ul><li>vh —— 视口高度的1/100</li><li>vw —— 视口宽度的1/100</li><li>vmin —— 视区宽度或高度较小值的1/100（IE9支持的是vm）</li><li>vmax —— 视区宽度或高度较大值的1/100（在写本书时，IE或者Edge都不支持）</li></ul></blockquote><p>举个例子，50vw等于视口宽度的一半，而50vh等于视口高度的50%。vmin依赖两者（宽或高）的较小值，如果我们需要确保一个元素不管在横屏还是竖屏下适应屏幕展示的话，这个属性会很有帮助：如果是横屏，vmin的基准值是屏幕的高度，如果是竖屏，它的基准值是屏幕的宽度。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  width: 90vmin;</span><br><span class="line">  height: 90vmin;</span><br><span class="line">  background-color: #369;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里笔者就不截图了，大家试试看就知道了（笑）。</p><h3 id="vw用于font-size"><a href="#vw用于font-size" class="headerlink" title="vw用于font-size"></a>vw用于font-size</h3><p>同样我们来看看视口单位用在字号上会发生什么。<br>加入我们设置一个元素的font-size: 2vm；会怎么样呢。假设PC屏幕宽 1400px，那么2vm等于28px，pad的屏幕768px宽，2vm等于15px。可以看出问题了吧~ 28px的字体对于PC来说太大了，而这个你放到手机屏幕上，经过计算字号会小于10px，这个效果就不太好了。</p><p>这样我们就有个新的方法！！！</p><h3 id="calc"><a href="#calc" class="headerlink" title="calc()"></a>calc()</h3><p>calc()函数支持对2个或者更多个数值进行基础的运算。</p><blockquote><p>注意：使用加减运算的时候左右必须要有空格，例如calc(3em + 16px)。<br>好了为了解决vw在font-size使用造成的漏洞，我们可以尝试：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:root &#123;</span><br><span class="line">  font-size: calc(0.5em + 1vw);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>0.5em这里表示字号的最小值，1vw代表根据设备宽度响应式的网上叠加，这样你就会发现字体收缩就正常多了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当然要实现响应式的设计，不仅仅是灵活的运用好这些相对单位，而细节上的细微的调整可能还是需要依赖媒体查询的代码，但是现在的前端开发者们要慢慢停止使用px思维去思考布局，CSS的东西看上去简单，实际上深入学习有很多意想不到的优势，需要大家多多探究，辣么，笔者就先写到这里了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在一提到响应式布局，css相对单位，相信众多前端行业的小可爱们都知道&lt;code&gt;em|rem&lt;/code&gt;，再者是现在大家都比较熟知的&lt;code&gt;视口单位 vh|vw&lt;/code&gt;。&lt;br&gt;emm…在说这些之前，让我们回顾一下CSS单位的历史。&lt;/p&gt;
&lt;h2 id=&quot;早
      
    
    </summary>
    
      <category term="css" scheme="http://www.mjpiero.cc/categories/css/"/>
    
    
      <category term="css" scheme="http://www.mjpiero.cc/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>mainifest.json</title>
    <link href="http://www.mjpiero.cc/2018/08/23/mainifest-json/"/>
    <id>http://www.mjpiero.cc/2018/08/23/mainifest-json/</id>
    <published>2018-08-23T04:24:55.000Z</published>
    <updated>2018-08-24T09:58:52.830Z</updated>
    
    <content type="html"><![CDATA[<p>在看别人开发的架子的时候，看到了这个文件，网上大概搜了一下，在此mark一下。</p><p>developers.google.com 上有个简介，中译过来被叫做“网络应用清单”，很多人也将他和web离线缓存联系在一起。<br>实际上，开发者可以利用 mainifest.json 控制在用户想要看到应用的区域（例如移动设备主屏幕）中如何向用户显示网络应用或网站，指示用户可以启动哪些功能，以及定义其在启动时的外观。</p><p>mainifest.json 提供了将网站书签保存到设备主屏幕的功能。当网站以这种方式启动时：</p><ul><li>它具有唯一的图标和名称，以便用户将其与其他网站区分开来。</li><li>它会在下载资源或从缓存恢复资源时向用户显示某些信息。</li><li>它会向浏览器提供默认显示特性，以避免网站资源可用时的过渡过于生硬。</li><li>它通过一个文本文件中的元数据这一简单机制完成所有这些工作。那就是网络应用清单。</li></ul><blockquote><p>注：尽管您可以在任何网站上使用该文件，它们却是 PWA 的必备要素。</p></blockquote><h2 id="创建清单"><a href="#创建清单" class="headerlink" title="创建清单"></a>创建清单</h2><p>下面是一个示例：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;short_name&quot;: &quot;AirHorner&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;Kinlan&apos;s AirHorner of Infamy&quot;,</span><br><span class="line">  &quot;icons&quot;: [                              // 自定义图标</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;src&quot;: &quot;launcher-icon-1x.png&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;image/png&quot;,</span><br><span class="line">      &quot;sizes&quot;: &quot;48x48&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;src&quot;: &quot;launcher-icon-2x.png&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;image/png&quot;,</span><br><span class="line">      &quot;sizes&quot;: &quot;96x96&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;src&quot;: &quot;launcher-icon-4x.png&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;image/png&quot;,</span><br><span class="line">      &quot;sizes&quot;: &quot;192x192&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;start_url&quot;: &quot;index.html?launcher=true&quot;,  // 设置启动网址</span><br><span class="line">  &quot;background_color&quot;: &quot;#000000&quot;             // 设置背景颜色</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>确保包括以下内容：</p><ul><li>在用户主屏幕上用作文本的 short_name。</li><li>在网络应用安装横幅中使用的 name。</li></ul><h2 id="将清单的相关信息告知浏览器"><a href="#将清单的相关信息告知浏览器" class="headerlink" title="将清单的相关信息告知浏览器"></a>将清单的相关信息告知浏览器</h2><p>在您创建清单且将清单添加到您的网站之后，将 link 标记添加到包含网络应用的所有页面上，如下所示：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;manifest&quot; href=&quot;/manifest.json&quot;&gt;</span><br></pre></td></tr></table></figure></p><h2 id="测试您的清单"><a href="#测试您的清单" class="headerlink" title="测试您的清单"></a>测试您的清单</h2><p>如果您想要手动验证网络应用清单是否已正确设置，请使用 Chrome DevTools 的 Application 面板上的 Manifest 标签。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://developers.google.com/web/fundamentals/web-app-manifest/images/devtools-manifest.png?hl=zh-cn" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p><a href="https://developers.google.com/web/fundamentals/web-app-manifest/?hl=zh-cn" target="_blank" rel="noopener">google开发者原文</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在看别人开发的架子的时候，看到了这个文件，网上大概搜了一下，在此mark一下。&lt;/p&gt;
&lt;p&gt;developers.google.com 上有个简介，中译过来被叫做“网络应用清单”，很多人也将他和web离线缓存联系在一起。&lt;br&gt;实际上，开发者可以利用 mainifest.
      
    
    </summary>
    
      <category term="javascript" scheme="http://www.mjpiero.cc/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://www.mjpiero.cc/tags/javascript/"/>
    
      <category term="web移动端" scheme="http://www.mjpiero.cc/tags/web%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="缓存" scheme="http://www.mjpiero.cc/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>threeJS 学习笔记 - 材质</title>
    <link href="http://www.mjpiero.cc/2018/08/23/threeJS-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%9D%90%E8%B4%A8/"/>
    <id>http://www.mjpiero.cc/2018/08/23/threeJS-学习笔记-材质/</id>
    <published>2018-08-23T04:15:58.000Z</published>
    <updated>2018-08-23T07:49:57.998Z</updated>
    
    <content type="html"><![CDATA[<p>一个材质结合 THREE.Geometry 对象，可以构成 THREE.Mesh 对象。材质就相当于物体模型的皮肤，决定物体的外观光泽，看上去是不是像金属或者线框外表等。</p><h2 id="threeJS-提供的材质"><a href="#threeJS-提供的材质" class="headerlink" title="threeJS 提供的材质"></a>threeJS 提供的材质</h2><ul><li>MeshBasicMaterial：<strong>网格基础材质</strong>。基础材质，用于给几何体赋予一种简单的颜色，或者显示几何体的线框。</li><li>MeshDepthMaterial：<strong>网格深度材质</strong>。这个材质使用从摄像机到网格的距离来决定如何给网格上色。</li><li>MeshNormalMaterial：<strong>网格法向材质</strong>。这是一种简单的材质，根据法向向量计算物体表面的颜色。</li><li>MeshFaceMaterial：<strong>网格面材质</strong>。这是一个容器，可以为几何体的各个表面指定不同的材质。</li><li>MeshLambertMaterial：<strong>网格Lambert材质</strong>。这是一种考虑光照影响的材质，用于创建暗淡的、不光亮的物体。</li><li>MeshPhongMaterial：<strong>网格Phong式材质</strong>。这是一种考虑光照影响的材质，用于创建光亮的物体。</li><li>ShaderMaterial：<strong>着色器材质</strong>。这种材质允许使用自定义的着色器程序，直接控制顶点的放置方式以及像素的着色方式。</li><li>LineBasicMaterial：<strong>直线基础材质</strong>。这种材质可以用于 THREE.Line（直线）几何体，用来创建着色的直线。</li><li>LineDashMaterial：<strong>直线基础材质</strong>。 这种材质与 LineBasicMaterial（直线基础材质）一样，但允许创建出一种虚线的效果。</li></ul><h2 id="3种常用材质"><a href="#3种常用材质" class="headerlink" title="3种常用材质"></a>3种常用材质</h2><p>基础属性常用的了解下：</p><ul><li>ID：标识材质</li><li>name： 名称</li><li>opacity：透明度，结合transparent使用，范围为0~1</li><li>transparent：是否透明，如果为true则结合opacity设置透明度。如果为false则物体不透明</li><li>visible：是否可见，false则看不见，默认可以看见</li><li>side：侧面，觉得几何体的哪一面应用这个材质，默认为THREE.FrontSide(前外面)，还有THREE.BackSide(后内面)和THREE.DoubleSide(两面)</li><li>needUpdate：如果为true，则在几何体使用新的材质的时候更新材质缓存</li></ul><h3 id="①-THREE-MeshBasicMaterial-基础网格材质"><a href="#①-THREE-MeshBasicMaterial-基础网格材质" class="headerlink" title="① THREE.MeshBasicMaterial 基础网格材质"></a>① THREE.MeshBasicMaterial 基础网格材质</h3><p>使用这种材质的网格，通常被渲染成简单的多边形，而且可以选择想要线框。除了一些THREE.Material的属性以外，还有如下属性</p><ul><li>color：设置材质的颜色</li><li>wireframe：如果为true，则将材质渲染成线框，在调试的时候可以起到很好的作用</li><li>wireframeLinewidth：wireframe为true时，设置线框中线的宽度</li><li>wireframeLinecap：决定线框端点如何显示，可选的值 round，bevel(斜角)和miter(尖角)。</li><li>vertexColors：通过这属性，定义顶点的颜色，在canvasRender中不起作用。</li><li>fog：决定单个材质的是否受全局雾化的影响。 </li></ul><blockquote><p>对于fog属性，在全局中如果设定了雾化属性，那么本应该对所有场景的物体都添加雾化效果。<br>例如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scene.fog=new THREE.Fog(0xffffff,0.015,100)</span><br></pre></td></tr></table></figure></p></blockquote><p>而如果在当前材质中设置的如<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var cubeGeo= new THREE.CubeGeometry(30,30,30);</span><br><span class="line">var cubeMat= new THREE.MeshBasicMaterial(&#123;color:&quot;0x0c0c0c&quot;,fog:false&#125;)</span><br><span class="line">var cude= new THREE.Mesh(cubeGeo,cubeMat);</span><br><span class="line">scene.add(cube);</span><br></pre></td></tr></table></figure></p><p>则在当前这个cude方块中，并不能体现雾化效果。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">material.wireframe = true;</span><br></pre></td></tr></table></figure></p><p>wireframe是否为true  显示如下<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/WechatIMG42820.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/WechatIMG42821.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h3 id="②-THREE-MeshLambertMaterial暗淡不发光"><a href="#②-THREE-MeshLambertMaterial暗淡不发光" class="headerlink" title="② THREE.MeshLambertMaterial暗淡不发光"></a>② THREE.MeshLambertMaterial暗淡不发光</h3><p>该材质对光源有反应，除了之前说过的color，transparent，opacity，fog等属性，还有一些特有的属性，总结起来就只有2个</p><ul><li>ambient：设置材质的环境色，和AmbientLight光源一起使用，这个颜色会与环境光的颜色相乘。即是对光源作出反应。</li><li>emissive：设置材质发射的颜色，不是一种光源，而是一种不受光照影响的颜色。默认为黑色<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var cubeGeometry = new THREE.BoxGeometry(15, 15, 15);</span><br><span class="line">var meshMaterial = new THREE.MeshLamebertMaterial(&#123;color: 0x7777ff&#125;);</span><br><span class="line">var cube = new THREE.Mesh(cubeGeometry, meshMaterial);</span><br></pre></td></tr></table></figure></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/WechatIMG42823.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="③-THREE-MeshPhongMaterial金属发亮的物体"><a href="#③-THREE-MeshPhongMaterial金属发亮的物体" class="headerlink" title="③ THREE.MeshPhongMaterial金属发亮的物体"></a>③ THREE.MeshPhongMaterial金属发亮的物体</h3><p>该材质对光源有反应，除了之前说过的color，transparent，opacity，fog等属性，还有一些特有的属性，总结起来有4个</p><ul><li>ambient：设置材质的环境色，和AmbientLight光源一起使用，这个颜色会与环境光的颜色相乘。即是对光源作出反应。</li><li>emissive：设置材质发射的颜色，不是一种光源，而是一种不受光照影响的颜色。默认为黑色</li><li>specular：指定该材质的光亮程度及其高光部分的颜色，如果设置成和color属性相同的颜色，则会得到另一个更加类似金属的材质，如果设置成grey灰色，则看起来像塑料</li><li>shininess：指定高光部分的亮度，默认值为30.<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> var meshMaterial = new THREE.MeshPhongMaterial(&#123;</span><br><span class="line">        color: 0x7777ff，</span><br><span class="line">        specular:0x7777ff,</span><br><span class="line">        shininess:30</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/QQ20180727-183707.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个材质结合 THREE.Geometry 对象，可以构成 THREE.Mesh 对象。材质就相当于物体模型的皮肤，决定物体的外观光泽，看上去是不是像金属或者线框外表等。&lt;/p&gt;
&lt;h2 id=&quot;threeJS-提供的材质&quot;&gt;&lt;a href=&quot;#threeJS-提供的材质&quot;
      
    
    </summary>
    
      <category term="threejs" scheme="http://www.mjpiero.cc/categories/threejs/"/>
    
    
      <category term="threejs" scheme="http://www.mjpiero.cc/tags/threejs/"/>
    
  </entry>
  
  <entry>
    <title>mac 使用tree命令</title>
    <link href="http://www.mjpiero.cc/2018/08/23/mac-%E4%BD%BF%E7%94%A8tree%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.mjpiero.cc/2018/08/23/mac-使用tree命令/</id>
    <published>2018-08-23T03:59:10.000Z</published>
    <updated>2018-08-23T07:44:14.898Z</updated>
    
    <content type="html"><![CDATA[<p>开发的时候想要生成树状的目录结构，Linux下有个tree命令可以直接打印出树状的目录结构，可以了解一下，但是mac下默认是木有tree命令的。<br>网上搜了一下，mark一下：</p><p>使用find命令模拟出tree命令的效果，如显示当前目录的 tree 的命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos;</span><br></pre></td></tr></table></figure><p>还可以写一个别名来快速执行该命令，运行如下命令，将上面这个命令写到~/.bash_profile里，以后直接运行tree命令就更方便了:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alias tree=&quot;find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos;&quot;</span><br></pre></td></tr></table></figure><p>也可以使用 homebrew 安装 tree 命令行：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ brew install tree</span><br></pre></td></tr></table></figure></p><p>这样就在你的mac上安装了 tree 命令行了。</p><p>tree命令行参数（只实用与安装了tree命令行工具）：</p><ul><li>-a 显示所有文件和目录。</li><li>-A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。</li><li>-C 在文件和目录清单加上色彩，便于区分各种类型。</li><li>-d 显示目录名称而非内容。</li><li>-D 列出文件或目录的更改时间。</li><li>-f 在每个文件或目录之前，显示完整的相对路径名称。</li><li>-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上”*”,”/“,”=”,”@”,”|”号。</li><li>-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。</li><li>-i 不以阶梯状列出文件或目录名称。</li><li>-I 不显示符合范本样式的文件或目录名称。</li><li>-l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。</li><li>-n 不在文件和目录清单加上色彩。</li><li>-N 直接列出文件和目录名称，包括控制字符。</li><li>-p 列出权限标示。</li><li>-P 只显示符合范本样式的文件或目录名称。</li><li>-q 用”?”号取代控制字符，列出文件和目录名称。</li><li>-s 列出文件或目录大小。</li><li>-t 用文件和目录的更改时间排序。</li><li>-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。</li><li>-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开发的时候想要生成树状的目录结构，Linux下有个tree命令可以直接打印出树状的目录结构，可以了解一下，但是mac下默认是木有tree命令的。&lt;br&gt;网上搜了一下，mark一下：&lt;/p&gt;
&lt;p&gt;使用find命令模拟出tree命令的效果，如显示当前目录的 tree 的命令：
      
    
    </summary>
    
      <category term="环境搭建" scheme="http://www.mjpiero.cc/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="环境搭建" scheme="http://www.mjpiero.cc/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="linux" scheme="http://www.mjpiero.cc/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>web移动端软键盘状态</title>
    <link href="http://www.mjpiero.cc/2017/01/18/web%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%BD%AF%E9%94%AE%E7%9B%98%E7%8A%B6%E6%80%81/"/>
    <id>http://www.mjpiero.cc/2017/01/18/web移动端软键盘状态/</id>
    <published>2017-01-18T10:10:54.000Z</published>
    <updated>2018-08-29T02:24:05.563Z</updated>
    
    <content type="html"><![CDATA[<p>如今各种移动端设备盛行，虽然现在移动端开发已经非常通用和成熟，但是在开发过程中，还是经常遇到各种神奇的问题，在这里对于移动端web开发遇到的一些问题进行一一整理。<br>对于移动端设备上的软键盘，在某些时候，会成为页面的一部分，并且不同型号的设备的软键盘对于Html布局的实现也有些不同。<br>比如ios设备对于从下方推出键盘的时候，如果输入控件在页面推出之后，在键盘的高度的上方的话，则键盘是以一个浮层的方式弹出，并且将那个触发的控件推到键盘的上方。如果那个控件在页面底部，如果推出的键盘会覆盖该控件，系统会将整个页面向上推，直到将那个控件推到键盘上方为止。而android的实现的不同，有部分的android的实现和ios一样，有些android的机型的实现却不同，如果发现触发的input控件比键盘的高度底的时候，会自动将整个document的高度增加，增加到这个控件的高度超过键盘的高度为止。<br>随后，在判断软键盘是否打开关闭的状态时，因为这两种展现方法的不同，我大概搜罗出可能的解决办法（没有测试全部机型）：</p><h1 id="软键盘打开，整个页面向上滑动"><a href="#软键盘打开，整个页面向上滑动" class="headerlink" title="软键盘打开，整个页面向上滑动"></a>软键盘打开，整个页面向上滑动</h1><p>这种在ios系统里面比较常见，这类的基本上可以通过js的blur的方式来获取事件。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;.input-content input&quot;).on(&quot;blur&quot;,function()&#123;</span><br><span class="line">//键盘关闭事件 </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h1 id="软键盘覆盖元素"><a href="#软键盘覆盖元素" class="headerlink" title="软键盘覆盖元素"></a>软键盘覆盖元素</h1><p>这种情况在ios和android中都有出现，这类的设备，可以通过检测窗口变化来识别<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var wHeight = window.innerHeight;//获取初始可视窗口高度  </span><br><span class="line">window.addEventListener(&apos;resize&apos;, function()&#123;//监测窗口大小的变化事件  </span><br><span class="line">  var hh = window.innerHeight;//当前可视窗口高度  </span><br><span class="line">  var viewTop = $(window).scrollTop();//可视窗口高度顶部距离网页顶部的距离  </span><br><span class="line">  if(wHeight &gt; hh)&#123;</span><br><span class="line">  //可以作为虚拟键盘弹出事件  </span><br><span class="line">  &#125;else&#123;</span><br><span class="line">  //可以作为虚拟键盘关闭事件  </span><br><span class="line">  &#125;  </span><br><span class="line">  wHeight = hh;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h1 id="通用方法"><a href="#通用方法" class="headerlink" title="通用方法"></a>通用方法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var flag = false;</span><br><span class="line">var wHeight = window.innerHeight;</span><br><span class="line">window.addEventListener(&apos;resize&apos;, function()&#123;</span><br><span class="line">    var hh = window.innerHeight; </span><br><span class="line">    var viewTop = $(window).scrollTop();</span><br><span class="line">    if(wHeight &gt; hh)&#123;</span><br><span class="line">        flag = false;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        if(!flag)&#123;</span><br><span class="line">            alert($(&quot;.input-content input&quot;).val());</span><br><span class="line">            flag = true;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">    wHeight = hh;  </span><br><span class="line">&#125;);</span><br><span class="line">$(&quot;.input-content input&quot;).on(&quot;blur&quot;,function()&#123;</span><br><span class="line">    if(!flag)&#123;</span><br><span class="line">        alert($(&quot;.input-content input&quot;).val());</span><br><span class="line">        flag = true;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).on(&quot;focus&quot;, function()&#123;</span><br><span class="line">    flag = false;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如今各种移动端设备盛行，虽然现在移动端开发已经非常通用和成熟，但是在开发过程中，还是经常遇到各种神奇的问题，在这里对于移动端web开发遇到的一些问题进行一一整理。&lt;br&gt;对于移动端设备上的软键盘，在某些时候，会成为页面的一部分，并且不同型号的设备的软键盘对于Html布局的实
      
    
    </summary>
    
      <category term="javascript" scheme="http://www.mjpiero.cc/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://www.mjpiero.cc/tags/javascript/"/>
    
      <category term="web移动端" scheme="http://www.mjpiero.cc/tags/web%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>web移动端调试大法</title>
    <link href="http://www.mjpiero.cc/2016/12/29/web%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E5%A4%A7%E6%B3%95/"/>
    <id>http://www.mjpiero.cc/2016/12/29/web移动端调试大法/</id>
    <published>2016-12-29T07:02:38.000Z</published>
    <updated>2018-08-29T02:23:46.719Z</updated>
    
    <content type="html"><![CDATA[<p>在做移动端web开发的时候，头痛遇到移动端调试的问题，虽然现在很多PC浏览器的开发工具都自带移动端调试功能，但是显然和真机测试还是有一定差距，因为移动端不同的设备会出现不同的问题，在PC模拟器上显示正常的换到真机上测试就是会出问题。<br>在这里整理一些常见的移动端调试方法。</p><p><strong>先从一般的页面调试方法开始。</strong></p><h1 id="console方式"><a href="#console方式" class="headerlink" title="console方式"></a>console方式</h1><p>这个是最常见的一种调试方法，通过console在浏览器控制台打印出每步所需的回调数据。<br>详细可以参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Console" target="_blank" rel="noopener">Web API接口</a></p><h1 id="浏览器自带的移动端模拟器调试"><a href="#浏览器自带的移动端模拟器调试" class="headerlink" title="浏览器自带的移动端模拟器调试"></a>浏览器自带的移动端模拟器调试</h1><p>这个现在也比较常见了。最常用的是chrome的模拟器，当然现在流行的浏览器基本上都有开发者的模式，也都携有移动端的模拟器。比如火狐浏览器、360浏览器等。<br>基本上浏览器开启开发者模式的方法都统一了，在windows环境下按<code>F12</code>进入开发者攻击界面，mac环境则是下按<code>option+command+i</code>。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/QQ截图20161229151926.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h1 id="UC浏览器测试"><a href="#UC浏览器测试" class="headerlink" title="UC浏览器测试"></a>UC浏览器测试</h1><p>UC浏览器提供了开发版方便开发者们连接测试。详见：<a href="http://plus.uc.cn/document/webapp/doc5.html" target="_blank" rel="noopener">UC浏览器开发者版</a></p><h1 id="第三方平台在线模拟器调试"><a href="#第三方平台在线模拟器调试" class="headerlink" title="第三方平台在线模拟器调试"></a>第三方平台在线模拟器调试</h1><p>第三方开发的平台比较方便，功能也相当强大，对于一些需要完善测试的，其实使用第三方的平台还是比较方便的。<br>这里我就推荐几个比较有名的第三方平台：</p><ul><li><a href="https://www.browserstack.com/" target="_blank" rel="noopener">BrowserStack</a></li><li><a href="http://www.keynote.com/" target="_blank" rel="noopener">Keynote</a></li><li><a href="http://browsershots.org/" target="_blank" rel="noopener">BrowserShots</a></li><li><a href="http://www.browsera.com/" target="_blank" rel="noopener">Browsera</a></li><li><a href="http://www.vanamco.com/ghostlab/" target="_blank" rel="noopener">Ghostlab</a><br>等等…</li></ul><p><strong>下面介绍一些我比较喜欢的一些远程调试工具。</strong></p><h1 id="Weinre"><a href="#Weinre" class="headerlink" title="Weinre"></a>Weinre</h1><p>之前微信开发工具中的远程调试也是基于这个开发的。<br>安装方法很简单快捷。<br>安装 Weinre：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g weinre</span><br></pre></td></tr></table></figure></p><p>安装完成之后，输入指令启动：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">weinre --httpPort 8081 --boundHost -all-</span><br></pre></td></tr></table></figure></p><p>显示如下则启动成功。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/QQ截图20161229154152.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>此时我们访问地址：<code>http://localhost:8081/</code> 会显示下图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/QQ截图20161229154809.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>在页面中也有提供几种方案，在你的项目中添加对应的js。例如：<code>&lt;script src=&quot;http://192.168.55.23:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;</code><br>随后便可以通过PC访问<code>http://192.168.55.23:8081/client/#anonymous</code>就可以看到手机上访问的项目页面了。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/QQ截图20161229160034.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h1 id="代理应用"><a href="#代理应用" class="headerlink" title="代理应用"></a>代理应用</h1><p>这类代理应用实际上是用于抓包的，但是比起Weinre是基于开发者自身开发测试的。如果我们想要去获取其他网站的一些资源，例如http请求，或则一些js源码等。这时候使用代理工具比较合适。<br>mac下常使用的是<a href="https://www.charlesproxy.com/" target="_blank" rel="noopener">Charles</a>,windows环境下可以用<a href="http://www.telerik.com/fiddler" target="_blank" rel="noopener">Fiddler</a><br>默认开启的是8888端口。在手机上设置一个网络代理即可，这个不多详细介绍了。</p><h1 id="BrowserSync"><a href="#BrowserSync" class="headerlink" title="BrowserSync"></a><a href="https://browsersync.io/" target="_blank" rel="noopener">BrowserSync</a></h1><p>这是一个很强大的多终端测试工具，它可以跨设备同步操作行为，还可以监听你的文件，在文件修改时自动刷新所有设备中页面。<br><a href="https://browsersync.io/" target="_blank" rel="noopener">BrowserSync官方网站</a><br>也可以通过npm全局安装<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g browser-sync</span><br></pre></td></tr></table></figure></p><p>随后进入项目根目录下<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">browser-sync start --files &quot;*.*&quot;</span><br><span class="line">// 意思为监听当前目录下所有改动</span><br></pre></td></tr></table></figure></p><p>终端中若显示如下，则启动成功：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xoxxe.com1.z0.glb.clouddn.com/bs.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>终端中显示默认访问地址：<code>http://localhost:3001</code> 则可直接进入到控制台界面。<br>之后和weinre类似，也是添加一段js在自己的项目底下。<br>BrowserSync还可以和gulp以及webpack搭配使用，详细的可以看官方文档。</p><h1 id="真机测试"><a href="#真机测试" class="headerlink" title="真机测试"></a>真机测试</h1><p>真机测试是一概而论的说法。由于像ios系统本身就提供了一些对前端十分友好的开发者工具。<br>例如，Safari浏览器自带的开发者工具，或则xcode也有测试的方法，这里我局限性比较高，有这方面条件的是可以去搜罗一下相关的方法。<br>再者，PhoneGap也是有调试工具的，只不过需要安装它测试app。<br>这也是一种方法，不过个人还是偏爱Weinre或则BrowserSync的测试工具。</p><p>以上。是我整理的一些移动端测试的方法。欢迎补充~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在做移动端web开发的时候，头痛遇到移动端调试的问题，虽然现在很多PC浏览器的开发工具都自带移动端调试功能，但是显然和真机测试还是有一定差距，因为移动端不同的设备会出现不同的问题，在PC模拟器上显示正常的换到真机上测试就是会出问题。&lt;br&gt;在这里整理一些常见的移动端调试方法
      
    
    </summary>
    
      <category term="环境搭建" scheme="http://www.mjpiero.cc/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="环境搭建" scheme="http://www.mjpiero.cc/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="web移动端" scheme="http://www.mjpiero.cc/tags/web%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB如何开启认证权限功能</title>
    <link href="http://www.mjpiero.cc/2016/12/28/MongoDB%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E8%AE%A4%E8%AF%81%E6%9D%83%E9%99%90%E5%8A%9F%E8%83%BD/"/>
    <id>http://www.mjpiero.cc/2016/12/28/MongoDB如何开启认证权限功能/</id>
    <published>2016-12-28T06:04:52.000Z</published>
    <updated>2016-12-28T06:24:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>MongoDB预设不会开启认证权限功能（Authentication），所以任何人都可以随意连接到MongoDB的数据库。于是我们要去创建一个管理员的账号，并为其添加权限。</p><h1 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h1><p>在开启MongoDB服务的情况下。执行<code>mongod</code>或则<code>mongod --dbpath &lt;path to data directory&gt;</code> 进入MongoDB服务。<br>进入服务之后，执行：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.addUser(&quot;账户名称&quot;, &quot;密码&quot;)</span><br><span class="line">// 如果希望此账号只有读取的权限，则修改为</span><br><span class="line">// db.addUser(&quot;账户名称&quot;, &quot;密码&quot;, true)</span><br></pre></td></tr></table></figure></p><p>执行完成之后，先停止MongoDB服务，在执行下面指令重新开启MongoDB服务：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongod --auth</span><br></pre></td></tr></table></figure></p><h1 id="进入库"><a href="#进入库" class="headerlink" title="进入库"></a>进入库</h1><p>启动完成之后，在连接上MongoDB Shell，在其中执行以下命令才可进入到admin库中：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use admin </span><br><span class="line">db.auth(&quot;账户名称&quot;, &quot;密码&quot;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MongoDB预设不会开启认证权限功能（Authentication），所以任何人都可以随意连接到MongoDB的数据库。于是我们要去创建一个管理员的账号，并为其添加权限。&lt;/p&gt;
&lt;h1 id=&quot;创建新用户&quot;&gt;&lt;a href=&quot;#创建新用户&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="mongodb" scheme="http://www.mjpiero.cc/categories/mongodb/"/>
    
    
      <category term="mongodb" scheme="http://www.mjpiero.cc/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB添加到window服务，随系统自启动</title>
    <link href="http://www.mjpiero.cc/2016/12/28/MongoDB%E6%B7%BB%E5%8A%A0%E5%88%B0window%E6%9C%8D%E5%8A%A1%EF%BC%8C%E9%9A%8F%E6%9C%8D%E5%8A%A1%E8%87%AA%E5%90%AF%E5%8A%A8/"/>
    <id>http://www.mjpiero.cc/2016/12/28/MongoDB添加到window服务，随服务自启动/</id>
    <published>2016-12-28T03:38:01.000Z</published>
    <updated>2017-03-13T02:21:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在window上安转MongoDB，记录一下遇到的一些的问题。</p><h1 id="windows上安装MongoDB"><a href="#windows上安装MongoDB" class="headerlink" title="windows上安装MongoDB"></a>windows上安装MongoDB</h1><p>首先去官网下载Windows安装包：<a href="https://www.mongodb.org/downloads" target="_blank" rel="noopener">https://www.mongodb.org/downloads</a><br>安装路径这里假设是安装在 <code>D:/soft/mongodb/</code>。<br>安装好之后，我们可以随便在一个目录下，比如在 <code>D:/</code> 根目录下创建一个目录 <code>D:\mongodb\</code>，进入该目录，新建data和logs两个目录。<br>然后打开控制台命令窗口（CMD），输入<code>D:\soft\mongodb\bin</code> 进入到安装目录下。<br>再执行：<code>mongod --dbpath d:/mongodb/data</code>，开启MongoDB服务，并将运行目录指向之前创建好的 <code>D:\mongodb\data</code> 下。<br>打开浏览器，进入：<code>http://127.0.0.1:27017</code>（window服务默认端口27017），这时你会看到以下提示语：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">You are trying to access MongoDB on the native driver port. For http diagnostic access, add 1000 to the port number</span><br></pre></td></tr></table></figure></p><p>这说明MongoDB服务已经启动了。</p><h1 id="添加MongoDB服务到windows本地服务中"><a href="#添加MongoDB服务到windows本地服务中" class="headerlink" title="添加MongoDB服务到windows本地服务中"></a>添加MongoDB服务到windows本地服务中</h1><p>上面的方法要保证MongoDB服务运行，必须每次都要重复输入命令才能开启。为了方便在windows上开启MongoDB服务，我们需要将MongoDB服务到windows本地服务中，并且设置随系统启动开启。<br>继续回到CMD中，在安装目录中（D:\soft\mongodb\bin）执行：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongod.exe --logpath d:/soft/mongodb/logs/mongodb.log --logappend --dbpath d:/soft/mongodb/data --directoryperdb --serviceName MongoDB -install --auth</span><br></pre></td></tr></table></figure></p><blockquote><p>此处注意 “–auth” 是将服务开启权限认证，这样别人需要账户和密码才能去访问你的数据库。<br>如果要开启认证，需要在前期运行时要在MongoDB服务中设置好账户密码。<br>详细方法可参考：<a href="http://www.mjpiero.cc/2016/12/28/MongoDB%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E8%AE%A4%E8%AF%81%E6%9D%83%E9%99%90%E5%8A%9F%E8%83%BD/">MongoDB如何开启认证权限功能</a><br>如果不需要，或则选择后期再设置，可以不使用。</p></blockquote><p>上面执行完毕之后，会在windows服务下创建一个名为MongoDB的服务。<br>执行 <code>net start MongoDB</code> 便开启MongoDB服务了。<br>可以在windows的服务窗口中看见MongoDB的服务状态。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/QQ截图20161228122836.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h1 id="删除MongoDB服务"><a href="#删除MongoDB服务" class="headerlink" title="删除MongoDB服务"></a>删除MongoDB服务</h1><p>如果要删除MongoDB服务，首先先停止当前的MongoDB服务，这个可以去服务窗口停止。<br>然后在CMD中执行：<code>sc delete MongoDB</code><br>这样之前安装的服务就会被删除。</p><h1 id="安装时遇到的一些问题"><a href="#安装时遇到的一些问题" class="headerlink" title="安装时遇到的一些问题"></a>安装时遇到的一些问题</h1><p>在安装时可能遇到的一些问题：</p><h2 id="Windows不能在本地计算机启动MongoDB，错误代码-100"><a href="#Windows不能在本地计算机启动MongoDB，错误代码-100" class="headerlink" title="Windows不能在本地计算机启动MongoDB，错误代码 100"></a>Windows不能在本地计算机启动MongoDB，错误代码 100</h2><p><strong>解决办法：</strong> MongoDB安装目录\data\将此文件夹下的mongod.lock、storage.bson删除</p><h2 id="连接数据库时发生错误-failed-to-execute-listdatabases-command"><a href="#连接数据库时发生错误-failed-to-execute-listdatabases-command" class="headerlink" title="连接数据库时发生错误 failed to execute listdatabases command"></a>连接数据库时发生错误 failed to execute listdatabases command</h2><p><strong>解决办法：</strong> 在安装服务的时候开启权限认证，确定一下账户密码是否有误。<br>如果是在添加服务的时候使用了”–auth”命令，则需要进入MongoDB服务中重新添加新的账户和密码。<br>详细方法可参考：<a href="http://www.mjpiero.cc/2016/12/28/MongoDB%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E8%AE%A4%E8%AF%81%E6%9D%83%E9%99%90%E5%8A%9F%E8%83%BD/">MongoDB如何开启认证权限功能</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在window上安转MongoDB，记录一下遇到的一些的问题。&lt;/p&gt;
&lt;h1 id=&quot;windows上安装MongoDB&quot;&gt;&lt;a href=&quot;#windows上安装MongoDB&quot; class=&quot;headerlink&quot; title=&quot;windows上安装MongoDB
      
    
    </summary>
    
      <category term="mongodb" scheme="http://www.mjpiero.cc/categories/mongodb/"/>
    
    
      <category term="mongodb" scheme="http://www.mjpiero.cc/tags/mongodb/"/>
    
      <category term="环境搭建" scheme="http://www.mjpiero.cc/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>UMD兼容多种模块规范</title>
    <link href="http://www.mjpiero.cc/2016/12/08/UMD%E5%85%BC%E5%AE%B9%E5%A4%9A%E7%A7%8D%E6%A8%A1%E5%9D%97%E8%A7%84%E8%8C%83/"/>
    <id>http://www.mjpiero.cc/2016/12/08/UMD兼容多种模块规范/</id>
    <published>2016-12-08T04:13:38.000Z</published>
    <updated>2018-08-29T06:40:44.538Z</updated>
    
    <content type="html"><![CDATA[<p>我们通常需要将类库代码包装在一个闭包内，为了能兼容Node、AMD、CMD以及一些常见的浏览器环境中，我们可以使用如下的方法去包装。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;(function (name, definition) &#123;</span><br><span class="line"></span><br><span class="line">// 检测上下文环境是否为AMD或CMD</span><br><span class="line">if (typeof define === &quot;function&quot; &amp;&amp; ( define.amd || define.cmd ) ) &#123;</span><br><span class="line"></span><br><span class="line">define(definition);</span><br><span class="line"></span><br><span class="line">// 检测上下文环境是否为Node</span><br><span class="line">&#125; else if ( typeof module !== &apos;undefined&apos; &amp;&amp; module.exports ) &#123;</span><br><span class="line"></span><br><span class="line">module.exports = definition();</span><br><span class="line"></span><br><span class="line">&#125; else &#123;</span><br><span class="line">// 将模块的执行结果在window变量中，在浏览器中this指向window对象</span><br><span class="line">this[name] = definition();</span><br><span class="line">&#125;</span><br><span class="line">&#125;)(&apos;hello&apos;, function () &#123;</span><br><span class="line">var hello = function () &#123;&#125;;</span><br><span class="line">return hello;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们通常需要将类库代码包装在一个闭包内，为了能兼容Node、AMD、CMD以及一些常见的浏览器环境中，我们可以使用如下的方法去包装。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;s
      
    
    </summary>
    
      <category term="javascript" scheme="http://www.mjpiero.cc/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://www.mjpiero.cc/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>包与NPM</title>
    <link href="http://www.mjpiero.cc/2016/12/08/%E5%8C%85%E4%B8%8ENPM/"/>
    <id>http://www.mjpiero.cc/2016/12/08/包与NPM/</id>
    <published>2016-12-08T02:39:20.000Z</published>
    <updated>2018-09-05T07:45:19.207Z</updated>
    
    <content type="html"><![CDATA[<p>在说到NPM之前，应该先提及CommonJS的包规范。</p><p>CommonJS包规范定义很简单，它是由包结构和包描述文件两个部分组成。</p><h1 id="包结构"><a href="#包结构" class="headerlink" title="包结构"></a>包结构</h1><p>包结构是用于组织包中的各种文件。完全符合CommonJS规范的包目录应该包含如下文件。</p><ul><li>package.json ———— 包描述文件。</li><li>bin ———— 用于存放可执行二进制文件的目录。</li><li>lib ———— 用于存放js代码的目录。</li><li>doc ———— 用于存放文档的目录。</li><li>test ———— 用于存放单元测试用例的代码。</li></ul><h1 id="包描述文件"><a href="#包描述文件" class="headerlink" title="包描述文件"></a>包描述文件</h1><p>包描述文件用于表达非代码相关的信息，它是一个JSON格式的文件（package.json），位于根目录下。</p><p>这里我们就只介绍 NPM 的 package.json 文件定义了哪些必需的字段：</p><ul><li>name ———— 项目名称。</li><li>version ———— 版本。在 <a href="http://semver.org/" target="_blank" rel="noopener">http://semver.org/</a> 上有详细的定义，通常为 major.minor.revision 格式。</li><li>author ———— 作者。</li><li>description ———— 项目简介。</li><li>keywords ———— 关键词数组。用于NPM中做分类搜索的。</li><li>repository ———— 托管源代码的位置列表。示例：<code>{ &quot;type&quot;: &quot;git&quot;, &quot;url&quot;: &quot;https://package/path&quot; }</code></li><li>license ———— 当前包所使用的许可证列表。示例：<code>[{ &quot;type&quot;: &quot;GPLv2&quot;, &quot;url&quot;: &quot;http://www.example.com/licenses/gpl.html&quot;, }]</code></li><li>engines ———— 指明该项目所需要的nodejs版本。</li><li>bugs ———— 返回bug的网页地址或则邮箱地址。</li><li>contributors ———— 贡献者列表。</li><li>scripts ———— 指定了运行脚本命令的npm命令行缩写。可以自行写好运行脚本。</li><li>dependencies ———— 指定了项目运行所依赖的模块。<code>npm install XX --save</code></li><li>devDependencies ———— 指定项目开发所需要的模块。<code>npm install XX --save-dev</code><blockquote><ul><li><strong>波浪号（tilde）+指定版本：</strong>比如~1.2.2，表示安装1.2.x的最新版本（不低于1.2.2），但是不安装1.3.x，也就是说安装时不改变大版本号和次要版本号。</li><li><strong>插入号（caret）+指定版本：</strong>比如ˆ1.2.2，表示安装1.x.x的最新版本（不低于1.2.2），但是不安装2.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。</li><li><strong>latest：</strong>安装最新版本。</li></ul></blockquote></li><li>peerDependencies ———— 用来供插件指定其所需要的主工具的版本（从npm 3.0版开始，peerDependencies不再会默认安装了）。</li><li>bin ———— 用来指定各个内部命令对应的可执行文件的位置。</li><li>main ———— 指定加载的入口文件。</li><li>config ———— 用于向环境变量输出值。示例：<code>{ &quot;port&quot; : &quot;8080&quot; }</code>，则在<code>server.js</code>脚本就可以直接引用config里的值 <code>http.createServer(...).listen(process.env.npm_package_config_port)</code></li></ul><p>下面是express项目的package.json文件，可以参考下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;express&quot;,</span><br><span class="line">&quot;description&quot;: &quot;Sinatra inspired web development framework&quot;,</span><br><span class="line">&quot;version&quot;: &quot;3.3.4&quot;,</span><br><span class="line">&quot;author&quot;: &quot;TJ Holowaychuk &lt;tj@vision-media.ca&gt;&quot;,</span><br><span class="line">&quot;contributors&quot;: [</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;TJ Holowaychuk&quot;,</span><br><span class="line">&quot;email&quot;: &quot;tj@vision-media.ca&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;Aaron Heckmann&quot;,</span><br><span class="line">&quot;email&quot;: &quot;aaron.heckmann+github@gmail.com&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;Ciaran Jessup&quot;,</span><br><span class="line">&quot;email&quot;: &quot;ciaranj@gmail.com&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;Guillermo Rauch&quot;,</span><br><span class="line">&quot;email&quot;: &quot;rauchg@gmail.com&quot;</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">&quot;connect&quot;: &quot;2.8.4&quot;,</span><br><span class="line">&quot;commander&quot;: &quot;1.2.0&quot;,</span><br><span class="line">&quot;range-parser&quot;: &quot;0.0.4&quot;,</span><br><span class="line">&quot;mkdirp&quot;: &quot;0.3.5&quot;,</span><br><span class="line">&quot;cookie&quot;: &quot;0.1.0&quot;,</span><br><span class="line">&quot;buffer-crc32&quot;: &quot;0.2.1&quot;,</span><br><span class="line">&quot;fresh&quot;: &quot;0.1.0&quot;,</span><br><span class="line">&quot;methods&quot;: &quot;0.0.1&quot;,</span><br><span class="line">&quot;send&quot;: &quot;0.1.3&quot;,</span><br><span class="line">&quot;cookie-signature&quot;: &quot;1.0.1&quot;,</span><br><span class="line">&quot;debug&quot;: &quot;*&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">&quot;ejs&quot;: &quot;*&quot;,</span><br><span class="line">&quot;mocha&quot;: &quot;*&quot;,</span><br><span class="line">&quot;jade&quot;: &quot;0.30.0&quot;,</span><br><span class="line">&quot;hjs&quot;: &quot;*&quot;,</span><br><span class="line">&quot;stylus&quot;: &quot;*&quot;,</span><br><span class="line">&quot;should&quot;: &quot;*&quot;,</span><br><span class="line">&quot;connect-redis&quot;: &quot;*&quot;,</span><br><span class="line">&quot;marked&quot;: &quot;*&quot;,</span><br><span class="line">&quot;supertest&quot;: &quot;0.6.0&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;keywords&quot;: [</span><br><span class="line">&quot;express&quot;,</span><br><span class="line">&quot;framework&quot;,</span><br><span class="line">&quot;sinatra&quot;,</span><br><span class="line">&quot;web&quot;,</span><br><span class="line">&quot;rest&quot;,</span><br><span class="line">&quot;restful&quot;,</span><br><span class="line">&quot;router&quot;,</span><br><span class="line">&quot;app&quot;,</span><br><span class="line">&quot;api&quot;</span><br><span class="line">],</span><br><span class="line">&quot;repository&quot;: &quot;git://github.com/visionmedia/express&quot;,</span><br><span class="line">&quot;main&quot;: &quot;index&quot;,</span><br><span class="line">&quot;bin&quot;: &#123;</span><br><span class="line">&quot;express&quot;: &quot;./bin/express&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">&quot;prepublish&quot;: &quot;npm prune&quot;,</span><br><span class="line">&quot;test&quot;: &quot;make test&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;engines&quot;: &#123;</span><br><span class="line">&quot;node&quot;: &quot;*&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>参考文献：</strong></p><ul><li>《深入浅出Node.js》朴灵</li><li><a href="http://javascript.ruanyifeng.com/nodejs/packagejson.html" target="_blank" rel="noopener">http://javascript.ruanyifeng.com/nodejs/packagejson.html</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在说到NPM之前，应该先提及CommonJS的包规范。&lt;/p&gt;
&lt;p&gt;CommonJS包规范定义很简单，它是由包结构和包描述文件两个部分组成。&lt;/p&gt;
&lt;h1 id=&quot;包结构&quot;&gt;&lt;a href=&quot;#包结构&quot; class=&quot;headerlink&quot; title=&quot;包结构&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="nodejs" scheme="http://www.mjpiero.cc/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://www.mjpiero.cc/tags/nodejs/"/>
    
      <category term="npm" scheme="http://www.mjpiero.cc/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Materialize UI 风格 WIKI 模板页</title>
    <link href="http://www.mjpiero.cc/2016/10/21/Materialize-UI-%E9%A3%8E%E6%A0%BC-WIKI-%E6%A8%A1%E6%9D%BF%E9%A1%B5/"/>
    <id>http://www.mjpiero.cc/2016/10/21/Materialize-UI-风格-WIKI-模板页/</id>
    <published>2016-10-21T10:16:56.000Z</published>
    <updated>2016-10-26T10:13:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="http://materializecss.com/" target="_blank" rel="noopener">Materialize</a> 是基于Material Design的UI框架。</p><p>使用Materialize框架制作了一个WIKI文档的模板页面。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/QQ截图20160708183414.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h1><ul><li>动态生成左侧栏导航</li><li>生成面包屑（这个一直没找到很好的控制方法，肯定是我蠢！）</li><li>【伪】templates加载（其实是想仿照做一个路由加载指定模块的功能）</li></ul><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>github:  <a href="https://github.com/MJPiero/wiki-materialize" target="_blank" rel="noopener">https://github.com/MJPiero/wiki-materialize</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://materializecss.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ma
      
    
    </summary>
    
      <category term="mywork" scheme="http://www.mjpiero.cc/categories/mywork/"/>
    
    
      <category term="mywork" scheme="http://www.mjpiero.cc/tags/mywork/"/>
    
  </entry>
  
  <entry>
    <title>【接粽子】小游戏 Made With CreateJs</title>
    <link href="http://www.mjpiero.cc/2016/10/21/%E3%80%90%E6%8E%A5%E7%B2%BD%E5%AD%90%E3%80%91%E5%B0%8F%E6%B8%B8%E6%88%8F-Made-With-CreateJs/"/>
    <id>http://www.mjpiero.cc/2016/10/21/【接粽子】小游戏-Made-With-CreateJs/</id>
    <published>2016-10-21T08:55:05.000Z</published>
    <updated>2016-10-26T10:13:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>制作的一款类似于接金币一类的小游戏。公司为了在端午节做宣传用的。</p><p>一款好的游戏离不开好的设计，在此先给亲爱的设计妹纸点个赞~ (❁’▽’❁)</p><p>游戏效果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/808279392447213144-576x1024.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>第一次尝试用createJs框架去搭建H5游戏，确实比起以前自己用canvas写的要方面很多，也流畅了不少。</p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p>在微信上发布的游戏，请用微信扫码查看：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pan.baidu.com/share/qrcode?w=150&amp;h=150&amp;url=http://v.mob.com/wechat/catchzongzi/index.php" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>github：<a href="https://github.com/MJPiero/catchzongzi" target="_blank" rel="noopener">https://github.com/MJPiero/catchzongzi</a></p><p>另外也在github上分享了源码。说实话本人对于我写的不算满意，因为…… 用了太多愚蠢的方法，不过当时时间有点赶，就没有花太多时间去优化。也希望大家能提出更好的优化方法来。大家一起学习一起奋进嘞嘿！！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;制作的一款类似于接金币一类的小游戏。公司为了在端午节做宣传用的。&lt;/p&gt;
&lt;p&gt;一款好的游戏离不开好的设计，在此先给亲爱的设计妹纸点个赞~ 
      
    
    </summary>
    
      <category term="mywork" scheme="http://www.mjpiero.cc/categories/mywork/"/>
    
    
      <category term="mywork" scheme="http://www.mjpiero.cc/tags/mywork/"/>
    
      <category term="canvas" scheme="http://www.mjpiero.cc/tags/canvas/"/>
    
      <category term="h5game" scheme="http://www.mjpiero.cc/tags/h5game/"/>
    
  </entry>
  
  <entry>
    <title>解决gem install SSL 证书错误</title>
    <link href="http://www.mjpiero.cc/2016/10/21/%E8%A7%A3%E5%86%B3gem-install-SSL-%E8%AF%81%E4%B9%A6%E9%94%99%E8%AF%AF/"/>
    <id>http://www.mjpiero.cc/2016/10/21/解决gem-install-SSL-证书错误/</id>
    <published>2016-10-21T08:40:10.000Z</published>
    <updated>2018-08-24T09:59:30.616Z</updated>
    
    <content type="html"><![CDATA[<p>这个问题我是在替换gem镜像路径的时候遇到的。</p><p>详情见：<a href="http://blog2.pierrothall.com/2016/10/21/%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%86%85Ruby-Gem-Install-%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">解决国内Ruby Gem Install 失败问题</a></p><p>这个其实也折腾了我一个多小时在网上找解决办法。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>相信有部分的人在按照上面方法安装的时候出现了和我一样的问题：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/QQ截图20160413163537.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在网上搜索一圈之后，解释是：</p><blockquote><p>ruby 没有包含 SSL 证书，所以 https 的链接被服务器拒绝。</p></blockquote><p>本来这个情况下，只要改用http路径就好了，偏偏淘宝已经停止基于HTTP协议的镜像服务了。</p><p>于是我继续在网上搜了一圈，找到了如下的解决办法（来源：<a href="https://gist.github.com/fnichol/867550" target="_blank" rel="noopener">https://gist.github.com/fnichol/867550</a> ）:</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>先下载证书 <a href="http://curl.haxx.se/ca/cacert.pem" target="_blank" rel="noopener">http://curl.haxx.se/ca/cacert.pem</a> ，然后再环境变量里设置 SSL_CERT_FILE 这个环境变量，并指向 cacert.pem 文件。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/QQ截图20160413165101.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>之后再在<code>cmd.exe</code>中输入命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set SSL_CERT_FILE=C:\path\to\cacert.pem</span><br></pre></td></tr></table></figure><p>之后再按照上面的方法来操作一遍~~~</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/QQ截图20160413165633.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>Perfect！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个问题我是在替换gem镜像路径的时候遇到的。&lt;/p&gt;
&lt;p&gt;详情见：&lt;a href=&quot;http://blog2.pierrothall.com/2016/10/21/%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%86%85Ruby-Gem-Install-
      
    
    </summary>
    
      <category term="环境搭建" scheme="http://www.mjpiero.cc/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="环境搭建" scheme="http://www.mjpiero.cc/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="ruby" scheme="http://www.mjpiero.cc/tags/ruby/"/>
    
  </entry>
  
  <entry>
    <title>解决国内Ruby Gem Install 失败问题</title>
    <link href="http://www.mjpiero.cc/2016/10/21/%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%86%85Ruby-Gem-Install-%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/"/>
    <id>http://www.mjpiero.cc/2016/10/21/解决国内Ruby-Gem-Install-失败问题/</id>
    <published>2016-10-21T06:55:48.000Z</published>
    <updated>2018-08-24T09:59:36.474Z</updated>
    
    <content type="html"><![CDATA[<p>做一个国内的程序员真的是很辛苦很辛苦，各种被墙，科技还怎么进步捏。好在上有政策下有对策，国内大神还是很良心的给我们提供了很多不少解决方案。</p><p>淘宝团队提供了国内可以快速访问的镜像地址，官方地址：<a href="https://ruby.taobao.org/" target="_blank" rel="noopener">https://ruby.taobao.org/</a></p><p>官方有详细的替换的方法，这里我也按照我的流程过一遍。</p><h1 id="安装Ruby"><a href="#安装Ruby" class="headerlink" title="安装Ruby"></a>安装Ruby</h1><p>首先，我的系统是win7。</p><p>在window上安装Ruby，可以通过下载RubyInstaller工具（ <a href="http://rubyinstaller.org/" target="_blank" rel="noopener">http://rubyinstaller.org/</a> ）快速安装：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/QQ截图20160413155659.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="替换成taobao镜像"><a href="#替换成taobao镜像" class="headerlink" title="替换成taobao镜像"></a>替换成taobao镜像</h1><p>之后 <code>win+R</code> 键打开运行窗口，输入cmd 快速打开命令行程序。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/</span><br><span class="line">$ gem sources -l</span><br><span class="line">*** CURRENT SOURCES ***</span><br><span class="line"></span><br><span class="line">https://ruby.taobao.org</span><br><span class="line"># 请确保只有 ruby.taobao.org</span><br><span class="line">$ gem install rails</span><br></pre></td></tr></table></figure></p><p>以上是淘宝官方的方法。很简单，然而现实总是没这么顺利…</p><p>和我一样安装遇到SSL证书错误的请看这里：<a href="http://blog2.pierrothall.com/2016/10/21/%E8%A7%A3%E5%86%B3gem-install-SSL-%E8%AF%81%E4%B9%A6%E9%94%99%E8%AF%AF/" target="_blank" rel="noopener">解决gem install SSL 证书错误</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;做一个国内的程序员真的是很辛苦很辛苦，各种被墙，科技还怎么进步捏。好在上有政策下有对策，国内大神还是很良心的给我们提供了很多不少解决方案。&lt;/p&gt;
&lt;p&gt;淘宝团队提供了国内可以快速访问的镜像地址，官方地址：&lt;a href=&quot;https://ruby.taobao.org/&quot;
      
    
    </summary>
    
      <category term="环境搭建" scheme="http://www.mjpiero.cc/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="环境搭建" scheme="http://www.mjpiero.cc/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="ruby" scheme="http://www.mjpiero.cc/tags/ruby/"/>
    
  </entry>
  
  <entry>
    <title>开启新世界的大门！(灬ºωº灬)</title>
    <link href="http://www.mjpiero.cc/2016/10/21/%E5%BC%80%E5%90%AF%E6%96%B0%E4%B8%96%E7%95%8C%E7%9A%84%E5%A4%A7%E9%97%A8%EF%BC%81-%E7%81%AC%C2%BA%CF%89%C2%BA%E7%81%AC/"/>
    <id>http://www.mjpiero.cc/2016/10/21/开启新世界的大门！-灬ºωº灬/</id>
    <published>2016-10-21T06:38:33.000Z</published>
    <updated>2016-10-21T06:42:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先，欢迎你手残点进了此地！！！ξ( ✿＞◡❛)</p><p>博主前端开发人员一枚，于今涉足行业将近2年，在之前干过漫画编辑做过网页设计，可谓上得了厅堂下得了厨房。然而水平有限，寻求志同道合人士共同学习进步。 (´∩ω∩｀)</p><p>此博客内容仅仅是自己学习上的一些心得总结，并不一定是正确可取的，还希望发现BUG的小伙伴们积极指出错误！</p><p>知错能改，善莫大焉。(⁰▿⁰) 还望大家文明交流，博主其实是玻璃心。(´▽`ʃ♡ƪ)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先，欢迎你手残点进了此地！！！ξ( ✿＞◡❛)&lt;/p&gt;
&lt;p&gt;博主前端开发人员一枚，于今涉足行业将近2年，在之前干过漫画编辑做过网页设计，可谓上得了厅堂下得了厨房。然而水平有限，寻求志同道合人士共同学习进步。 (´∩ω∩｀)&lt;/p&gt;
&lt;p&gt;此博客内容仅仅是自己学习上的一些
      
    
    </summary>
    
    
  </entry>
  
</feed>
