{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/QQ截图20160413163537.png","path":"images/QQ截图20160413163537.png","modified":0,"renderable":0},{"_id":"source/images/QQ截图20160413165633.png","path":"images/QQ截图20160413165633.png","modified":0,"renderable":0},{"_id":"source/images/QQ截图20160413165101.png","path":"images/QQ截图20160413165101.png","modified":0,"renderable":0},{"_id":"source/images/QQ截图20160708183414.png","path":"images/QQ截图20160708183414.png","modified":0,"renderable":0},{"_id":"source/images/QQ截图20161021165145.png","path":"images/QQ截图20161021165145.png","modified":0,"renderable":0},{"_id":"source/images/QQ截图20161229154152.png","path":"images/QQ截图20161229154152.png","modified":0,"renderable":0},{"_id":"source/images/QQ截图20161229154809.png","path":"images/QQ截图20161229154809.png","modified":0,"renderable":0},{"_id":"source/images/QQ截图20161229160034.png","path":"images/QQ截图20161229160034.png","modified":0,"renderable":0},{"_id":"source/images/WechatIMG42820.png","path":"images/WechatIMG42820.png","modified":0,"renderable":0},{"_id":"source/images/WechatIMG42823.png","path":"images/WechatIMG42823.png","modified":0,"renderable":0},{"_id":"source/images/WechatIMG42821.png","path":"images/WechatIMG42821.png","modified":0,"renderable":0},{"_id":"source/images/QQ截图20161027161847.png","path":"images/QQ截图20161027161847.png","modified":0,"renderable":0},{"_id":"source/images/QQ截图20161228122836.png","path":"images/QQ截图20161228122836.png","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/images/QQ截图20160413155659.png","path":"images/QQ截图20160413155659.png","modified":0,"renderable":0},{"_id":"source/images/QQ截图20161027164200.jpg","path":"images/QQ截图20161027164200.jpg","modified":0,"renderable":0},{"_id":"themes/indigo_my/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/js/main.min.js","path":"js/main.min.js","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/js/search.min.js","path":"js/search.min.js","modified":0,"renderable":1},{"_id":"source/images/QQ截图20161229151926.png","path":"images/QQ截图20161229151926.png","modified":0,"renderable":0},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/indigo_my/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/808279392447213144-576x1024.jpg","path":"images/808279392447213144-576x1024.jpg","modified":0,"renderable":0},{"_id":"source/images/QQ20180727-183707.gif","path":"images/QQ20180727-183707.gif","modified":0,"renderable":0},{"_id":"source/images/37341-849962bd459dd09f.webp","path":"images/37341-849962bd459dd09f.webp","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"eff6595901da43d0f6e592fba9df19b0312df550","modified":1535006736628},{"_id":"themes/indigo_my/.DS_Store","hash":"f17ecd8e4fd8a3830b73e5f6c44e679564d5adda","modified":1535105341607},{"_id":"themes/indigo_my/.editorconfig","hash":"9b0445427777519defe360ea38c61729d847b3d3","modified":1535007868338},{"_id":"themes/indigo_my/LICENSE","hash":"24944bf7920108f5a4790e6071c32e9102760c37","modified":1535007868338},{"_id":"themes/indigo_my/README.md","hash":"4bf26d9b43bf24b8e0a1a0d058437a347972f5e6","modified":1535007868338},{"_id":"themes/indigo_my/_config.yml","hash":"2f0e7ee5d7d3d1e6883331360e20421e40e12968","modified":1535543260780},{"_id":"themes/indigo_my/package.json","hash":"c795e3100ae3655bfa8b39adcca7333a7925b47f","modified":1535007868350},{"_id":"source/_drafts/浅谈对VUE的理解.md","hash":"f6bc8414b8b7e3193f00c1084bed9ed6e885eb1c","modified":1535539470075},{"_id":"source/_drafts/初了解vue-vuex-这很接地气.md","hash":"75a991eeb08ceabcde3dd4cbd43f556f92c67676","modified":1535013944897},{"_id":"source/_posts/CSS相对单位.md","hash":"cc775ed34bea2144a05f4beed5ec86acf9750f6a","modified":1535094870842},{"_id":"source/_posts/Materialize-UI-风格-WIKI-模板页.md","hash":"b5072daa6b1e34589623d64bd98bce7771a426b9","modified":1477476812000},{"_id":"source/_posts/MongoDB如何开启认证权限功能.md","hash":"c6fc468f28b37197b620ab1d2d3147a27002095a","modified":1482906260000},{"_id":"source/_posts/MongoDB添加到window服务，随服务自启动.md","hash":"055b68c1bfc712f8f130901d06f1778bdc70b1a9","modified":1489371686000},{"_id":"source/_posts/js模块化规范总结.md","hash":"c21e05b974d22e4c2f8c57ee4122614c463854e1","modified":1535544886683},{"_id":"source/_posts/mac-使用tree命令.md","hash":"992498f617e39f3962d8c69f5fffa6c7eaa85d40","modified":1535010254898},{"_id":"source/_posts/mainifest-json.md","hash":"2ad2325b61bca09d20048d0a8a7f5cbe4c4ea7e6","modified":1535104732830},{"_id":"source/_posts/threeJS-学习笔记-材质.md","hash":"fd6a52edcd503408904ee17f9f1dc14b3cf9c2c9","modified":1535010597998},{"_id":"source/_posts/web移动端软键盘状态.md","hash":"119c3523a86b88e18bd8c92532968e260cb86f00","modified":1535509445563},{"_id":"source/_posts/【接粽子】小游戏-Made-With-CreateJs.md","hash":"a38350a6edead98f0efa9bd3b558d89d10eaaad7","modified":1477476836000},{"_id":"source/_posts/你还在用第三方组件做Base64的编码和解码么？.md","hash":"9237aff95408767a85e9f0ff0c1fdc1beab919ed","modified":1535104748737},{"_id":"source/_posts/兼容多种模块规范.md","hash":"6b4db0fd4ef85176be3be955856dccf33ae03be9","modified":1535104754765},{"_id":"source/_posts/包与NPM.md","hash":"5f82c2789736ca26cad22ebc02b40ab6933576f2","modified":1535104763868},{"_id":"source/_posts/开启新世界的大门！-灬ºωº灬.md","hash":"803f8e57376a362bc2349f3910ca59481730ce53","modified":1477032176000},{"_id":"source/_posts/解决gem-install-SSL-证书错误.md","hash":"cb987da6812de746d025ec2f29260bd0de33d4f4","modified":1535104770616},{"_id":"source/_posts/解决国内Ruby-Gem-Install-失败问题.md","hash":"c44f5a78797818eb0dfa6f78bf87d063c26e18df","modified":1535104776474},{"_id":"source/about/index.md","hash":"88eea320c67a181f6ec28fa01e54b54f0dad2568","modified":1535426654138},{"_id":"source/categories/index.md","hash":"73883c5ec527229483f10ae8edf84761c66db414","modified":1477555804000},{"_id":"source/_posts/web移动端调试大法.md","hash":"5fc3a533c288e2bdf40911e3a924fccb208dd4d5","modified":1535509426719},{"_id":"source/images/QQ截图20160413163537.png","hash":"3e8658757fb9c787486cad9ce09dd9154b833882","modified":1477039294000},{"_id":"source/images/QQ截图20160413165633.png","hash":"8b77ececb43abf120469e15a3d899527e15d05dd","modified":1477039606000},{"_id":"source/images/QQ截图20160413165101.png","hash":"fe19d2e29ae859668e49730de905c95b90e0ebcc","modified":1477039538000},{"_id":"source/images/QQ截图20160708183414.png","hash":"dee6d07b0d2b58b17629bdf01ef32981b8d78937","modified":1477045100000},{"_id":"source/images/QQ截图20161021165145.png","hash":"8eb1f673410159fb04f21fe0e4bb93c9b5b16e26","modified":1477039920000},{"_id":"source/images/QQ截图20161229154152.png","hash":"74fe29ea0835488cea2d5b94b887da31aa44925b","modified":1482997316000},{"_id":"source/images/QQ截图20161229154809.png","hash":"0c3b9bb7f84421bfa6ec55c2e73dfdd32b8ccf2b","modified":1482997692000},{"_id":"source/images/QQ截图20161229160034.png","hash":"f73a6273910ca46d7526c93cb429d7767f678ae9","modified":1482998438000},{"_id":"source/images/WechatIMG42820.png","hash":"0ff6786e1aaaecc92c2f4011c2c28982da4a66e9","modified":1534997832494},{"_id":"source/images/WechatIMG42823.png","hash":"ecc0936120e2bc29ff1e873102ecacf2a29c2479","modified":1534997864205},{"_id":"source/images/WechatIMG42821.png","hash":"49dc98b9a04270ff4987dbd3396e621a937b0039","modified":1534997857219},{"_id":"source/tags/index.md","hash":"e6f9827430022582d655f94a083f2c5488de88ac","modified":1477555730000},{"_id":"themes/indigo_my/.git/COMMIT_EDITMSG","hash":"7dd48b277eeba8de08e3a4e56e7ad7ac7021492a","modified":1535105427068},{"_id":"themes/indigo_my/.git/HEAD","hash":"40efdded77eac5daffdcb3167a27be24ff09c7c8","modified":1535105401364},{"_id":"themes/indigo_my/.git/config","hash":"bf92b5f237bd2ecac719a6e71932dfaeacc87811","modified":1535105348580},{"_id":"themes/indigo_my/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1535007850663},{"_id":"themes/indigo_my/.git/index","hash":"24e1a1afdb1b5dad856e6c2ade533d7ea972eeb0","modified":1535426796522},{"_id":"themes/indigo_my/.git/packed-refs","hash":"8d23deb22f1c0a29dd88b28c901be181fe9862dc","modified":1535007868332},{"_id":"themes/indigo_my/languages/en.yml","hash":"1957d2bfc3a4cef299f4f169b431e9b1128ba162","modified":1535007868339},{"_id":"themes/indigo_my/languages/ja.yml","hash":"74fd480874bf5e773ba7f9d2a94697cda979091f","modified":1535007868339},{"_id":"themes/indigo_my/languages/nl-NL","hash":"9085c04491f93066f2369911cc2175b59ae596ad","modified":1535007868339},{"_id":"themes/indigo_my/languages/zh-CN.yml","hash":"7dc6ae434dde390b6768d244132e23cc78c33817","modified":1535007868339},{"_id":"themes/indigo_my/languages/zh-TW.yml","hash":"6a9e820be66eb12ae746f2527e0dc1adf927c685","modified":1535007868339},{"_id":"themes/indigo_my/layout/archive.ejs","hash":"d039719e21f6a6fa2925b00aaa623a180a78c818","modified":1535007868348},{"_id":"themes/indigo_my/layout/categories.ejs","hash":"41783d2069d5080566a99e6312aa2113105f8b41","modified":1535007868348},{"_id":"themes/indigo_my/layout/category.ejs","hash":"7ea26a8a935886963eda82f41c7bd5270cf780d9","modified":1535007868348},{"_id":"themes/indigo_my/layout/index.ejs","hash":"39477807b98b2d2df78f3b82498a11e90be8222c","modified":1535007868348},{"_id":"themes/indigo_my/layout/layout.ejs","hash":"d52f43fa9572d70cae834e4887c8897b43744805","modified":1535007868349},{"_id":"themes/indigo_my/layout/page.ejs","hash":"afb98face24d39a21ebbbde6592a9afc98572aa4","modified":1535007868349},{"_id":"themes/indigo_my/layout/post.ejs","hash":"afbf8532dc8d148ca4dff2ca127a3382907cf2f5","modified":1535007868349},{"_id":"themes/indigo_my/layout/tag.ejs","hash":"36786a3de7f6cad58209603f7d84ba23addea174","modified":1535007868349},{"_id":"themes/indigo_my/layout/tags.ejs","hash":"20466446c41409d14a3d42ccaec24a65a045efef","modified":1535007868349},{"_id":"themes/indigo_my/scripts/plugins.js","hash":"e439d717513616bedeed37ba9b05117470809b21","modified":1535007868350},{"_id":"source/images/QQ截图20161027161847.png","hash":"29e5fff96d27d9607654db9a9dbac6dfc8c52f53","modified":1477557736000},{"_id":"source/images/QQ截图20161228122836.png","hash":"9f64fce516c7c1815881f3cfb2a056e94e8f505f","modified":1482899320000},{"_id":"source/favicon.ico","hash":"6b285021d853c29da85b5d9c5faa628016fc9bc1","modified":1477038418000},{"_id":"source/images/QQ截图20160413155659.png","hash":"8551bf93e86587928f042d5c85cbfb8a321d3674","modified":1477034350000},{"_id":"source/images/QQ截图20161027164200.jpg","hash":"348885b7daa77dc4d957846d7f22ac3590473e80","modified":1482904156000},{"_id":"themes/indigo_my/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1535007850664},{"_id":"themes/indigo_my/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1535007850665},{"_id":"themes/indigo_my/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1535007850663},{"_id":"themes/indigo_my/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1535007850665},{"_id":"themes/indigo_my/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1535007850664},{"_id":"themes/indigo_my/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1535007850665},{"_id":"themes/indigo_my/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1535007850664},{"_id":"themes/indigo_my/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1535007850664},{"_id":"themes/indigo_my/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1535007850664},{"_id":"themes/indigo_my/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1535007850665},{"_id":"themes/indigo_my/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1535007850663},{"_id":"themes/indigo_my/.git/logs/HEAD","hash":"2b3bdf4093a4fe1667ff722ea2f7913d337d7cd2","modified":1535105427069},{"_id":"themes/indigo_my/layout/_partial/after-footer.ejs","hash":"9ac30b9439fab69973cf4722dbf2945a18fd3804","modified":1535007868340},{"_id":"themes/indigo_my/layout/_partial/archive.ejs","hash":"55cd81ef9183426d6d99fd91550fce0a9cc92aa0","modified":1535007868340},{"_id":"themes/indigo_my/layout/_partial/head.ejs","hash":"02a95a88774cc50dbcc32242b6c8ac7e9d9028bb","modified":1535007868340},{"_id":"themes/indigo_my/layout/_partial/footer.ejs","hash":"e1a71a30a1c7a664ddf3ba3e7eb3a5b90bc4b33c","modified":1535007868340},{"_id":"themes/indigo_my/layout/_partial/header.ejs","hash":"6156bf20791e46fc1c5872113276c1c1f5c13773","modified":1535007868340},{"_id":"themes/indigo_my/layout/_partial/index-item.ejs","hash":"ec7b3ec79bbbead9c7e43e2e6c6b5c8bef509410","modified":1535007868340},{"_id":"themes/indigo_my/layout/_partial/loading.ejs","hash":"bc4cb19b20de55a0332647f4dca9684184383685","modified":1535007868341},{"_id":"themes/indigo_my/layout/_partial/menu.ejs","hash":"d39afaad6b0dd2a3ae27e6db3e9a6cd6014622fa","modified":1535007868341},{"_id":"themes/indigo_my/layout/_partial/paginator.ejs","hash":"dc27242927890f130a64400596b9b7ad5fca8972","modified":1535007868341},{"_id":"themes/indigo_my/layout/_partial/post.ejs","hash":"a87d9b0485b3bf4cdfdad890e5974c43dbaa8240","modified":1535426795428},{"_id":"themes/indigo_my/layout/_partial/script.ejs","hash":"439d6315a1b16e32b77a68c3f0cb2961d581086a","modified":1535007868347},{"_id":"themes/indigo_my/layout/_partial/search.ejs","hash":"c2091c621b5480ef1e69d72027028cec8e929892","modified":1535007868347},{"_id":"themes/indigo_my/layout/_partial/tags-bar.ejs","hash":"19eff4876d31080a427644f7a43fe172d0c008c6","modified":1535007868348},{"_id":"themes/indigo_my/source/css/style.less","hash":"f22d4146e0bdb4485d33f20080c67ba05724afea","modified":1535007868378},{"_id":"themes/indigo_my/source/img/alipay.jpg","hash":"6054d9ed2ca7cd1f645b729e05632134467d4daa","modified":1535007868379},{"_id":"themes/indigo_my/source/img/avatar.jpg","hash":"f25dc3a067225bfe33c160b3ef00b28ad93cb66a","modified":1535009264593},{"_id":"themes/indigo_my/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1535007868379},{"_id":"themes/indigo_my/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1535007868379},{"_id":"themes/indigo_my/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1535007868379},{"_id":"themes/indigo_my/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1535007868380},{"_id":"themes/indigo_my/source/img/wechat.jpg","hash":"ef069cc9e80c7553fd60589b0727bbbf8c6de372","modified":1535007868380},{"_id":"themes/indigo_my/source/js/main.js","hash":"300b2e963683ced162e28afcd24ffc970fc23ac2","modified":1535007868380},{"_id":"themes/indigo_my/source/js/main.min.js","hash":"8acf4480f8ab859423b8926b9b790c67b5a77276","modified":1535007868380},{"_id":"themes/indigo_my/source/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1535007868381},{"_id":"themes/indigo_my/source/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1535007868381},{"_id":"source/images/QQ截图20161229151926.png","hash":"249f317d407c528cd29e9d95a987e5726fa72420","modified":1482996092000},{"_id":"themes/indigo_my/.git/objects/0d/e721c4fa8ea5dcb62b0cc78018e5d102a2fe72","hash":"29a0ca245a9c960b422f68e2948a790ac8bcf76a","modified":1535105427065},{"_id":"themes/indigo_my/.git/objects/44/833de069789fee6f84520cd300420d88a24412","hash":"30b13b257dce135b37b3c5c27de67bcf75f18272","modified":1535105427065},{"_id":"themes/indigo_my/.git/objects/5a/8e581e8779ce33942363a49086352091c24130","hash":"577d38661afe5f5e6087687b84828ac03bbe4a0c","modified":1535105427064},{"_id":"themes/indigo_my/.git/objects/34/9d70e3f0ff50d8eb9efcd7835a1017141c40da","hash":"4ce6f75e3ec54388af0c36d6f87ac827815fad4b","modified":1535105408649},{"_id":"themes/indigo_my/.git/objects/5f/d6fa1c4514ace58b6bdedd067f7eb1322d12ee","hash":"3606c50a9454010f6a550a31203d4a2129589572","modified":1535105427064},{"_id":"themes/indigo_my/.git/objects/29/c4ba654e3854a363c509489f3bf7f3421e3812","hash":"53855fd0816101003bb5668bbcef7421a51ba09d","modified":1535105408649},{"_id":"themes/indigo_my/.git/objects/5d/34aebdc2db031072460ae6dd64d90ecfa42cfa","hash":"c528c1b0378fbf8f81a6bb53bdd6876844eb7e2b","modified":1535105408652},{"_id":"themes/indigo_my/.git/objects/fc/4121d2befa706403607c54d590aa33287eec6e","hash":"30713709f6a5aebd195d78506d04007b86de2f28","modified":1535105408651},{"_id":"themes/indigo_my/.git/objects/65/cea20e7c5196807c258eca79038e5bbad22cc0","hash":"a9b4ab7b7ddc442d5389f65cc8e09207eba4cda0","modified":1535105427068},{"_id":"themes/indigo_my/.git/objects/85/c4d9b3fe8f96e63ec956b3aa992b60a971109c","hash":"58a4affab130d16e61a51fff6717a0761dca280f","modified":1535105427066},{"_id":"themes/indigo_my/.git/objects/pack/pack-b8d04c6e09114566e2614fa8f4dea3c1f5bb24b8.idx","hash":"bc27ce7e6985f304faf60d78bf4e2a0ae459d0f6","modified":1535007868319},{"_id":"themes/indigo_my/.git/refs/heads/card","hash":"484dfa35ff9eb7a589991d8ca81ef961cd2a4ea6","modified":1535007868334},{"_id":"themes/indigo_my/.git/refs/heads/mjpiero","hash":"38f44c3e5f00b272783064e8a90aa93accf3778f","modified":1535105427069},{"_id":"themes/indigo_my/layout/_partial/plugins/baidu.ejs","hash":"e44d526029f122e9c2c74f3a647c35002c818cbe","modified":1535007868341},{"_id":"themes/indigo_my/layout/_partial/plugins/disqus.ejs","hash":"4a0c01e4195f685f9825fcd016d01249dbdd52ca","modified":1535007868341},{"_id":"themes/indigo_my/layout/_partial/plugins/dynamic-title.ejs","hash":"23c101d45911eb0846533aaa2d409c43aa5e899a","modified":1535007868342},{"_id":"themes/indigo_my/layout/_partial/plugins/gitment.ejs","hash":"5723d507eca4390e8e5d18c0770e7953b8c22f5a","modified":1535007868342},{"_id":"themes/indigo_my/layout/_partial/plugins/google-analytics.ejs","hash":"a947f4076b54b48d4df5baf2d5b3c39b632c7576","modified":1535007868342},{"_id":"themes/indigo_my/layout/_partial/plugins/hyper-comments.ejs","hash":"e5a83acc7c2e385b0c9abf428e86e8fdfd3a5202","modified":1535007868342},{"_id":"themes/indigo_my/layout/_partial/plugins/mathjax.ejs","hash":"ea603a057196de53bd6afab1fddb93d11f27eb81","modified":1535007868342},{"_id":"themes/indigo_my/layout/_partial/plugins/page-visit.ejs","hash":"2decb77bf3c1a064ea6ce1d4e78892c434d9c884","modified":1535007868342},{"_id":"themes/indigo_my/layout/_partial/plugins/site-visit.ejs","hash":"8fbd0910828f1ab6eba728bdecc9811d623baae2","modified":1535007868343},{"_id":"themes/indigo_my/layout/_partial/plugins/tajs.ejs","hash":"97b48fe10be1c71d4ff25ccec3bd92d97466c9c5","modified":1535007868343},{"_id":"themes/indigo_my/layout/_partial/plugins/uyan.ejs","hash":"e370bd04ea5cf1c83e0c20516aff7ba3ca8b2d0b","modified":1535007868343},{"_id":"themes/indigo_my/layout/_partial/plugins/valine.ejs","hash":"a976ca36bd09aeb2902bf94fcc7a59975ea25148","modified":1535007868343},{"_id":"themes/indigo_my/layout/_partial/post/category.ejs","hash":"c7476165721a3a5e34d00d8c5c07e1e5474cd800","modified":1535007868343},{"_id":"themes/indigo_my/layout/_partial/post/comment.ejs","hash":"bcc3bd7a9023d71778f15e98c88552335ae69a69","modified":1535007868344},{"_id":"themes/indigo_my/layout/_partial/post/copyright.ejs","hash":"5305ed30ee35cf50f87656737d0ffe85f5bfc16b","modified":1535007868344},{"_id":"themes/indigo_my/layout/_partial/post/date.ejs","hash":"ea85b46e12d3b9c3612eef7aa76289a663fbc096","modified":1535007868344},{"_id":"themes/indigo_my/layout/_partial/post/head-meta.ejs","hash":"b0c680ce5b8aaf461a6731b1ff1287bd140c168a","modified":1535007868344},{"_id":"themes/indigo_my/layout/_partial/post/nav.ejs","hash":"11e7d504f7c7a3c4c052da13cfa8ea4862c9383e","modified":1535007868345},{"_id":"themes/indigo_my/layout/_partial/post/reward-btn.ejs","hash":"41c242fe3159dc68cec8dd00ab6d2663f5a51179","modified":1535007868345},{"_id":"themes/indigo_my/layout/_partial/post/reward.ejs","hash":"23719e09689b3afbb19214c6603eb02f896cb9ba","modified":1535007868345},{"_id":"themes/indigo_my/layout/_partial/post/share-fab.ejs","hash":"93482ad7d1e01b966f5ee1c5d12b88564e02b349","modified":1535007868346},{"_id":"themes/indigo_my/layout/_partial/post/share.ejs","hash":"8df0d7bf6f8e106cdbdac2dd10a97367aa0695f8","modified":1535007868346},{"_id":"themes/indigo_my/layout/_partial/post/tag.ejs","hash":"b3dc38652c4a018a37418136478dcd522fc49f79","modified":1535007868346},{"_id":"themes/indigo_my/layout/_partial/post/title.ejs","hash":"062d56cb88ae2be3a6616b911d4ebeffcbfe3cff","modified":1535007868346},{"_id":"themes/indigo_my/layout/_partial/post/toc.ejs","hash":"ad287a70724eb7cd8cd2a03a45b68032ee99973d","modified":1535007868347},{"_id":"themes/indigo_my/layout/_partial/post/updated.ejs","hash":"5caa71745aa340ce57938a930f3b898ee7518d74","modified":1535007868347},{"_id":"themes/indigo_my/source/css/_partial/archives.less","hash":"7d2a6886265386c640e94ffca3f042675f701a35","modified":1535007868350},{"_id":"themes/indigo_my/source/css/_partial/article.less","hash":"d476cd3537bcd8a02d055cc223f5c805b8638cc2","modified":1535007868350},{"_id":"themes/indigo_my/source/css/_partial/gotop.less","hash":"b7db31b9bc563c10b9e3cf3e6d9cfddfeb3e805a","modified":1535007868352},{"_id":"themes/indigo_my/source/css/_partial/header.less","hash":"90f0948a9182c14b1dac1e9dbed3c883543266f9","modified":1535007868352},{"_id":"themes/indigo_my/source/css/_partial/highlight.less","hash":"58492b7cdb45fe09b026b2f34e8ae69c2ddb8228","modified":1535007868352},{"_id":"themes/indigo_my/source/css/_partial/layout.less","hash":"4390ed22abad59c8b28ed1a479a52f15b5f9cf4a","modified":1535007868352},{"_id":"themes/indigo_my/source/css/_partial/lightbox.less","hash":"9b961eb1d70e7658f42cf2ca895fa5e35a6b6541","modified":1535007868353},{"_id":"themes/indigo_my/source/css/_partial/loading.less","hash":"f9d06a1e24fb4857fd18d7a0bfbb3a0ab2d1c742","modified":1535007868353},{"_id":"themes/indigo_my/source/css/_partial/page.less","hash":"e92ccb53e6ac73a51498c6a9672db9d0d2bc7f1a","modified":1535007868353},{"_id":"themes/indigo_my/source/css/_partial/postlist.less","hash":"1c041bf91106808e5480c60d9ece45431bb503b3","modified":1535007868353},{"_id":"themes/indigo_my/source/css/_partial/reward.less","hash":"4857f90bb57fc22ca3f942d8934d86d5e9e82c1e","modified":1535007868354},{"_id":"themes/indigo_my/source/css/_partial/roboto.less","hash":"2e0469ed8161d5672d903ca1a8027cd65fe007f1","modified":1535007868354},{"_id":"themes/indigo_my/source/css/_partial/search.less","hash":"1d6641ae7568a0153d24beba9fd9704d2b155f6c","modified":1535007868354},{"_id":"themes/indigo_my/source/css/_partial/share.less","hash":"27d80bcc96a53dd1e7eaa9a7d746e4b212357302","modified":1535007868354},{"_id":"themes/indigo_my/source/css/_partial/tags.less","hash":"959f4373fda6e45f6a4041a995ed3ea8a05a5170","modified":1535007868355},{"_id":"themes/indigo_my/source/css/_partial/variable.less","hash":"a72ecd68ade3fff72b9b30ca6469f230295b587e","modified":1535009191095},{"_id":"themes/indigo_my/source/css/_partial/waves.less","hash":"77bfd0b373b0469eb0176167fb076ccda4edf2a7","modified":1535007868355},{"_id":"themes/indigo_my/source/css/_plugin/valine.less","hash":"ddbb7647d83f732f9b0d5d817d40a748006949cc","modified":1535007868355},{"_id":"themes/indigo_my/source/css/_partial/fontawesome.less","hash":"ca30b732d2efbb0cd55a272ecdabc97f895aee78","modified":1535007868351},{"_id":"themes/indigo_my/.git/logs/refs/heads/card","hash":"03484c4d6db0cee068daea3442a3f4bcbe079d92","modified":1535007868334},{"_id":"themes/indigo_my/.git/logs/refs/heads/mjpiero","hash":"34a2eeaab24faabbfaffb0180f24ced7ac19eaf7","modified":1535105427069},{"_id":"themes/indigo_my/.git/refs/remotes/origin/HEAD","hash":"7f141be72288af81f8e55d94df5da3f87101e8f1","modified":1535007868333},{"_id":"themes/indigo_my/.git/refs/remotes/origin/mjpiero","hash":"38f44c3e5f00b272783064e8a90aa93accf3778f","modified":1535105439875},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1535007868366},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1535007868367},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1535007868368},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1535007868368},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1535007868370},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1535007868370},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1535007868370},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1535007868372},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1535007868372},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1535007868373},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1535007868375},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1535007868375},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1535007868376},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1535007868377},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1535007868378},{"_id":"themes/indigo_my/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1535007868365},{"_id":"themes/indigo_my/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1535007868366},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1535007868367},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1535007868369},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1535007868371},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1535007868374},{"_id":"themes/indigo_my/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1535007868377},{"_id":"themes/indigo_my/.git/logs/refs/remotes/origin/HEAD","hash":"03484c4d6db0cee068daea3442a3f4bcbe079d92","modified":1535007868333},{"_id":"themes/indigo_my/.git/logs/refs/remotes/origin/mjpiero","hash":"afbe8530690b1adc2560a4565c82c10f7f8c7d24","modified":1535105439876},{"_id":"themes/indigo_my/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1535007868357},{"_id":"themes/indigo_my/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1535007868359},{"_id":"themes/indigo_my/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1535007868365},{"_id":"themes/indigo_my/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1535007868363},{"_id":"source/images/808279392447213144-576x1024.jpg","hash":"fd0c18cddaad18679786c005cb4312882f2ee156","modified":1477044464000},{"_id":"source/images/QQ20180727-183707.gif","hash":"d337b4a0e2deb79e1ff68bad16c6aa7615a29a96","modified":1534997869065},{"_id":"themes/indigo_my/.git/objects/pack/pack-b8d04c6e09114566e2614fa8f4dea3c1f5bb24b8.pack","hash":"ff30c6fac44de0ec07b07ce9f38d9af0a3d3855d","modified":1535007868319},{"_id":"source/_posts/UMD兼容多种模块规范.md","hash":"083dff9d9a1f8b20665584416ddbf1d02dfe87e3","modified":1535524844538},{"_id":"source/images/https:/www.jianshu.com/p/bef1c1ee5a0ehttps:/www.jianshu.com/p/bef1c1ee5a0e","hash":"f24aa629c049d086daf6549834cfc1a50954d60d","modified":1535545055905},{"_id":"source/_posts/谈谈Virtual-DOM.md","hash":"d92780e3d6f1ea7aa81e51e7d7d101655563d4a7","modified":1535545124950},{"_id":"source/images/37341-849962bd459dd09f.webp","hash":"f24aa629c049d086daf6549834cfc1a50954d60d","modified":1535545080514}],"Category":[{"name":"vue","_id":"cjleqs1nq0004q3v3a5m1lf63"},{"name":"css","_id":"cjleqs1nw0009q3v3m8gj4ypd"},{"name":"mywork","_id":"cjleqs1o0000fq3v33atx0o52"},{"name":"mongodb","_id":"cjleqs1o4000lq3v3pz1paxdk"},{"name":"环境搭建","_id":"cjleqs1oc000wq3v37vmraerl"},{"name":"javascript","_id":"cjleqs1og0014q3v32k4sasnc"},{"name":"threejs","_id":"cjleqs1ok001bq3v3ic6o1dbz"},{"name":"nodejs","_id":"cjleqs1oq001sq3v3to0se4kv"}],"Data":[],"Page":[{"title":"分类","layout":"categories","noDate":true,"comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\nlayout: categories\nnoDate: true\ncomments: false\n---\n","date":"2018-08-21T13:36:30.018Z","updated":"2016-10-27T08:10:04.000Z","path":"categories/index.html","_id":"cjleqs1nl0001q3v3g6bwfuaz","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"page","title":"个人简历","_content":"\n## 基本信息\n@card{\n\n姓   名：     马 婧\n联系方式：     13032171092\n邮   箱：     merlu.majing@gmail.com\n出生年月：    1992.05.08\n学   历：     本 科\n个人主页：    http://www.mjpiero.cc/\nGithub：     https://github.com/MJPiero/\n\n}\n\n## 教育背景\n@card{\n\n时间|学校|专业\n:----:|:----:|:----:\n2009.09-2013.07|南开大学滨海学院|计算机科学系影视动画专业\n\n}\n\n## 工作经验\n@card{\n\n时间|公司|职位\n:----:|:----:|:----:\n2015.05 - 至今|游族网络Mob云平台|资深前端开发工程师\n游族网络Mob云平台（http://www.mob.com/） 前期是Mob移动开发者服务平台，如今引入大数据相关分析和研究，致力于打造全景数据服务平台。由于在此部门任职时间较长，根据部门发展的不同阶段，所负责和承担的职责也有所不同。\n__------ 早期 ------__\n- Mob官网 以及 相关开发者服务平台 的开发，以及 其他内部UI平台工具 的开发（Angular 为主） 。\n- 客户端内嵌组件，以及第三方Web JSSDK，例如 webshare（shareSDK web版本） 和 mobLink （http://moblink.mob.com/） 等等。\n- 微信公众号相关开发，一些h5小游戏或者一些活动推广页面。\n- Apicloud、phoneGap（Cordova）等相关Hybird App平台开发，当时和其他部门合作开发的电商相关的项目，功能较简单直白，一方面用作客户端功能案例，另一方面用作内部工具开发使用。\n\n__------ 后期 ------__\n- MobData（大数据服务）相关商业化产品开发和维护，例如 统计SDK（http://analysdk.mob.com/） 等项目（Vue为主）\t。\n- 内部工具微信小程序开发。部门小程序相关的项目不多，主要是为了支持sharesdk做一些内部测试，做过一些简单的小程序。\n- 前端组管理。前端组组员的工作分配，协助处理和沟通各种问题。制定前端组开规范和流程，搭建统一开发环境，对组员开发内容质量检测，加强团队间沟通交流，组织学习分享会。和各个项目产品以及PM沟通去制定前端相关的优化方案。\n\n}\n\n@card{\n\n时间|公司|职位\n:----:|:----:|:----:\n2014.04 - 2015.04|新浪江西|Web前端开发\n新浪江西（http://jx.sina.com.cn/） 新浪旗下江西地方站门户网站。\n- 新浪江西门户网站维护和更新，相关模块的开发。\n- 活动推广页面开发。门户网站一些线上线下活动推广页面，例如抽奖、投票、集赞、转发等相关活动推广页面的开发，重点在于页面的各种效果展示。\n\n}\n\n@card{\n\n时间|公司|职位\n:----:|:----:|:----:\n2013.11- 2014.04|南昌维网数字传媒有限公司|网站美术设计\n- 电商相关网站美术UI设计，网页切图，编写静态HTML页面。\n- 公司线下推广海报平面设计，简单的推广视频效果制作。\n- 网站Flash交互效果设计和编写，基本AS脚本编写。\n\n}\n\n## 项目经验\n@card{\n\n__① 统计SDK & Mob Game 游戏解决方案平台（http://analysdk.mob.com/）__\n统计SDK平台是个通用版本（http://analy.mob.com/）, 基于MobData大数据服务对采集到的用户数据和行为埋点进行计算分析，并通过图表展示出来。统计SDK平台是该项目的一期开发，后基于该平台做了一个针对游戏行业定制化的数据分析平台，既Mob Game 游戏解决方案平台（http://g.analy.mob.com/）。\n- 从这个项目开始使用Vue框架，独立完成该项目的多个版本的开发和维护，以及web端jssdk开发。\n- 在开发过程中也对Vue框架做了一系列的拓展，例如Vue+webpack单页面基础的脚手架，基于Vue的一些组件定制，例如单选多选的下拉组件，Loading、Modal的定制化组件等。\n- 从该项目下提取一套UI样式，以及针对echart定制一些图表样式可以直接配置引用。\n- 后期功能的优化，监测以及重构。\n\n}\n\n@card{\n\n__② 基于NodeJS重构Mob官网（http://www.mob.com/）__\nMob官网是在Mob部门最开始接触的项目，早期部门前端人员缺乏，官网是PHP后端渲染的开发模式，一开始先是改成前后端分离的模式，基于Angular 1.x框架开发的，后因为老的接口处理比较繁杂，便尝试基于express搭建了网站服务，对老接口的数据进行处理和过滤，再渲染前端页面。\n- 基于express搭建网站服务，构建gulp+angular多页面应用框架，简单编写路由，以及域名代理脚本配置文件，方便后期维护和添加新的页面。\n- 去爬取接口数据，并进行处理和过滤，前端基于Angular 1.x渲染页面。\n- 结合mysql开发一些简单的表单提交功能。主要是页面上一些简单的报名系统。\n- 使用sass定制化网页皮肤主题。\n- 产品页动效设计展示，使用SnapSVG做一些简单页面动效，icon变换等。以及运用一些canvas js类库去生成矢量动画。\n\n}\n\n@card{\n\n__③ 第三方JSSDK开发（http://moblink.mob.com/）__\nMob有个ShareSDK社会化分享产品，最开始是先开发了sharesdk web版本（webshare），集成各大社交平台第三方分享接口，实现一键分享各个社交平台。之后又有了moblink产品，从web直接打开App内页，并且实现web和App互通通信。后期开发的cmssdk，bbssdk都是根据客户端要求开发，功能定制化一些。\n- Webshare是使用grunt构建，打包压缩成jssdk产品。原生js开发，仿照jq的一些类库封装了一些常用的方法，如http请求，dom选择器等。\n- MobLink是使用gulp构建，打包压缩成jssdk产品。之后重构了一个es6版本，使用webpack打包压缩。之后不断对产品优化，采集设备信息，写了一些方便自测的demo。\n- 早期没有前端的技术支持客服，在这两个产品推广之际，也需要负责一些技术支持和客户对接的工作。\n\n}\n\n@card{\n\n__④ 小游戏H5开发（https://github.com/MJPiero/catchzongzi/）__\n在新浪江西的时候做的活动页比较多，活动页注重页面效果比较多，转盘抽奖，心理测试，拼图，照片处理，接金币，大富翁一类的游戏都有做过一些。\n- 早期是基于原生js canvas写简单的活动页面，也写过接金币这类游戏，但是原生的优化做的不好，移动端设备兼容性不佳，之后使用createJS比较多，开发出来也更稳定一些。\n- 根据微信公众开发平台提供的文档和接口，开发微信公众平台相关功能。例如分享，拍照，音频播放，获取微信用户信息等。\n\n}\n\n@card{\n\n__⑤ 基于ThinkPHP + Angular 独立开发页面编辑工具__\n这个是运营那边的一个需求，每周会发一个邮件，内容大概是产品相关的动态，早期是人工修改，后期学习了一下TP的框架，能够简单的搭建一些小的平台，这个工具不用连接数据库，而是直接通过tp模板写入数据，渲染生成一个静态的html页面，可下载保存该html页面使用。\n\n}\n\n@card{\n\n__⑥ MobUI & 前端规范__\n这个是针对前端团队发展的，也是前端组成员们共同维护拓展的项目。MobUI是基于iview UI框架做的业务类组件拓展，由于后期商业化产品比较多，所以将商业化业务的功能模块封装成组件或者模板。\n同样还包括了mob-base基础架构，方便组员快速搭建一个商业化平台项目。然后还放入了一些设计类主题，和设计组合作，将平时项目中一些交互性设计效果引入，单独作为一个theme可在mob-base中直接引用。\n再者就是一些前端规范，git提交规范，部署规范等一些规范流程文档。\n\n}\n\n## 技能专长\n@card{\n\n精通JavaScript，HTML/CSS，以及VUE、Angular等前端框架开发，对后端开发较为了解，对php，nodejs都较为熟悉，也有简单开发过一些小平台。\nHybird App开发项目较少，REACT、小程序都比较了解，但是主要还是做平台系统比较多。Webpack、gulp等构建工具都很熟悉，熟悉移动端开发。\n擅长PS，Sketch等设计工具，以及Motion，AE等音频软件。\n\n}\n\n## 自我评价\n@card{\n\n三年多的前端开发经验，而半年的网站设计经验让我能够更好的从交互设计的角度去完善前端的项目。\n为人勤勉好学，擅长与人沟通，对工作饱含热情，工作生活中，都善于表达自己的想法观点，能从产品和用户体验等多个角度去看待问题，协助团队去更好的完善项目。前端行业是个飞速更新发展的行业，我认为要做好前端的工作，更需要多方面的学习和了解。\n\n}","source":"about/index.md","raw":"---\nlayout: page\ntitle: 个人简历\n---\n\n## 基本信息\n@card{\n\n姓   名：     马 婧\n联系方式：     13032171092\n邮   箱：     merlu.majing@gmail.com\n出生年月：    1992.05.08\n学   历：     本 科\n个人主页：    http://www.mjpiero.cc/\nGithub：     https://github.com/MJPiero/\n\n}\n\n## 教育背景\n@card{\n\n时间|学校|专业\n:----:|:----:|:----:\n2009.09-2013.07|南开大学滨海学院|计算机科学系影视动画专业\n\n}\n\n## 工作经验\n@card{\n\n时间|公司|职位\n:----:|:----:|:----:\n2015.05 - 至今|游族网络Mob云平台|资深前端开发工程师\n游族网络Mob云平台（http://www.mob.com/） 前期是Mob移动开发者服务平台，如今引入大数据相关分析和研究，致力于打造全景数据服务平台。由于在此部门任职时间较长，根据部门发展的不同阶段，所负责和承担的职责也有所不同。\n__------ 早期 ------__\n- Mob官网 以及 相关开发者服务平台 的开发，以及 其他内部UI平台工具 的开发（Angular 为主） 。\n- 客户端内嵌组件，以及第三方Web JSSDK，例如 webshare（shareSDK web版本） 和 mobLink （http://moblink.mob.com/） 等等。\n- 微信公众号相关开发，一些h5小游戏或者一些活动推广页面。\n- Apicloud、phoneGap（Cordova）等相关Hybird App平台开发，当时和其他部门合作开发的电商相关的项目，功能较简单直白，一方面用作客户端功能案例，另一方面用作内部工具开发使用。\n\n__------ 后期 ------__\n- MobData（大数据服务）相关商业化产品开发和维护，例如 统计SDK（http://analysdk.mob.com/） 等项目（Vue为主）\t。\n- 内部工具微信小程序开发。部门小程序相关的项目不多，主要是为了支持sharesdk做一些内部测试，做过一些简单的小程序。\n- 前端组管理。前端组组员的工作分配，协助处理和沟通各种问题。制定前端组开规范和流程，搭建统一开发环境，对组员开发内容质量检测，加强团队间沟通交流，组织学习分享会。和各个项目产品以及PM沟通去制定前端相关的优化方案。\n\n}\n\n@card{\n\n时间|公司|职位\n:----:|:----:|:----:\n2014.04 - 2015.04|新浪江西|Web前端开发\n新浪江西（http://jx.sina.com.cn/） 新浪旗下江西地方站门户网站。\n- 新浪江西门户网站维护和更新，相关模块的开发。\n- 活动推广页面开发。门户网站一些线上线下活动推广页面，例如抽奖、投票、集赞、转发等相关活动推广页面的开发，重点在于页面的各种效果展示。\n\n}\n\n@card{\n\n时间|公司|职位\n:----:|:----:|:----:\n2013.11- 2014.04|南昌维网数字传媒有限公司|网站美术设计\n- 电商相关网站美术UI设计，网页切图，编写静态HTML页面。\n- 公司线下推广海报平面设计，简单的推广视频效果制作。\n- 网站Flash交互效果设计和编写，基本AS脚本编写。\n\n}\n\n## 项目经验\n@card{\n\n__① 统计SDK & Mob Game 游戏解决方案平台（http://analysdk.mob.com/）__\n统计SDK平台是个通用版本（http://analy.mob.com/）, 基于MobData大数据服务对采集到的用户数据和行为埋点进行计算分析，并通过图表展示出来。统计SDK平台是该项目的一期开发，后基于该平台做了一个针对游戏行业定制化的数据分析平台，既Mob Game 游戏解决方案平台（http://g.analy.mob.com/）。\n- 从这个项目开始使用Vue框架，独立完成该项目的多个版本的开发和维护，以及web端jssdk开发。\n- 在开发过程中也对Vue框架做了一系列的拓展，例如Vue+webpack单页面基础的脚手架，基于Vue的一些组件定制，例如单选多选的下拉组件，Loading、Modal的定制化组件等。\n- 从该项目下提取一套UI样式，以及针对echart定制一些图表样式可以直接配置引用。\n- 后期功能的优化，监测以及重构。\n\n}\n\n@card{\n\n__② 基于NodeJS重构Mob官网（http://www.mob.com/）__\nMob官网是在Mob部门最开始接触的项目，早期部门前端人员缺乏，官网是PHP后端渲染的开发模式，一开始先是改成前后端分离的模式，基于Angular 1.x框架开发的，后因为老的接口处理比较繁杂，便尝试基于express搭建了网站服务，对老接口的数据进行处理和过滤，再渲染前端页面。\n- 基于express搭建网站服务，构建gulp+angular多页面应用框架，简单编写路由，以及域名代理脚本配置文件，方便后期维护和添加新的页面。\n- 去爬取接口数据，并进行处理和过滤，前端基于Angular 1.x渲染页面。\n- 结合mysql开发一些简单的表单提交功能。主要是页面上一些简单的报名系统。\n- 使用sass定制化网页皮肤主题。\n- 产品页动效设计展示，使用SnapSVG做一些简单页面动效，icon变换等。以及运用一些canvas js类库去生成矢量动画。\n\n}\n\n@card{\n\n__③ 第三方JSSDK开发（http://moblink.mob.com/）__\nMob有个ShareSDK社会化分享产品，最开始是先开发了sharesdk web版本（webshare），集成各大社交平台第三方分享接口，实现一键分享各个社交平台。之后又有了moblink产品，从web直接打开App内页，并且实现web和App互通通信。后期开发的cmssdk，bbssdk都是根据客户端要求开发，功能定制化一些。\n- Webshare是使用grunt构建，打包压缩成jssdk产品。原生js开发，仿照jq的一些类库封装了一些常用的方法，如http请求，dom选择器等。\n- MobLink是使用gulp构建，打包压缩成jssdk产品。之后重构了一个es6版本，使用webpack打包压缩。之后不断对产品优化，采集设备信息，写了一些方便自测的demo。\n- 早期没有前端的技术支持客服，在这两个产品推广之际，也需要负责一些技术支持和客户对接的工作。\n\n}\n\n@card{\n\n__④ 小游戏H5开发（https://github.com/MJPiero/catchzongzi/）__\n在新浪江西的时候做的活动页比较多，活动页注重页面效果比较多，转盘抽奖，心理测试，拼图，照片处理，接金币，大富翁一类的游戏都有做过一些。\n- 早期是基于原生js canvas写简单的活动页面，也写过接金币这类游戏，但是原生的优化做的不好，移动端设备兼容性不佳，之后使用createJS比较多，开发出来也更稳定一些。\n- 根据微信公众开发平台提供的文档和接口，开发微信公众平台相关功能。例如分享，拍照，音频播放，获取微信用户信息等。\n\n}\n\n@card{\n\n__⑤ 基于ThinkPHP + Angular 独立开发页面编辑工具__\n这个是运营那边的一个需求，每周会发一个邮件，内容大概是产品相关的动态，早期是人工修改，后期学习了一下TP的框架，能够简单的搭建一些小的平台，这个工具不用连接数据库，而是直接通过tp模板写入数据，渲染生成一个静态的html页面，可下载保存该html页面使用。\n\n}\n\n@card{\n\n__⑥ MobUI & 前端规范__\n这个是针对前端团队发展的，也是前端组成员们共同维护拓展的项目。MobUI是基于iview UI框架做的业务类组件拓展，由于后期商业化产品比较多，所以将商业化业务的功能模块封装成组件或者模板。\n同样还包括了mob-base基础架构，方便组员快速搭建一个商业化平台项目。然后还放入了一些设计类主题，和设计组合作，将平时项目中一些交互性设计效果引入，单独作为一个theme可在mob-base中直接引用。\n再者就是一些前端规范，git提交规范，部署规范等一些规范流程文档。\n\n}\n\n## 技能专长\n@card{\n\n精通JavaScript，HTML/CSS，以及VUE、Angular等前端框架开发，对后端开发较为了解，对php，nodejs都较为熟悉，也有简单开发过一些小平台。\nHybird App开发项目较少，REACT、小程序都比较了解，但是主要还是做平台系统比较多。Webpack、gulp等构建工具都很熟悉，熟悉移动端开发。\n擅长PS，Sketch等设计工具，以及Motion，AE等音频软件。\n\n}\n\n## 自我评价\n@card{\n\n三年多的前端开发经验，而半年的网站设计经验让我能够更好的从交互设计的角度去完善前端的项目。\n为人勤勉好学，擅长与人沟通，对工作饱含热情，工作生活中，都善于表达自己的想法观点，能从产品和用户体验等多个角度去看待问题，协助团队去更好的完善项目。前端行业是个飞速更新发展的行业，我认为要做好前端的工作，更需要多方面的学习和了解。\n\n}","date":"2018-08-28T03:24:14.138Z","updated":"2018-08-28T03:24:14.138Z","path":"about/index.html","comments":1,"_id":"cjleqs1pc002qq3v3vrlg1gj9","content":"<h2 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h2><p>@card{</p>\n<p>姓   名：     马 婧<br>联系方式：     13032171092<br>邮   箱：     <a href=\"mailto:merlu.majing@gmail.com\" target=\"_blank\" rel=\"noopener\">merlu.majing@gmail.com</a><br>出生年月：    1992.05.08<br>学   历：     本 科<br>个人主页：    <a href=\"http://www.mjpiero.cc/\">http://www.mjpiero.cc/</a><br>Github：     <a href=\"https://github.com/MJPiero/\" target=\"_blank\" rel=\"noopener\">https://github.com/MJPiero/</a></p>\n<p>}</p>\n<h2 id=\"教育背景\"><a href=\"#教育背景\" class=\"headerlink\" title=\"教育背景\"></a>教育背景</h2><p>@card{</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">时间</th>\n<th style=\"text-align:center\">学校</th>\n<th style=\"text-align:center\">专业</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">2009.09-2013.07</td>\n<td style=\"text-align:center\">南开大学滨海学院</td>\n<td style=\"text-align:center\">计算机科学系影视动画专业</td>\n</tr>\n</tbody>\n</table>\n<p>}</p>\n<h2 id=\"工作经验\"><a href=\"#工作经验\" class=\"headerlink\" title=\"工作经验\"></a>工作经验</h2><p>@card{</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">时间</th>\n<th style=\"text-align:center\">公司</th>\n<th style=\"text-align:center\">职位</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">2015.05 - 至今</td>\n<td style=\"text-align:center\">游族网络Mob云平台</td>\n<td style=\"text-align:center\">资深前端开发工程师</td>\n</tr>\n</tbody>\n</table>\n<p>游族网络Mob云平台（<a href=\"http://www.mob.com/）\" target=\"_blank\" rel=\"noopener\">http://www.mob.com/）</a> 前期是Mob移动开发者服务平台，如今引入大数据相关分析和研究，致力于打造全景数据服务平台。由于在此部门任职时间较长，根据部门发展的不同阶段，所负责和承担的职责也有所不同。<br><strong>—— 早期 ——</strong></p>\n<ul>\n<li>Mob官网 以及 相关开发者服务平台 的开发，以及 其他内部UI平台工具 的开发（Angular 为主） 。</li>\n<li>客户端内嵌组件，以及第三方Web JSSDK，例如 webshare（shareSDK web版本） 和 mobLink （<a href=\"http://moblink.mob.com/）\" target=\"_blank\" rel=\"noopener\">http://moblink.mob.com/）</a> 等等。</li>\n<li>微信公众号相关开发，一些h5小游戏或者一些活动推广页面。</li>\n<li>Apicloud、phoneGap（Cordova）等相关Hybird App平台开发，当时和其他部门合作开发的电商相关的项目，功能较简单直白，一方面用作客户端功能案例，另一方面用作内部工具开发使用。</li>\n</ul>\n<p><strong>—— 后期 ——</strong></p>\n<ul>\n<li>MobData（大数据服务）相关商业化产品开发和维护，例如 统计SDK（<a href=\"http://analysdk.mob.com/）\" target=\"_blank\" rel=\"noopener\">http://analysdk.mob.com/）</a> 等项目（Vue为主）    。</li>\n<li>内部工具微信小程序开发。部门小程序相关的项目不多，主要是为了支持sharesdk做一些内部测试，做过一些简单的小程序。</li>\n<li>前端组管理。前端组组员的工作分配，协助处理和沟通各种问题。制定前端组开规范和流程，搭建统一开发环境，对组员开发内容质量检测，加强团队间沟通交流，组织学习分享会。和各个项目产品以及PM沟通去制定前端相关的优化方案。</li>\n</ul>\n<p>}</p>\n<p>@card{</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">时间</th>\n<th style=\"text-align:center\">公司</th>\n<th style=\"text-align:center\">职位</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">2014.04 - 2015.04</td>\n<td style=\"text-align:center\">新浪江西</td>\n<td style=\"text-align:center\">Web前端开发</td>\n</tr>\n</tbody>\n</table>\n<p>新浪江西（<a href=\"http://jx.sina.com.cn/）\" target=\"_blank\" rel=\"noopener\">http://jx.sina.com.cn/）</a> 新浪旗下江西地方站门户网站。</p>\n<ul>\n<li>新浪江西门户网站维护和更新，相关模块的开发。</li>\n<li>活动推广页面开发。门户网站一些线上线下活动推广页面，例如抽奖、投票、集赞、转发等相关活动推广页面的开发，重点在于页面的各种效果展示。</li>\n</ul>\n<p>}</p>\n<p>@card{</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">时间</th>\n<th style=\"text-align:center\">公司</th>\n<th style=\"text-align:center\">职位</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">2013.11- 2014.04</td>\n<td style=\"text-align:center\">南昌维网数字传媒有限公司</td>\n<td style=\"text-align:center\">网站美术设计</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>电商相关网站美术UI设计，网页切图，编写静态HTML页面。</li>\n<li>公司线下推广海报平面设计，简单的推广视频效果制作。</li>\n<li>网站Flash交互效果设计和编写，基本AS脚本编写。</li>\n</ul>\n<p>}</p>\n<h2 id=\"项目经验\"><a href=\"#项目经验\" class=\"headerlink\" title=\"项目经验\"></a>项目经验</h2><p>@card{</p>\n<p><strong>① 统计SDK &amp; Mob Game 游戏解决方案平台（<a href=\"http://analysdk.mob.com/）\" target=\"_blank\" rel=\"noopener\">http://analysdk.mob.com/）</a></strong><br>统计SDK平台是个通用版本（<a href=\"http://analy.mob.com/）\" target=\"_blank\" rel=\"noopener\">http://analy.mob.com/）</a>, 基于MobData大数据服务对采集到的用户数据和行为埋点进行计算分析，并通过图表展示出来。统计SDK平台是该项目的一期开发，后基于该平台做了一个针对游戏行业定制化的数据分析平台，既Mob Game 游戏解决方案平台（<a href=\"http://g.analy.mob.com/）。\" target=\"_blank\" rel=\"noopener\">http://g.analy.mob.com/）。</a></p>\n<ul>\n<li>从这个项目开始使用Vue框架，独立完成该项目的多个版本的开发和维护，以及web端jssdk开发。</li>\n<li>在开发过程中也对Vue框架做了一系列的拓展，例如Vue+webpack单页面基础的脚手架，基于Vue的一些组件定制，例如单选多选的下拉组件，Loading、Modal的定制化组件等。</li>\n<li>从该项目下提取一套UI样式，以及针对echart定制一些图表样式可以直接配置引用。</li>\n<li>后期功能的优化，监测以及重构。</li>\n</ul>\n<p>}</p>\n<p>@card{</p>\n<p><strong>② 基于NodeJS重构Mob官网（<a href=\"http://www.mob.com/）\" target=\"_blank\" rel=\"noopener\">http://www.mob.com/）</a></strong><br>Mob官网是在Mob部门最开始接触的项目，早期部门前端人员缺乏，官网是PHP后端渲染的开发模式，一开始先是改成前后端分离的模式，基于Angular 1.x框架开发的，后因为老的接口处理比较繁杂，便尝试基于express搭建了网站服务，对老接口的数据进行处理和过滤，再渲染前端页面。</p>\n<ul>\n<li>基于express搭建网站服务，构建gulp+angular多页面应用框架，简单编写路由，以及域名代理脚本配置文件，方便后期维护和添加新的页面。</li>\n<li>去爬取接口数据，并进行处理和过滤，前端基于Angular 1.x渲染页面。</li>\n<li>结合mysql开发一些简单的表单提交功能。主要是页面上一些简单的报名系统。</li>\n<li>使用sass定制化网页皮肤主题。</li>\n<li>产品页动效设计展示，使用SnapSVG做一些简单页面动效，icon变换等。以及运用一些canvas js类库去生成矢量动画。</li>\n</ul>\n<p>}</p>\n<p>@card{</p>\n<p><strong>③ 第三方JSSDK开发（<a href=\"http://moblink.mob.com/）\" target=\"_blank\" rel=\"noopener\">http://moblink.mob.com/）</a></strong><br>Mob有个ShareSDK社会化分享产品，最开始是先开发了sharesdk web版本（webshare），集成各大社交平台第三方分享接口，实现一键分享各个社交平台。之后又有了moblink产品，从web直接打开App内页，并且实现web和App互通通信。后期开发的cmssdk，bbssdk都是根据客户端要求开发，功能定制化一些。</p>\n<ul>\n<li>Webshare是使用grunt构建，打包压缩成jssdk产品。原生js开发，仿照jq的一些类库封装了一些常用的方法，如http请求，dom选择器等。</li>\n<li>MobLink是使用gulp构建，打包压缩成jssdk产品。之后重构了一个es6版本，使用webpack打包压缩。之后不断对产品优化，采集设备信息，写了一些方便自测的demo。</li>\n<li>早期没有前端的技术支持客服，在这两个产品推广之际，也需要负责一些技术支持和客户对接的工作。</li>\n</ul>\n<p>}</p>\n<p>@card{</p>\n<p><strong>④ 小游戏H5开发（<a href=\"https://github.com/MJPiero/catchzongzi/）\" target=\"_blank\" rel=\"noopener\">https://github.com/MJPiero/catchzongzi/）</a></strong><br>在新浪江西的时候做的活动页比较多，活动页注重页面效果比较多，转盘抽奖，心理测试，拼图，照片处理，接金币，大富翁一类的游戏都有做过一些。</p>\n<ul>\n<li>早期是基于原生js canvas写简单的活动页面，也写过接金币这类游戏，但是原生的优化做的不好，移动端设备兼容性不佳，之后使用createJS比较多，开发出来也更稳定一些。</li>\n<li>根据微信公众开发平台提供的文档和接口，开发微信公众平台相关功能。例如分享，拍照，音频播放，获取微信用户信息等。</li>\n</ul>\n<p>}</p>\n<p>@card{</p>\n<p><strong>⑤ 基于ThinkPHP + Angular 独立开发页面编辑工具</strong><br>这个是运营那边的一个需求，每周会发一个邮件，内容大概是产品相关的动态，早期是人工修改，后期学习了一下TP的框架，能够简单的搭建一些小的平台，这个工具不用连接数据库，而是直接通过tp模板写入数据，渲染生成一个静态的html页面，可下载保存该html页面使用。</p>\n<p>}</p>\n<p>@card{</p>\n<p><strong>⑥ MobUI &amp; 前端规范</strong><br>这个是针对前端团队发展的，也是前端组成员们共同维护拓展的项目。MobUI是基于iview UI框架做的业务类组件拓展，由于后期商业化产品比较多，所以将商业化业务的功能模块封装成组件或者模板。<br>同样还包括了mob-base基础架构，方便组员快速搭建一个商业化平台项目。然后还放入了一些设计类主题，和设计组合作，将平时项目中一些交互性设计效果引入，单独作为一个theme可在mob-base中直接引用。<br>再者就是一些前端规范，git提交规范，部署规范等一些规范流程文档。</p>\n<p>}</p>\n<h2 id=\"技能专长\"><a href=\"#技能专长\" class=\"headerlink\" title=\"技能专长\"></a>技能专长</h2><p>@card{</p>\n<p>精通JavaScript，HTML/CSS，以及VUE、Angular等前端框架开发，对后端开发较为了解，对php，nodejs都较为熟悉，也有简单开发过一些小平台。<br>Hybird App开发项目较少，REACT、小程序都比较了解，但是主要还是做平台系统比较多。Webpack、gulp等构建工具都很熟悉，熟悉移动端开发。<br>擅长PS，Sketch等设计工具，以及Motion，AE等音频软件。</p>\n<p>}</p>\n<h2 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h2><p>@card{</p>\n<p>三年多的前端开发经验，而半年的网站设计经验让我能够更好的从交互设计的角度去完善前端的项目。<br>为人勤勉好学，擅长与人沟通，对工作饱含热情，工作生活中，都善于表达自己的想法观点，能从产品和用户体验等多个角度去看待问题，协助团队去更好的完善项目。前端行业是个飞速更新发展的行业，我认为要做好前端的工作，更需要多方面的学习和了解。</p>\n<p>}</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h2><p>@card{</p>\n<p>姓   名：     马 婧<br>联系方式：     13032171092<br>邮   箱：     <a href=\"mailto:merlu.majing@gmail.com\" target=\"_blank\" rel=\"noopener\">merlu.majing@gmail.com</a><br>出生年月：    1992.05.08<br>学   历：     本 科<br>个人主页：    <a href=\"http://www.mjpiero.cc/\">http://www.mjpiero.cc/</a><br>Github：     <a href=\"https://github.com/MJPiero/\" target=\"_blank\" rel=\"noopener\">https://github.com/MJPiero/</a></p>\n<p>}</p>\n<h2 id=\"教育背景\"><a href=\"#教育背景\" class=\"headerlink\" title=\"教育背景\"></a>教育背景</h2><p>@card{</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">时间</th>\n<th style=\"text-align:center\">学校</th>\n<th style=\"text-align:center\">专业</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">2009.09-2013.07</td>\n<td style=\"text-align:center\">南开大学滨海学院</td>\n<td style=\"text-align:center\">计算机科学系影视动画专业</td>\n</tr>\n</tbody>\n</table>\n<p>}</p>\n<h2 id=\"工作经验\"><a href=\"#工作经验\" class=\"headerlink\" title=\"工作经验\"></a>工作经验</h2><p>@card{</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">时间</th>\n<th style=\"text-align:center\">公司</th>\n<th style=\"text-align:center\">职位</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">2015.05 - 至今</td>\n<td style=\"text-align:center\">游族网络Mob云平台</td>\n<td style=\"text-align:center\">资深前端开发工程师</td>\n</tr>\n</tbody>\n</table>\n<p>游族网络Mob云平台（<a href=\"http://www.mob.com/）\" target=\"_blank\" rel=\"noopener\">http://www.mob.com/）</a> 前期是Mob移动开发者服务平台，如今引入大数据相关分析和研究，致力于打造全景数据服务平台。由于在此部门任职时间较长，根据部门发展的不同阶段，所负责和承担的职责也有所不同。<br><strong>—— 早期 ——</strong></p>\n<ul>\n<li>Mob官网 以及 相关开发者服务平台 的开发，以及 其他内部UI平台工具 的开发（Angular 为主） 。</li>\n<li>客户端内嵌组件，以及第三方Web JSSDK，例如 webshare（shareSDK web版本） 和 mobLink （<a href=\"http://moblink.mob.com/）\" target=\"_blank\" rel=\"noopener\">http://moblink.mob.com/）</a> 等等。</li>\n<li>微信公众号相关开发，一些h5小游戏或者一些活动推广页面。</li>\n<li>Apicloud、phoneGap（Cordova）等相关Hybird App平台开发，当时和其他部门合作开发的电商相关的项目，功能较简单直白，一方面用作客户端功能案例，另一方面用作内部工具开发使用。</li>\n</ul>\n<p><strong>—— 后期 ——</strong></p>\n<ul>\n<li>MobData（大数据服务）相关商业化产品开发和维护，例如 统计SDK（<a href=\"http://analysdk.mob.com/）\" target=\"_blank\" rel=\"noopener\">http://analysdk.mob.com/）</a> 等项目（Vue为主）    。</li>\n<li>内部工具微信小程序开发。部门小程序相关的项目不多，主要是为了支持sharesdk做一些内部测试，做过一些简单的小程序。</li>\n<li>前端组管理。前端组组员的工作分配，协助处理和沟通各种问题。制定前端组开规范和流程，搭建统一开发环境，对组员开发内容质量检测，加强团队间沟通交流，组织学习分享会。和各个项目产品以及PM沟通去制定前端相关的优化方案。</li>\n</ul>\n<p>}</p>\n<p>@card{</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">时间</th>\n<th style=\"text-align:center\">公司</th>\n<th style=\"text-align:center\">职位</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">2014.04 - 2015.04</td>\n<td style=\"text-align:center\">新浪江西</td>\n<td style=\"text-align:center\">Web前端开发</td>\n</tr>\n</tbody>\n</table>\n<p>新浪江西（<a href=\"http://jx.sina.com.cn/）\" target=\"_blank\" rel=\"noopener\">http://jx.sina.com.cn/）</a> 新浪旗下江西地方站门户网站。</p>\n<ul>\n<li>新浪江西门户网站维护和更新，相关模块的开发。</li>\n<li>活动推广页面开发。门户网站一些线上线下活动推广页面，例如抽奖、投票、集赞、转发等相关活动推广页面的开发，重点在于页面的各种效果展示。</li>\n</ul>\n<p>}</p>\n<p>@card{</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">时间</th>\n<th style=\"text-align:center\">公司</th>\n<th style=\"text-align:center\">职位</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">2013.11- 2014.04</td>\n<td style=\"text-align:center\">南昌维网数字传媒有限公司</td>\n<td style=\"text-align:center\">网站美术设计</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>电商相关网站美术UI设计，网页切图，编写静态HTML页面。</li>\n<li>公司线下推广海报平面设计，简单的推广视频效果制作。</li>\n<li>网站Flash交互效果设计和编写，基本AS脚本编写。</li>\n</ul>\n<p>}</p>\n<h2 id=\"项目经验\"><a href=\"#项目经验\" class=\"headerlink\" title=\"项目经验\"></a>项目经验</h2><p>@card{</p>\n<p><strong>① 统计SDK &amp; Mob Game 游戏解决方案平台（<a href=\"http://analysdk.mob.com/）\" target=\"_blank\" rel=\"noopener\">http://analysdk.mob.com/）</a></strong><br>统计SDK平台是个通用版本（<a href=\"http://analy.mob.com/）\" target=\"_blank\" rel=\"noopener\">http://analy.mob.com/）</a>, 基于MobData大数据服务对采集到的用户数据和行为埋点进行计算分析，并通过图表展示出来。统计SDK平台是该项目的一期开发，后基于该平台做了一个针对游戏行业定制化的数据分析平台，既Mob Game 游戏解决方案平台（<a href=\"http://g.analy.mob.com/）。\" target=\"_blank\" rel=\"noopener\">http://g.analy.mob.com/）。</a></p>\n<ul>\n<li>从这个项目开始使用Vue框架，独立完成该项目的多个版本的开发和维护，以及web端jssdk开发。</li>\n<li>在开发过程中也对Vue框架做了一系列的拓展，例如Vue+webpack单页面基础的脚手架，基于Vue的一些组件定制，例如单选多选的下拉组件，Loading、Modal的定制化组件等。</li>\n<li>从该项目下提取一套UI样式，以及针对echart定制一些图表样式可以直接配置引用。</li>\n<li>后期功能的优化，监测以及重构。</li>\n</ul>\n<p>}</p>\n<p>@card{</p>\n<p><strong>② 基于NodeJS重构Mob官网（<a href=\"http://www.mob.com/）\" target=\"_blank\" rel=\"noopener\">http://www.mob.com/）</a></strong><br>Mob官网是在Mob部门最开始接触的项目，早期部门前端人员缺乏，官网是PHP后端渲染的开发模式，一开始先是改成前后端分离的模式，基于Angular 1.x框架开发的，后因为老的接口处理比较繁杂，便尝试基于express搭建了网站服务，对老接口的数据进行处理和过滤，再渲染前端页面。</p>\n<ul>\n<li>基于express搭建网站服务，构建gulp+angular多页面应用框架，简单编写路由，以及域名代理脚本配置文件，方便后期维护和添加新的页面。</li>\n<li>去爬取接口数据，并进行处理和过滤，前端基于Angular 1.x渲染页面。</li>\n<li>结合mysql开发一些简单的表单提交功能。主要是页面上一些简单的报名系统。</li>\n<li>使用sass定制化网页皮肤主题。</li>\n<li>产品页动效设计展示，使用SnapSVG做一些简单页面动效，icon变换等。以及运用一些canvas js类库去生成矢量动画。</li>\n</ul>\n<p>}</p>\n<p>@card{</p>\n<p><strong>③ 第三方JSSDK开发（<a href=\"http://moblink.mob.com/）\" target=\"_blank\" rel=\"noopener\">http://moblink.mob.com/）</a></strong><br>Mob有个ShareSDK社会化分享产品，最开始是先开发了sharesdk web版本（webshare），集成各大社交平台第三方分享接口，实现一键分享各个社交平台。之后又有了moblink产品，从web直接打开App内页，并且实现web和App互通通信。后期开发的cmssdk，bbssdk都是根据客户端要求开发，功能定制化一些。</p>\n<ul>\n<li>Webshare是使用grunt构建，打包压缩成jssdk产品。原生js开发，仿照jq的一些类库封装了一些常用的方法，如http请求，dom选择器等。</li>\n<li>MobLink是使用gulp构建，打包压缩成jssdk产品。之后重构了一个es6版本，使用webpack打包压缩。之后不断对产品优化，采集设备信息，写了一些方便自测的demo。</li>\n<li>早期没有前端的技术支持客服，在这两个产品推广之际，也需要负责一些技术支持和客户对接的工作。</li>\n</ul>\n<p>}</p>\n<p>@card{</p>\n<p><strong>④ 小游戏H5开发（<a href=\"https://github.com/MJPiero/catchzongzi/）\" target=\"_blank\" rel=\"noopener\">https://github.com/MJPiero/catchzongzi/）</a></strong><br>在新浪江西的时候做的活动页比较多，活动页注重页面效果比较多，转盘抽奖，心理测试，拼图，照片处理，接金币，大富翁一类的游戏都有做过一些。</p>\n<ul>\n<li>早期是基于原生js canvas写简单的活动页面，也写过接金币这类游戏，但是原生的优化做的不好，移动端设备兼容性不佳，之后使用createJS比较多，开发出来也更稳定一些。</li>\n<li>根据微信公众开发平台提供的文档和接口，开发微信公众平台相关功能。例如分享，拍照，音频播放，获取微信用户信息等。</li>\n</ul>\n<p>}</p>\n<p>@card{</p>\n<p><strong>⑤ 基于ThinkPHP + Angular 独立开发页面编辑工具</strong><br>这个是运营那边的一个需求，每周会发一个邮件，内容大概是产品相关的动态，早期是人工修改，后期学习了一下TP的框架，能够简单的搭建一些小的平台，这个工具不用连接数据库，而是直接通过tp模板写入数据，渲染生成一个静态的html页面，可下载保存该html页面使用。</p>\n<p>}</p>\n<p>@card{</p>\n<p><strong>⑥ MobUI &amp; 前端规范</strong><br>这个是针对前端团队发展的，也是前端组成员们共同维护拓展的项目。MobUI是基于iview UI框架做的业务类组件拓展，由于后期商业化产品比较多，所以将商业化业务的功能模块封装成组件或者模板。<br>同样还包括了mob-base基础架构，方便组员快速搭建一个商业化平台项目。然后还放入了一些设计类主题，和设计组合作，将平时项目中一些交互性设计效果引入，单独作为一个theme可在mob-base中直接引用。<br>再者就是一些前端规范，git提交规范，部署规范等一些规范流程文档。</p>\n<p>}</p>\n<h2 id=\"技能专长\"><a href=\"#技能专长\" class=\"headerlink\" title=\"技能专长\"></a>技能专长</h2><p>@card{</p>\n<p>精通JavaScript，HTML/CSS，以及VUE、Angular等前端框架开发，对后端开发较为了解，对php，nodejs都较为熟悉，也有简单开发过一些小平台。<br>Hybird App开发项目较少，REACT、小程序都比较了解，但是主要还是做平台系统比较多。Webpack、gulp等构建工具都很熟悉，熟悉移动端开发。<br>擅长PS，Sketch等设计工具，以及Motion，AE等音频软件。</p>\n<p>}</p>\n<h2 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h2><p>@card{</p>\n<p>三年多的前端开发经验，而半年的网站设计经验让我能够更好的从交互设计的角度去完善前端的项目。<br>为人勤勉好学，擅长与人沟通，对工作饱含热情，工作生活中，都善于表达自己的想法观点，能从产品和用户体验等多个角度去看待问题，协助团队去更好的完善项目。前端行业是个飞速更新发展的行业，我认为要做好前端的工作，更需要多方面的学习和了解。</p>\n<p>}</p>\n"},{"title":"Tags","layout":"tags","noDate":true,"comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\nlayout: tags\nnoDate: true\ncomments: false\n---\n","date":"2018-08-21T13:36:30.015Z","updated":"2016-10-27T08:08:50.000Z","path":"tags/index.html","_id":"cjleqs1pd002rq3v39um2waoz","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"浅谈对VUE的理解","_content":"\n有必要重新细细的看一遍vue的官方指南，对vue深入浅出的理解，一级对前端的一些概念的标注。现大致整理一下：\n\n## 前期需要了解的一些前端术语\n- __模块化开发：__ [js模块化规范总结](http://www.mjpiero.cc/2018/08/29/js%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83%E6%80%BB%E7%BB%93/)\n- __渐进式框架：__ 简单的说就是不会过多依赖框架本身主张或者要求的东西。通俗点解释，比如有Angular、React、Vue三个公寓。你要住Angular的公寓，你带了个自己的电吹风，结果发现房子里没有任何插座，你只能用公寓内自己安装电吹风。那换React的公寓，嗯，有插座了，你可以用自己的电吹风了，但是你发现公寓自己的电吹风是XXX高端牌子，然后你还是选择用公寓自己的电吹风。这下住进Vue的公寓，你发现很自由啊，公寓里面有各种电器，但是都是可以拆卸更换的，你可以完全随着自己的喜好去选择使用自己的还是他们公寓内部的。好了，完整一些的解释还是看知乎的解答：[Vue2.0 中，“渐进式框架”和“自底向上增量开发的设计”这两个概念是什么？](https://www.zhihu.com/question/51907207)。\n- __Virtual DOM：__ ","source":"_drafts/浅谈对VUE的理解.md","raw":"---\ntitle: 浅谈对VUE的理解\ntags: [vue]\ncategories: [vue]\n---\n\n有必要重新细细的看一遍vue的官方指南，对vue深入浅出的理解，一级对前端的一些概念的标注。现大致整理一下：\n\n## 前期需要了解的一些前端术语\n- __模块化开发：__ [js模块化规范总结](http://www.mjpiero.cc/2018/08/29/js%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83%E6%80%BB%E7%BB%93/)\n- __渐进式框架：__ 简单的说就是不会过多依赖框架本身主张或者要求的东西。通俗点解释，比如有Angular、React、Vue三个公寓。你要住Angular的公寓，你带了个自己的电吹风，结果发现房子里没有任何插座，你只能用公寓内自己安装电吹风。那换React的公寓，嗯，有插座了，你可以用自己的电吹风了，但是你发现公寓自己的电吹风是XXX高端牌子，然后你还是选择用公寓自己的电吹风。这下住进Vue的公寓，你发现很自由啊，公寓里面有各种电器，但是都是可以拆卸更换的，你可以完全随着自己的喜好去选择使用自己的还是他们公寓内部的。好了，完整一些的解释还是看知乎的解答：[Vue2.0 中，“渐进式框架”和“自底向上增量开发的设计”这两个概念是什么？](https://www.zhihu.com/question/51907207)。\n- __Virtual DOM：__ ","slug":"浅谈对VUE的理解","published":0,"date":"2018-08-29T02:09:38.527Z","updated":"2018-08-29T10:44:30.075Z","_id":"cjleqs1nh0000q3v39i0qomw5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>有必要重新细细的看一遍vue的官方指南，对vue深入浅出的理解，一级对前端的一些概念的标注。现大致整理一下：</p>\n<h2 id=\"前期需要了解的一些前端术语\"><a href=\"#前期需要了解的一些前端术语\" class=\"headerlink\" title=\"前期需要了解的一些前端术语\"></a>前期需要了解的一些前端术语</h2><ul>\n<li><strong>模块化开发：</strong> <a href=\"http://www.mjpiero.cc/2018/08/29/js%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83%E6%80%BB%E7%BB%93/\">js模块化规范总结</a></li>\n<li><strong>渐进式框架：</strong> 简单的说就是不会过多依赖框架本身主张或者要求的东西。通俗点解释，比如有Angular、React、Vue三个公寓。你要住Angular的公寓，你带了个自己的电吹风，结果发现房子里没有任何插座，你只能用公寓内自己安装电吹风。那换React的公寓，嗯，有插座了，你可以用自己的电吹风了，但是你发现公寓自己的电吹风是XXX高端牌子，然后你还是选择用公寓自己的电吹风。这下住进Vue的公寓，你发现很自由啊，公寓里面有各种电器，但是都是可以拆卸更换的，你可以完全随着自己的喜好去选择使用自己的还是他们公寓内部的。好了，完整一些的解释还是看知乎的解答：<a href=\"https://www.zhihu.com/question/51907207\" target=\"_blank\" rel=\"noopener\">Vue2.0 中，“渐进式框架”和“自底向上增量开发的设计”这两个概念是什么？</a>。</li>\n<li><strong>Virtual DOM：</strong> </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>有必要重新细细的看一遍vue的官方指南，对vue深入浅出的理解，一级对前端的一些概念的标注。现大致整理一下：</p>\n<h2 id=\"前期需要了解的一些前端术语\"><a href=\"#前期需要了解的一些前端术语\" class=\"headerlink\" title=\"前期需要了解的一些前端术语\"></a>前期需要了解的一些前端术语</h2><ul>\n<li><strong>模块化开发：</strong> <a href=\"http://www.mjpiero.cc/2018/08/29/js%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83%E6%80%BB%E7%BB%93/\">js模块化规范总结</a></li>\n<li><strong>渐进式框架：</strong> 简单的说就是不会过多依赖框架本身主张或者要求的东西。通俗点解释，比如有Angular、React、Vue三个公寓。你要住Angular的公寓，你带了个自己的电吹风，结果发现房子里没有任何插座，你只能用公寓内自己安装电吹风。那换React的公寓，嗯，有插座了，你可以用自己的电吹风了，但是你发现公寓自己的电吹风是XXX高端牌子，然后你还是选择用公寓自己的电吹风。这下住进Vue的公寓，你发现很自由啊，公寓里面有各种电器，但是都是可以拆卸更换的，你可以完全随着自己的喜好去选择使用自己的还是他们公寓内部的。好了，完整一些的解释还是看知乎的解答：<a href=\"https://www.zhihu.com/question/51907207\" target=\"_blank\" rel=\"noopener\">Vue2.0 中，“渐进式框架”和“自底向上增量开发的设计”这两个概念是什么？</a>。</li>\n<li><strong>Virtual DOM：</strong> </li>\n</ul>\n"},{"title":"初了解vue&vuex 这很接地气","_content":"\n在某个深夜，我失眠到了凌晨3点，没想别的什么，而是被这类代码占据，恨不得立刻爬起来打开电脑，洒脱的码上上万条语句，这......肯定是老大在我睡梦中督促着我要好好工作。\n\n好了言归正传。\n\n网络上对于[vuex](https://vuex.vuejs.org/zh-cn/)这套__状态管理模式__已经有不少介绍的文章了。包括小伙伴们也有写相关的分享文，对这套体系简单剖析过一遍。然而在一开始接触的时候我还是绕了不少弯子。至于为什么说接地气，因为我才接触vue和vuex三天的样子。而且我理论知识不稳固，肯定探讨不出什么高深的学术性的东西，此文只是大概介绍一下我在运用时候遇到的一些坑吧。\n# [Vue](https://cn.vuejs.org/)\n这个运用的融会贯通的人大有人在，我一个才用了三天的人就不详细说了。在这之前我一直用的angular v1.x（之后都称呼ng v1.x），之前有小哥问我为什么不用vue，当时我说了感觉vue有些不伦不类，像是ng和react的结合体。嗯，我有时候很脑残，这些话都当我没说过。\n\n很多人觉得vue和ng有很相似的地方。是不是呢，当然我没去研究ng v2.x+的框架，从ng v1.x的角度上来看，两个框架差异还是相当大的。\n\nng像是一个工厂，在ng-app内，按照不同的功能来划分体系，模块和模块之间也能通过ng的规则联系在一起。虽然也有组件化的体系，通过scope来独立区域，但是组件和组件之前有提供信息传递的方法，就像工厂里面的传送带一样，任何一个区域都可以相互传递信息（反正在我脑子里记不住那些概念，但是对于ng大概就是这么理解的）。vue则更像是一个公寓大楼。component是一间间的房间，相互独立，可以像积木一样，一层层堆积拼接。但是并没有和ng那样相对比较完善的信息传递机制。\n\n所以之前小易有问我ng v1.x有木有什么状态管理的架构。这之后我才知道的，ng v1.x应该是不需要额外的去搭建一个状态管理模式。","source":"_drafts/初了解vue-vuex-这很接地气.md","raw":"---\ntitle: 初了解vue&vuex 这很接地气\ntags: [vue]\ncategories: [vue]\n---\n\n在某个深夜，我失眠到了凌晨3点，没想别的什么，而是被这类代码占据，恨不得立刻爬起来打开电脑，洒脱的码上上万条语句，这......肯定是老大在我睡梦中督促着我要好好工作。\n\n好了言归正传。\n\n网络上对于[vuex](https://vuex.vuejs.org/zh-cn/)这套__状态管理模式__已经有不少介绍的文章了。包括小伙伴们也有写相关的分享文，对这套体系简单剖析过一遍。然而在一开始接触的时候我还是绕了不少弯子。至于为什么说接地气，因为我才接触vue和vuex三天的样子。而且我理论知识不稳固，肯定探讨不出什么高深的学术性的东西，此文只是大概介绍一下我在运用时候遇到的一些坑吧。\n# [Vue](https://cn.vuejs.org/)\n这个运用的融会贯通的人大有人在，我一个才用了三天的人就不详细说了。在这之前我一直用的angular v1.x（之后都称呼ng v1.x），之前有小哥问我为什么不用vue，当时我说了感觉vue有些不伦不类，像是ng和react的结合体。嗯，我有时候很脑残，这些话都当我没说过。\n\n很多人觉得vue和ng有很相似的地方。是不是呢，当然我没去研究ng v2.x+的框架，从ng v1.x的角度上来看，两个框架差异还是相当大的。\n\nng像是一个工厂，在ng-app内，按照不同的功能来划分体系，模块和模块之间也能通过ng的规则联系在一起。虽然也有组件化的体系，通过scope来独立区域，但是组件和组件之前有提供信息传递的方法，就像工厂里面的传送带一样，任何一个区域都可以相互传递信息（反正在我脑子里记不住那些概念，但是对于ng大概就是这么理解的）。vue则更像是一个公寓大楼。component是一间间的房间，相互独立，可以像积木一样，一层层堆积拼接。但是并没有和ng那样相对比较完善的信息传递机制。\n\n所以之前小易有问我ng v1.x有木有什么状态管理的架构。这之后我才知道的，ng v1.x应该是不需要额外的去搭建一个状态管理模式。","slug":"初了解vue-vuex-这很接地气","published":0,"date":"2018-08-23T03:57:30.319Z","updated":"2018-08-23T08:45:44.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjleqs1nn0002q3v3ppa6bnmz","content":"<p>在某个深夜，我失眠到了凌晨3点，没想别的什么，而是被这类代码占据，恨不得立刻爬起来打开电脑，洒脱的码上上万条语句，这……肯定是老大在我睡梦中督促着我要好好工作。</p>\n<p>好了言归正传。</p>\n<p>网络上对于<a href=\"https://vuex.vuejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">vuex</a>这套<strong>状态管理模式</strong>已经有不少介绍的文章了。包括小伙伴们也有写相关的分享文，对这套体系简单剖析过一遍。然而在一开始接触的时候我还是绕了不少弯子。至于为什么说接地气，因为我才接触vue和vuex三天的样子。而且我理论知识不稳固，肯定探讨不出什么高深的学术性的东西，此文只是大概介绍一下我在运用时候遇到的一些坑吧。</p>\n<h1 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a><a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">Vue</a></h1><p>这个运用的融会贯通的人大有人在，我一个才用了三天的人就不详细说了。在这之前我一直用的angular v1.x（之后都称呼ng v1.x），之前有小哥问我为什么不用vue，当时我说了感觉vue有些不伦不类，像是ng和react的结合体。嗯，我有时候很脑残，这些话都当我没说过。</p>\n<p>很多人觉得vue和ng有很相似的地方。是不是呢，当然我没去研究ng v2.x+的框架，从ng v1.x的角度上来看，两个框架差异还是相当大的。</p>\n<p>ng像是一个工厂，在ng-app内，按照不同的功能来划分体系，模块和模块之间也能通过ng的规则联系在一起。虽然也有组件化的体系，通过scope来独立区域，但是组件和组件之前有提供信息传递的方法，就像工厂里面的传送带一样，任何一个区域都可以相互传递信息（反正在我脑子里记不住那些概念，但是对于ng大概就是这么理解的）。vue则更像是一个公寓大楼。component是一间间的房间，相互独立，可以像积木一样，一层层堆积拼接。但是并没有和ng那样相对比较完善的信息传递机制。</p>\n<p>所以之前小易有问我ng v1.x有木有什么状态管理的架构。这之后我才知道的，ng v1.x应该是不需要额外的去搭建一个状态管理模式。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在某个深夜，我失眠到了凌晨3点，没想别的什么，而是被这类代码占据，恨不得立刻爬起来打开电脑，洒脱的码上上万条语句，这……肯定是老大在我睡梦中督促着我要好好工作。</p>\n<p>好了言归正传。</p>\n<p>网络上对于<a href=\"https://vuex.vuejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">vuex</a>这套<strong>状态管理模式</strong>已经有不少介绍的文章了。包括小伙伴们也有写相关的分享文，对这套体系简单剖析过一遍。然而在一开始接触的时候我还是绕了不少弯子。至于为什么说接地气，因为我才接触vue和vuex三天的样子。而且我理论知识不稳固，肯定探讨不出什么高深的学术性的东西，此文只是大概介绍一下我在运用时候遇到的一些坑吧。</p>\n<h1 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a><a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">Vue</a></h1><p>这个运用的融会贯通的人大有人在，我一个才用了三天的人就不详细说了。在这之前我一直用的angular v1.x（之后都称呼ng v1.x），之前有小哥问我为什么不用vue，当时我说了感觉vue有些不伦不类，像是ng和react的结合体。嗯，我有时候很脑残，这些话都当我没说过。</p>\n<p>很多人觉得vue和ng有很相似的地方。是不是呢，当然我没去研究ng v2.x+的框架，从ng v1.x的角度上来看，两个框架差异还是相当大的。</p>\n<p>ng像是一个工厂，在ng-app内，按照不同的功能来划分体系，模块和模块之间也能通过ng的规则联系在一起。虽然也有组件化的体系，通过scope来独立区域，但是组件和组件之前有提供信息传递的方法，就像工厂里面的传送带一样，任何一个区域都可以相互传递信息（反正在我脑子里记不住那些概念，但是对于ng大概就是这么理解的）。vue则更像是一个公寓大楼。component是一间间的房间，相互独立，可以像积木一样，一层层堆积拼接。但是并没有和ng那样相对比较完善的信息传递机制。</p>\n<p>所以之前小易有问我ng v1.x有木有什么状态管理的架构。这之后我才知道的，ng v1.x应该是不需要额外的去搭建一个状态管理模式。</p>\n"},{"title":"CSS相对单位","date":"2018-08-24T07:14:30.000Z","_content":"\n\n现在一提到响应式布局，css相对单位，相信众多前端行业的小可爱们都知道`em|rem`，再者是现在大家都比较熟知的`视口单位 vh|vw`。\nemm...在说这些之前，让我们回顾一下CSS单位的历史。\n\n## 早期 Pixel (px)\n在web环境下，用户可以将浏览器窗口设置成任意大小，CSS需要去适应它，而且用户在打开一个页面之后，还会再去调整它的大小，CSS也需要去适应这些条件。由此我们可以知道，在创建页面的时候，样式并没有被调用，而是当页面开始渲染时，浏览器才会去计算样式的规则。\n\n那么早些时候是如何解决设备窗口自适应的问题呢。\n\n早些时候，我们的设计大大们就想出了`完美像素设计`，解放了前端工程师们的双手，设计师们会创建一个有效宽度的容器，例如800px-950px宽的居中纵向列，也这个为基准再进行设计，这跟他们在原生应用程序或印刷出版物中做的设计或多或少有点类似。\n\n然后后来，有多年经验的前端应该能感受到，显示屏的分辨率越来越大，之前的950px的有效宽度开始延伸到1024px，但是兼容小分辨率屏幕使得这个问题变得不可解。而使得开发者不得不放弃“完美像素”设计的起因，是因为智能手机的普及。\n\n于是，`响应式设计`应运而生！！\n\n>响应式 —— 在CSS中，这指的针对不同大小的浏览器窗口，用不同的方式响应更新页面的样式。我们要对不同尺寸的手机、平板电脑或桌面显示器多花心思了。我们将在第8章中详细介绍响应式设计，但在本章中，我会先给大家介绍一些重要的基础概念。\n\n开发人员曾经的宠儿（px）就要下线了。这里要提一下，CSS里1像素并不严格等同于显示器的1像素，在高分辨率显示器上更加明显。尽管根据浏览器、操作系统和硬件的不同，CSS的测量值可能会有细微的差别，但96px总是会大致等于屏幕上的物理1英寸。\n\n## em 的用法\n先来看看em，em是最为常见的相对长度单位，基准是当前元素的`字号大小（font-size）`，例如：\n```\n.box {\n  font-size: 16px;\n  padding: 1em; // padding: 16px;          \n}\n```\n把padding赋值为1em，乘以字号，得到一个值为16px的padding渲染值，因为该元素的字号是16px，以此类推要2em = 16px * 2 = 32px; 使用相对单位声明的值会由浏览器转化为一个绝对值，我们称之为`计算值`。\n\n### em 通常用法\n在设置padding、height、width或border-radius等属性时，使用em可能会很方便，因为如果它们继承了不同的字号大小，或者用户更改了字体设置，这些属性会均匀地缩放。\n可以测试看看效果，熟悉一下不同盒子下em的用法。\nHTML:\n```\n<span class=\"box box-small\">Small</span>\n<span class=\"box box-large\">Large</span>\n```\n\nCSS:\n```\n.box {\n  padding: 1em;\n  border-radius: 1em;\n  background-color: lightgray;\n}\n.box-small {\n  font-size: 14px;              \n}\n.box-large {\n  font-size: 16px;              \n}\n```\n\n### 用于font-size\nem是基于font-size去计算的，那么如果用在font-size上呢？\n```\n<body>\n  <p class=\"box\">猜猜我的字号是多少？</p>\n</body>\n\n// css\n.box{\n    font-size: 1.2em;\n}\n```\n上面这种情况，em会以`父元素`的字号为基准，例如box的父元素是body，则会以body的font-size大小为基准。一般情况下我们会声明body的字号大小，如果没有声明，则以浏览器的默认样式为主\n通常情况下浏览器有默认的css样式，每个默认的样式都是不同的，看看下面例子：\n```\nbody {\n  font-size: 16px;\n}\n.box {\n  font-size: 1.2em;     // 19.2px          \n  padding: 1.2em;       // 23.04px        \n  background-color: #ccc;\n}\n```\nbox的font-size是基于body的字号大小计算的，而padding则是基于box的font-size计算的，所以是19.2 * 1.2 = 23.04px。\n>可以尝试用em去做多层的嵌套列表，可以做出字号层层收缩的效果，例如ul，li列表。\n\n## rem 的用法\nrem 顾名思义是 root em 的缩写，和em不同的是，em是依赖当前元素，而rem是和根元素关联的。\n说到根元素，大家可以先认识一下一个特别的伪类选择器 - `:root`\n```\n:root {                    /* 等同于 html 选择器 */\n  font-size: 1em;      // 16px,浏览器的默认字号大小\n}\nul {\n  font-size: .8rem;     // 16 * 0.8 = 12.8px\n}\n```\n在这里 0.8rem 无论放在什么地方，都等同于0.8倍的根元素的字号大小。\n\n很简单吧~ 当然rem也好em也好都只是一种方式，如果去搭配使用还是要看个人对页面布局的理解。比如说，对font-size使用rem，因为现在很多浏览器可以通过ctrl- 和 Ctrl+ 对页面进行缩放，rem只依赖根元素，这样不会产生字号收缩的问题，字号大小变得可预测。而对padding、margin、border-radius等使用em则会更好，因为这些度量方式只是针对当前的元素来看的。在然后border的宽度则用px比较好，因为边框这个一般不会根据页面放缩去做计算的。\n\n## 视口单位 vh | vm\n我们知道em和rem都是以font-size为基准的，而视口单位是依靠浏览器的视口大小来定义长度的。\n>视口（viewport） —— 在浏览器窗口中用来渲染页面的可视区域，这不包括浏览器的地址栏、工具栏、状态栏等（如果有的话）。\n__常见的视口单位：__\n- vh —— 视口高度的1/100\n- vw —— 视口宽度的1/100\n- vmin —— 视区宽度或高度较小值的1/100（IE9支持的是vm）\n- vmax —— 视区宽度或高度较大值的1/100（在写本书时，IE或者Edge都不支持）\n\n举个例子，50vw等于视口宽度的一半，而50vh等于视口高度的50%。vmin依赖两者（宽或高）的较小值，如果我们需要确保一个元素不管在横屏还是竖屏下适应屏幕展示的话，这个属性会很有帮助：如果是横屏，vmin的基准值是屏幕的高度，如果是竖屏，它的基准值是屏幕的宽度。\n```\n.box {\n  width: 90vmin;\n  height: 90vmin;\n  background-color: #369;\n}\n```\n这里笔者就不截图了，大家试试看就知道了（笑）。\n\n### vw用于font-size\n同样我们来看看视口单位用在字号上会发生什么。\n加入我们设置一个元素的font-size: 2vm；会怎么样呢。假设PC屏幕宽 1400px，那么2vm等于28px，pad的屏幕768px宽，2vm等于15px。可以看出问题了吧~ 28px的字体对于PC来说太大了，而这个你放到手机屏幕上，经过计算字号会小于10px，这个效果就不太好了。\n\n这样我们就有个新的方法！！！\n\n### calc()\ncalc()函数支持对2个或者更多个数值进行基础的运算。\n>注意：使用加减运算的时候左右必须要有空格，例如calc(3em + 16px)。\n好了为了解决vw在font-size使用造成的漏洞，我们可以尝试：\n```\n:root {\n  font-size: calc(0.5em + 1vw);\n}\n```\n0.5em这里表示字号的最小值，1vw代表根据设备宽度响应式的网上叠加，这样你就会发现字体收缩就正常多了。\n\n## 总结\n当然要实现响应式的设计，不仅仅是灵活的运用好这些相对单位，而细节上的细微的调整可能还是需要依赖媒体查询的代码，但是现在的前端开发者们要慢慢停止使用px思维去思考布局，CSS的东西看上去简单，实际上深入学习有很多意想不到的优势，需要大家多多探究，辣么，笔者就先写到这里了。","source":"_posts/CSS相对单位.md","raw":"---\ntitle: CSS相对单位\ntags:\n  - css\ncategories:\n  - css\ndate: 2018-08-24 15:14:30\n---\n\n\n现在一提到响应式布局，css相对单位，相信众多前端行业的小可爱们都知道`em|rem`，再者是现在大家都比较熟知的`视口单位 vh|vw`。\nemm...在说这些之前，让我们回顾一下CSS单位的历史。\n\n## 早期 Pixel (px)\n在web环境下，用户可以将浏览器窗口设置成任意大小，CSS需要去适应它，而且用户在打开一个页面之后，还会再去调整它的大小，CSS也需要去适应这些条件。由此我们可以知道，在创建页面的时候，样式并没有被调用，而是当页面开始渲染时，浏览器才会去计算样式的规则。\n\n那么早些时候是如何解决设备窗口自适应的问题呢。\n\n早些时候，我们的设计大大们就想出了`完美像素设计`，解放了前端工程师们的双手，设计师们会创建一个有效宽度的容器，例如800px-950px宽的居中纵向列，也这个为基准再进行设计，这跟他们在原生应用程序或印刷出版物中做的设计或多或少有点类似。\n\n然后后来，有多年经验的前端应该能感受到，显示屏的分辨率越来越大，之前的950px的有效宽度开始延伸到1024px，但是兼容小分辨率屏幕使得这个问题变得不可解。而使得开发者不得不放弃“完美像素”设计的起因，是因为智能手机的普及。\n\n于是，`响应式设计`应运而生！！\n\n>响应式 —— 在CSS中，这指的针对不同大小的浏览器窗口，用不同的方式响应更新页面的样式。我们要对不同尺寸的手机、平板电脑或桌面显示器多花心思了。我们将在第8章中详细介绍响应式设计，但在本章中，我会先给大家介绍一些重要的基础概念。\n\n开发人员曾经的宠儿（px）就要下线了。这里要提一下，CSS里1像素并不严格等同于显示器的1像素，在高分辨率显示器上更加明显。尽管根据浏览器、操作系统和硬件的不同，CSS的测量值可能会有细微的差别，但96px总是会大致等于屏幕上的物理1英寸。\n\n## em 的用法\n先来看看em，em是最为常见的相对长度单位，基准是当前元素的`字号大小（font-size）`，例如：\n```\n.box {\n  font-size: 16px;\n  padding: 1em; // padding: 16px;          \n}\n```\n把padding赋值为1em，乘以字号，得到一个值为16px的padding渲染值，因为该元素的字号是16px，以此类推要2em = 16px * 2 = 32px; 使用相对单位声明的值会由浏览器转化为一个绝对值，我们称之为`计算值`。\n\n### em 通常用法\n在设置padding、height、width或border-radius等属性时，使用em可能会很方便，因为如果它们继承了不同的字号大小，或者用户更改了字体设置，这些属性会均匀地缩放。\n可以测试看看效果，熟悉一下不同盒子下em的用法。\nHTML:\n```\n<span class=\"box box-small\">Small</span>\n<span class=\"box box-large\">Large</span>\n```\n\nCSS:\n```\n.box {\n  padding: 1em;\n  border-radius: 1em;\n  background-color: lightgray;\n}\n.box-small {\n  font-size: 14px;              \n}\n.box-large {\n  font-size: 16px;              \n}\n```\n\n### 用于font-size\nem是基于font-size去计算的，那么如果用在font-size上呢？\n```\n<body>\n  <p class=\"box\">猜猜我的字号是多少？</p>\n</body>\n\n// css\n.box{\n    font-size: 1.2em;\n}\n```\n上面这种情况，em会以`父元素`的字号为基准，例如box的父元素是body，则会以body的font-size大小为基准。一般情况下我们会声明body的字号大小，如果没有声明，则以浏览器的默认样式为主\n通常情况下浏览器有默认的css样式，每个默认的样式都是不同的，看看下面例子：\n```\nbody {\n  font-size: 16px;\n}\n.box {\n  font-size: 1.2em;     // 19.2px          \n  padding: 1.2em;       // 23.04px        \n  background-color: #ccc;\n}\n```\nbox的font-size是基于body的字号大小计算的，而padding则是基于box的font-size计算的，所以是19.2 * 1.2 = 23.04px。\n>可以尝试用em去做多层的嵌套列表，可以做出字号层层收缩的效果，例如ul，li列表。\n\n## rem 的用法\nrem 顾名思义是 root em 的缩写，和em不同的是，em是依赖当前元素，而rem是和根元素关联的。\n说到根元素，大家可以先认识一下一个特别的伪类选择器 - `:root`\n```\n:root {                    /* 等同于 html 选择器 */\n  font-size: 1em;      // 16px,浏览器的默认字号大小\n}\nul {\n  font-size: .8rem;     // 16 * 0.8 = 12.8px\n}\n```\n在这里 0.8rem 无论放在什么地方，都等同于0.8倍的根元素的字号大小。\n\n很简单吧~ 当然rem也好em也好都只是一种方式，如果去搭配使用还是要看个人对页面布局的理解。比如说，对font-size使用rem，因为现在很多浏览器可以通过ctrl- 和 Ctrl+ 对页面进行缩放，rem只依赖根元素，这样不会产生字号收缩的问题，字号大小变得可预测。而对padding、margin、border-radius等使用em则会更好，因为这些度量方式只是针对当前的元素来看的。在然后border的宽度则用px比较好，因为边框这个一般不会根据页面放缩去做计算的。\n\n## 视口单位 vh | vm\n我们知道em和rem都是以font-size为基准的，而视口单位是依靠浏览器的视口大小来定义长度的。\n>视口（viewport） —— 在浏览器窗口中用来渲染页面的可视区域，这不包括浏览器的地址栏、工具栏、状态栏等（如果有的话）。\n__常见的视口单位：__\n- vh —— 视口高度的1/100\n- vw —— 视口宽度的1/100\n- vmin —— 视区宽度或高度较小值的1/100（IE9支持的是vm）\n- vmax —— 视区宽度或高度较大值的1/100（在写本书时，IE或者Edge都不支持）\n\n举个例子，50vw等于视口宽度的一半，而50vh等于视口高度的50%。vmin依赖两者（宽或高）的较小值，如果我们需要确保一个元素不管在横屏还是竖屏下适应屏幕展示的话，这个属性会很有帮助：如果是横屏，vmin的基准值是屏幕的高度，如果是竖屏，它的基准值是屏幕的宽度。\n```\n.box {\n  width: 90vmin;\n  height: 90vmin;\n  background-color: #369;\n}\n```\n这里笔者就不截图了，大家试试看就知道了（笑）。\n\n### vw用于font-size\n同样我们来看看视口单位用在字号上会发生什么。\n加入我们设置一个元素的font-size: 2vm；会怎么样呢。假设PC屏幕宽 1400px，那么2vm等于28px，pad的屏幕768px宽，2vm等于15px。可以看出问题了吧~ 28px的字体对于PC来说太大了，而这个你放到手机屏幕上，经过计算字号会小于10px，这个效果就不太好了。\n\n这样我们就有个新的方法！！！\n\n### calc()\ncalc()函数支持对2个或者更多个数值进行基础的运算。\n>注意：使用加减运算的时候左右必须要有空格，例如calc(3em + 16px)。\n好了为了解决vw在font-size使用造成的漏洞，我们可以尝试：\n```\n:root {\n  font-size: calc(0.5em + 1vw);\n}\n```\n0.5em这里表示字号的最小值，1vw代表根据设备宽度响应式的网上叠加，这样你就会发现字体收缩就正常多了。\n\n## 总结\n当然要实现响应式的设计，不仅仅是灵活的运用好这些相对单位，而细节上的细微的调整可能还是需要依赖媒体查询的代码，但是现在的前端开发者们要慢慢停止使用px思维去思考布局，CSS的东西看上去简单，实际上深入学习有很多意想不到的优势，需要大家多多探究，辣么，笔者就先写到这里了。","slug":"CSS相对单位","published":1,"updated":"2018-08-24T07:14:30.842Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjleqs1np0003q3v3dsjq3htn","content":"<p>现在一提到响应式布局，css相对单位，相信众多前端行业的小可爱们都知道<code>em|rem</code>，再者是现在大家都比较熟知的<code>视口单位 vh|vw</code>。<br>emm…在说这些之前，让我们回顾一下CSS单位的历史。</p>\n<h2 id=\"早期-Pixel-px\"><a href=\"#早期-Pixel-px\" class=\"headerlink\" title=\"早期 Pixel (px)\"></a>早期 Pixel (px)</h2><p>在web环境下，用户可以将浏览器窗口设置成任意大小，CSS需要去适应它，而且用户在打开一个页面之后，还会再去调整它的大小，CSS也需要去适应这些条件。由此我们可以知道，在创建页面的时候，样式并没有被调用，而是当页面开始渲染时，浏览器才会去计算样式的规则。</p>\n<p>那么早些时候是如何解决设备窗口自适应的问题呢。</p>\n<p>早些时候，我们的设计大大们就想出了<code>完美像素设计</code>，解放了前端工程师们的双手，设计师们会创建一个有效宽度的容器，例如800px-950px宽的居中纵向列，也这个为基准再进行设计，这跟他们在原生应用程序或印刷出版物中做的设计或多或少有点类似。</p>\n<p>然后后来，有多年经验的前端应该能感受到，显示屏的分辨率越来越大，之前的950px的有效宽度开始延伸到1024px，但是兼容小分辨率屏幕使得这个问题变得不可解。而使得开发者不得不放弃“完美像素”设计的起因，是因为智能手机的普及。</p>\n<p>于是，<code>响应式设计</code>应运而生！！</p>\n<blockquote>\n<p>响应式 —— 在CSS中，这指的针对不同大小的浏览器窗口，用不同的方式响应更新页面的样式。我们要对不同尺寸的手机、平板电脑或桌面显示器多花心思了。我们将在第8章中详细介绍响应式设计，但在本章中，我会先给大家介绍一些重要的基础概念。</p>\n</blockquote>\n<p>开发人员曾经的宠儿（px）就要下线了。这里要提一下，CSS里1像素并不严格等同于显示器的1像素，在高分辨率显示器上更加明显。尽管根据浏览器、操作系统和硬件的不同，CSS的测量值可能会有细微的差别，但96px总是会大致等于屏幕上的物理1英寸。</p>\n<h2 id=\"em-的用法\"><a href=\"#em-的用法\" class=\"headerlink\" title=\"em 的用法\"></a>em 的用法</h2><p>先来看看em，em是最为常见的相对长度单位，基准是当前元素的<code>字号大小（font-size）</code>，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.box &#123;</span><br><span class=\"line\">  font-size: 16px;</span><br><span class=\"line\">  padding: 1em; // padding: 16px;          </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>把padding赋值为1em，乘以字号，得到一个值为16px的padding渲染值，因为该元素的字号是16px，以此类推要2em = 16px * 2 = 32px; 使用相对单位声明的值会由浏览器转化为一个绝对值，我们称之为<code>计算值</code>。</p>\n<h3 id=\"em-通常用法\"><a href=\"#em-通常用法\" class=\"headerlink\" title=\"em 通常用法\"></a>em 通常用法</h3><p>在设置padding、height、width或border-radius等属性时，使用em可能会很方便，因为如果它们继承了不同的字号大小，或者用户更改了字体设置，这些属性会均匀地缩放。<br>可以测试看看效果，熟悉一下不同盒子下em的用法。<br>HTML:<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;span class=&quot;box box-small&quot;&gt;Small&lt;/span&gt;</span><br><span class=\"line\">&lt;span class=&quot;box box-large&quot;&gt;Large&lt;/span&gt;</span><br></pre></td></tr></table></figure></p>\n<p>CSS:<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.box &#123;</span><br><span class=\"line\">  padding: 1em;</span><br><span class=\"line\">  border-radius: 1em;</span><br><span class=\"line\">  background-color: lightgray;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box-small &#123;</span><br><span class=\"line\">  font-size: 14px;              </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box-large &#123;</span><br><span class=\"line\">  font-size: 16px;              </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"用于font-size\"><a href=\"#用于font-size\" class=\"headerlink\" title=\"用于font-size\"></a>用于font-size</h3><p>em是基于font-size去计算的，那么如果用在font-size上呢？<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;p class=&quot;box&quot;&gt;猜猜我的字号是多少？&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// css</span><br><span class=\"line\">.box&#123;</span><br><span class=\"line\">    font-size: 1.2em;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面这种情况，em会以<code>父元素</code>的字号为基准，例如box的父元素是body，则会以body的font-size大小为基准。一般情况下我们会声明body的字号大小，如果没有声明，则以浏览器的默认样式为主<br>通常情况下浏览器有默认的css样式，每个默认的样式都是不同的，看看下面例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">body &#123;</span><br><span class=\"line\">  font-size: 16px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box &#123;</span><br><span class=\"line\">  font-size: 1.2em;     // 19.2px          </span><br><span class=\"line\">  padding: 1.2em;       // 23.04px        </span><br><span class=\"line\">  background-color: #ccc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>box的font-size是基于body的字号大小计算的，而padding则是基于box的font-size计算的，所以是19.2 * 1.2 = 23.04px。</p>\n<blockquote>\n<p>可以尝试用em去做多层的嵌套列表，可以做出字号层层收缩的效果，例如ul，li列表。</p>\n</blockquote>\n<h2 id=\"rem-的用法\"><a href=\"#rem-的用法\" class=\"headerlink\" title=\"rem 的用法\"></a>rem 的用法</h2><p>rem 顾名思义是 root em 的缩写，和em不同的是，em是依赖当前元素，而rem是和根元素关联的。<br>说到根元素，大家可以先认识一下一个特别的伪类选择器 - <code>:root</code><br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">:root &#123;                    /* 等同于 html 选择器 */</span><br><span class=\"line\">  font-size: 1em;      // 16px,浏览器的默认字号大小</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ul &#123;</span><br><span class=\"line\">  font-size: .8rem;     // 16 * 0.8 = 12.8px</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在这里 0.8rem 无论放在什么地方，都等同于0.8倍的根元素的字号大小。</p>\n<p>很简单吧~ 当然rem也好em也好都只是一种方式，如果去搭配使用还是要看个人对页面布局的理解。比如说，对font-size使用rem，因为现在很多浏览器可以通过ctrl- 和 Ctrl+ 对页面进行缩放，rem只依赖根元素，这样不会产生字号收缩的问题，字号大小变得可预测。而对padding、margin、border-radius等使用em则会更好，因为这些度量方式只是针对当前的元素来看的。在然后border的宽度则用px比较好，因为边框这个一般不会根据页面放缩去做计算的。</p>\n<h2 id=\"视口单位-vh-vm\"><a href=\"#视口单位-vh-vm\" class=\"headerlink\" title=\"视口单位 vh | vm\"></a>视口单位 vh | vm</h2><p>我们知道em和rem都是以font-size为基准的，而视口单位是依靠浏览器的视口大小来定义长度的。</p>\n<blockquote>\n<p>视口（viewport） —— 在浏览器窗口中用来渲染页面的可视区域，这不包括浏览器的地址栏、工具栏、状态栏等（如果有的话）。<br><strong>常见的视口单位：</strong></p>\n<ul>\n<li>vh —— 视口高度的1/100</li>\n<li>vw —— 视口宽度的1/100</li>\n<li>vmin —— 视区宽度或高度较小值的1/100（IE9支持的是vm）</li>\n<li>vmax —— 视区宽度或高度较大值的1/100（在写本书时，IE或者Edge都不支持）</li>\n</ul>\n</blockquote>\n<p>举个例子，50vw等于视口宽度的一半，而50vh等于视口高度的50%。vmin依赖两者（宽或高）的较小值，如果我们需要确保一个元素不管在横屏还是竖屏下适应屏幕展示的话，这个属性会很有帮助：如果是横屏，vmin的基准值是屏幕的高度，如果是竖屏，它的基准值是屏幕的宽度。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.box &#123;</span><br><span class=\"line\">  width: 90vmin;</span><br><span class=\"line\">  height: 90vmin;</span><br><span class=\"line\">  background-color: #369;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里笔者就不截图了，大家试试看就知道了（笑）。</p>\n<h3 id=\"vw用于font-size\"><a href=\"#vw用于font-size\" class=\"headerlink\" title=\"vw用于font-size\"></a>vw用于font-size</h3><p>同样我们来看看视口单位用在字号上会发生什么。<br>加入我们设置一个元素的font-size: 2vm；会怎么样呢。假设PC屏幕宽 1400px，那么2vm等于28px，pad的屏幕768px宽，2vm等于15px。可以看出问题了吧~ 28px的字体对于PC来说太大了，而这个你放到手机屏幕上，经过计算字号会小于10px，这个效果就不太好了。</p>\n<p>这样我们就有个新的方法！！！</p>\n<h3 id=\"calc\"><a href=\"#calc\" class=\"headerlink\" title=\"calc()\"></a>calc()</h3><p>calc()函数支持对2个或者更多个数值进行基础的运算。</p>\n<blockquote>\n<p>注意：使用加减运算的时候左右必须要有空格，例如calc(3em + 16px)。<br>好了为了解决vw在font-size使用造成的漏洞，我们可以尝试：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">:root &#123;</span><br><span class=\"line\">  font-size: calc(0.5em + 1vw);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>0.5em这里表示字号的最小值，1vw代表根据设备宽度响应式的网上叠加，这样你就会发现字体收缩就正常多了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>当然要实现响应式的设计，不仅仅是灵活的运用好这些相对单位，而细节上的细微的调整可能还是需要依赖媒体查询的代码，但是现在的前端开发者们要慢慢停止使用px思维去思考布局，CSS的东西看上去简单，实际上深入学习有很多意想不到的优势，需要大家多多探究，辣么，笔者就先写到这里了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>现在一提到响应式布局，css相对单位，相信众多前端行业的小可爱们都知道<code>em|rem</code>，再者是现在大家都比较熟知的<code>视口单位 vh|vw</code>。<br>emm…在说这些之前，让我们回顾一下CSS单位的历史。</p>\n<h2 id=\"早期-Pixel-px\"><a href=\"#早期-Pixel-px\" class=\"headerlink\" title=\"早期 Pixel (px)\"></a>早期 Pixel (px)</h2><p>在web环境下，用户可以将浏览器窗口设置成任意大小，CSS需要去适应它，而且用户在打开一个页面之后，还会再去调整它的大小，CSS也需要去适应这些条件。由此我们可以知道，在创建页面的时候，样式并没有被调用，而是当页面开始渲染时，浏览器才会去计算样式的规则。</p>\n<p>那么早些时候是如何解决设备窗口自适应的问题呢。</p>\n<p>早些时候，我们的设计大大们就想出了<code>完美像素设计</code>，解放了前端工程师们的双手，设计师们会创建一个有效宽度的容器，例如800px-950px宽的居中纵向列，也这个为基准再进行设计，这跟他们在原生应用程序或印刷出版物中做的设计或多或少有点类似。</p>\n<p>然后后来，有多年经验的前端应该能感受到，显示屏的分辨率越来越大，之前的950px的有效宽度开始延伸到1024px，但是兼容小分辨率屏幕使得这个问题变得不可解。而使得开发者不得不放弃“完美像素”设计的起因，是因为智能手机的普及。</p>\n<p>于是，<code>响应式设计</code>应运而生！！</p>\n<blockquote>\n<p>响应式 —— 在CSS中，这指的针对不同大小的浏览器窗口，用不同的方式响应更新页面的样式。我们要对不同尺寸的手机、平板电脑或桌面显示器多花心思了。我们将在第8章中详细介绍响应式设计，但在本章中，我会先给大家介绍一些重要的基础概念。</p>\n</blockquote>\n<p>开发人员曾经的宠儿（px）就要下线了。这里要提一下，CSS里1像素并不严格等同于显示器的1像素，在高分辨率显示器上更加明显。尽管根据浏览器、操作系统和硬件的不同，CSS的测量值可能会有细微的差别，但96px总是会大致等于屏幕上的物理1英寸。</p>\n<h2 id=\"em-的用法\"><a href=\"#em-的用法\" class=\"headerlink\" title=\"em 的用法\"></a>em 的用法</h2><p>先来看看em，em是最为常见的相对长度单位，基准是当前元素的<code>字号大小（font-size）</code>，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.box &#123;</span><br><span class=\"line\">  font-size: 16px;</span><br><span class=\"line\">  padding: 1em; // padding: 16px;          </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>把padding赋值为1em，乘以字号，得到一个值为16px的padding渲染值，因为该元素的字号是16px，以此类推要2em = 16px * 2 = 32px; 使用相对单位声明的值会由浏览器转化为一个绝对值，我们称之为<code>计算值</code>。</p>\n<h3 id=\"em-通常用法\"><a href=\"#em-通常用法\" class=\"headerlink\" title=\"em 通常用法\"></a>em 通常用法</h3><p>在设置padding、height、width或border-radius等属性时，使用em可能会很方便，因为如果它们继承了不同的字号大小，或者用户更改了字体设置，这些属性会均匀地缩放。<br>可以测试看看效果，熟悉一下不同盒子下em的用法。<br>HTML:<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;span class=&quot;box box-small&quot;&gt;Small&lt;/span&gt;</span><br><span class=\"line\">&lt;span class=&quot;box box-large&quot;&gt;Large&lt;/span&gt;</span><br></pre></td></tr></table></figure></p>\n<p>CSS:<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.box &#123;</span><br><span class=\"line\">  padding: 1em;</span><br><span class=\"line\">  border-radius: 1em;</span><br><span class=\"line\">  background-color: lightgray;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box-small &#123;</span><br><span class=\"line\">  font-size: 14px;              </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box-large &#123;</span><br><span class=\"line\">  font-size: 16px;              </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"用于font-size\"><a href=\"#用于font-size\" class=\"headerlink\" title=\"用于font-size\"></a>用于font-size</h3><p>em是基于font-size去计算的，那么如果用在font-size上呢？<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;p class=&quot;box&quot;&gt;猜猜我的字号是多少？&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// css</span><br><span class=\"line\">.box&#123;</span><br><span class=\"line\">    font-size: 1.2em;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面这种情况，em会以<code>父元素</code>的字号为基准，例如box的父元素是body，则会以body的font-size大小为基准。一般情况下我们会声明body的字号大小，如果没有声明，则以浏览器的默认样式为主<br>通常情况下浏览器有默认的css样式，每个默认的样式都是不同的，看看下面例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">body &#123;</span><br><span class=\"line\">  font-size: 16px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box &#123;</span><br><span class=\"line\">  font-size: 1.2em;     // 19.2px          </span><br><span class=\"line\">  padding: 1.2em;       // 23.04px        </span><br><span class=\"line\">  background-color: #ccc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>box的font-size是基于body的字号大小计算的，而padding则是基于box的font-size计算的，所以是19.2 * 1.2 = 23.04px。</p>\n<blockquote>\n<p>可以尝试用em去做多层的嵌套列表，可以做出字号层层收缩的效果，例如ul，li列表。</p>\n</blockquote>\n<h2 id=\"rem-的用法\"><a href=\"#rem-的用法\" class=\"headerlink\" title=\"rem 的用法\"></a>rem 的用法</h2><p>rem 顾名思义是 root em 的缩写，和em不同的是，em是依赖当前元素，而rem是和根元素关联的。<br>说到根元素，大家可以先认识一下一个特别的伪类选择器 - <code>:root</code><br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">:root &#123;                    /* 等同于 html 选择器 */</span><br><span class=\"line\">  font-size: 1em;      // 16px,浏览器的默认字号大小</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ul &#123;</span><br><span class=\"line\">  font-size: .8rem;     // 16 * 0.8 = 12.8px</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在这里 0.8rem 无论放在什么地方，都等同于0.8倍的根元素的字号大小。</p>\n<p>很简单吧~ 当然rem也好em也好都只是一种方式，如果去搭配使用还是要看个人对页面布局的理解。比如说，对font-size使用rem，因为现在很多浏览器可以通过ctrl- 和 Ctrl+ 对页面进行缩放，rem只依赖根元素，这样不会产生字号收缩的问题，字号大小变得可预测。而对padding、margin、border-radius等使用em则会更好，因为这些度量方式只是针对当前的元素来看的。在然后border的宽度则用px比较好，因为边框这个一般不会根据页面放缩去做计算的。</p>\n<h2 id=\"视口单位-vh-vm\"><a href=\"#视口单位-vh-vm\" class=\"headerlink\" title=\"视口单位 vh | vm\"></a>视口单位 vh | vm</h2><p>我们知道em和rem都是以font-size为基准的，而视口单位是依靠浏览器的视口大小来定义长度的。</p>\n<blockquote>\n<p>视口（viewport） —— 在浏览器窗口中用来渲染页面的可视区域，这不包括浏览器的地址栏、工具栏、状态栏等（如果有的话）。<br><strong>常见的视口单位：</strong></p>\n<ul>\n<li>vh —— 视口高度的1/100</li>\n<li>vw —— 视口宽度的1/100</li>\n<li>vmin —— 视区宽度或高度较小值的1/100（IE9支持的是vm）</li>\n<li>vmax —— 视区宽度或高度较大值的1/100（在写本书时，IE或者Edge都不支持）</li>\n</ul>\n</blockquote>\n<p>举个例子，50vw等于视口宽度的一半，而50vh等于视口高度的50%。vmin依赖两者（宽或高）的较小值，如果我们需要确保一个元素不管在横屏还是竖屏下适应屏幕展示的话，这个属性会很有帮助：如果是横屏，vmin的基准值是屏幕的高度，如果是竖屏，它的基准值是屏幕的宽度。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.box &#123;</span><br><span class=\"line\">  width: 90vmin;</span><br><span class=\"line\">  height: 90vmin;</span><br><span class=\"line\">  background-color: #369;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里笔者就不截图了，大家试试看就知道了（笑）。</p>\n<h3 id=\"vw用于font-size\"><a href=\"#vw用于font-size\" class=\"headerlink\" title=\"vw用于font-size\"></a>vw用于font-size</h3><p>同样我们来看看视口单位用在字号上会发生什么。<br>加入我们设置一个元素的font-size: 2vm；会怎么样呢。假设PC屏幕宽 1400px，那么2vm等于28px，pad的屏幕768px宽，2vm等于15px。可以看出问题了吧~ 28px的字体对于PC来说太大了，而这个你放到手机屏幕上，经过计算字号会小于10px，这个效果就不太好了。</p>\n<p>这样我们就有个新的方法！！！</p>\n<h3 id=\"calc\"><a href=\"#calc\" class=\"headerlink\" title=\"calc()\"></a>calc()</h3><p>calc()函数支持对2个或者更多个数值进行基础的运算。</p>\n<blockquote>\n<p>注意：使用加减运算的时候左右必须要有空格，例如calc(3em + 16px)。<br>好了为了解决vw在font-size使用造成的漏洞，我们可以尝试：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">:root &#123;</span><br><span class=\"line\">  font-size: calc(0.5em + 1vw);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>0.5em这里表示字号的最小值，1vw代表根据设备宽度响应式的网上叠加，这样你就会发现字体收缩就正常多了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>当然要实现响应式的设计，不仅仅是灵活的运用好这些相对单位，而细节上的细微的调整可能还是需要依赖媒体查询的代码，但是现在的前端开发者们要慢慢停止使用px思维去思考布局，CSS的东西看上去简单，实际上深入学习有很多意想不到的优势，需要大家多多探究，辣么，笔者就先写到这里了。</p>\n"},{"title":"Materialize UI 风格 WIKI 模板页","date":"2016-10-21T10:16:56.000Z","_content":"\n# 简介\n[Materialize](http://materializecss.com/) 是基于Material Design的UI框架。\n\n使用Materialize框架制作了一个WIKI文档的模板页面。\n\n![](/images/QQ截图20160708183414.png)\n\n# 实现功能\n* 动态生成左侧栏导航\n* 生成面包屑（这个一直没找到很好的控制方法，肯定是我蠢！）\n* 【伪】templates加载（其实是想仿照做一个路由加载指定模块的功能）\n\n# 源码\ngithub:  https://github.com/MJPiero/wiki-materialize\n\n","source":"_posts/Materialize-UI-风格-WIKI-模板页.md","raw":"---\ntitle: Materialize UI 风格 WIKI 模板页\ntags: [mywork]\ncategories: [mywork]\ndate: 2016-10-21 18:16:56\n---\n\n# 简介\n[Materialize](http://materializecss.com/) 是基于Material Design的UI框架。\n\n使用Materialize框架制作了一个WIKI文档的模板页面。\n\n![](/images/QQ截图20160708183414.png)\n\n# 实现功能\n* 动态生成左侧栏导航\n* 生成面包屑（这个一直没找到很好的控制方法，肯定是我蠢！）\n* 【伪】templates加载（其实是想仿照做一个路由加载指定模块的功能）\n\n# 源码\ngithub:  https://github.com/MJPiero/wiki-materialize\n\n","slug":"Materialize-UI-风格-WIKI-模板页","published":1,"updated":"2016-10-26T10:13:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjleqs1ns0006q3v30lm51nhr","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p><a href=\"http://materializecss.com/\" target=\"_blank\" rel=\"noopener\">Materialize</a> 是基于Material Design的UI框架。</p>\n<p>使用Materialize框架制作了一个WIKI文档的模板页面。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20160708183414.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h1 id=\"实现功能\"><a href=\"#实现功能\" class=\"headerlink\" title=\"实现功能\"></a>实现功能</h1><ul>\n<li>动态生成左侧栏导航</li>\n<li>生成面包屑（这个一直没找到很好的控制方法，肯定是我蠢！）</li>\n<li>【伪】templates加载（其实是想仿照做一个路由加载指定模块的功能）</li>\n</ul>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><p>github:  <a href=\"https://github.com/MJPiero/wiki-materialize\" target=\"_blank\" rel=\"noopener\">https://github.com/MJPiero/wiki-materialize</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p><a href=\"http://materializecss.com/\" target=\"_blank\" rel=\"noopener\">Materialize</a> 是基于Material Design的UI框架。</p>\n<p>使用Materialize框架制作了一个WIKI文档的模板页面。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20160708183414.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h1 id=\"实现功能\"><a href=\"#实现功能\" class=\"headerlink\" title=\"实现功能\"></a>实现功能</h1><ul>\n<li>动态生成左侧栏导航</li>\n<li>生成面包屑（这个一直没找到很好的控制方法，肯定是我蠢！）</li>\n<li>【伪】templates加载（其实是想仿照做一个路由加载指定模块的功能）</li>\n</ul>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><p>github:  <a href=\"https://github.com/MJPiero/wiki-materialize\" target=\"_blank\" rel=\"noopener\">https://github.com/MJPiero/wiki-materialize</a></p>\n"},{"title":"MongoDB如何开启认证权限功能","date":"2016-12-28T06:04:52.000Z","_content":"MongoDB预设不会开启认证权限功能（Authentication），所以任何人都可以随意连接到MongoDB的数据库。于是我们要去创建一个管理员的账号，并为其添加权限。\n# 创建新用户\n在开启MongoDB服务的情况下。执行`mongod`或则`mongod --dbpath <path to data directory>` 进入MongoDB服务。\n进入服务之后，执行：\n```\nuse admin\ndb.addUser(\"账户名称\", \"密码\")\n// 如果希望此账号只有读取的权限，则修改为\n// db.addUser(\"账户名称\", \"密码\", true)\n```\n执行完成之后，先停止MongoDB服务，在执行下面指令重新开启MongoDB服务：\n```\nmongod --auth\n```\n# 进入库\n启动完成之后，在连接上MongoDB Shell，在其中执行以下命令才可进入到admin库中：\n```\nuse admin \ndb.auth(\"账户名称\", \"密码\")\n```\n","source":"_posts/MongoDB如何开启认证权限功能.md","raw":"---\ntitle: MongoDB如何开启认证权限功能\ndate: 2016-12-28 14:04:52\ntags: [mongodb]\ncategories: [mongodb]\n---\nMongoDB预设不会开启认证权限功能（Authentication），所以任何人都可以随意连接到MongoDB的数据库。于是我们要去创建一个管理员的账号，并为其添加权限。\n# 创建新用户\n在开启MongoDB服务的情况下。执行`mongod`或则`mongod --dbpath <path to data directory>` 进入MongoDB服务。\n进入服务之后，执行：\n```\nuse admin\ndb.addUser(\"账户名称\", \"密码\")\n// 如果希望此账号只有读取的权限，则修改为\n// db.addUser(\"账户名称\", \"密码\", true)\n```\n执行完成之后，先停止MongoDB服务，在执行下面指令重新开启MongoDB服务：\n```\nmongod --auth\n```\n# 进入库\n启动完成之后，在连接上MongoDB Shell，在其中执行以下命令才可进入到admin库中：\n```\nuse admin \ndb.auth(\"账户名称\", \"密码\")\n```\n","slug":"MongoDB如何开启认证权限功能","published":1,"updated":"2016-12-28T06:24:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjleqs1nu0007q3v323gy6c35","content":"<p>MongoDB预设不会开启认证权限功能（Authentication），所以任何人都可以随意连接到MongoDB的数据库。于是我们要去创建一个管理员的账号，并为其添加权限。</p>\n<h1 id=\"创建新用户\"><a href=\"#创建新用户\" class=\"headerlink\" title=\"创建新用户\"></a>创建新用户</h1><p>在开启MongoDB服务的情况下。执行<code>mongod</code>或则<code>mongod --dbpath &lt;path to data directory&gt;</code> 进入MongoDB服务。<br>进入服务之后，执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use admin</span><br><span class=\"line\">db.addUser(&quot;账户名称&quot;, &quot;密码&quot;)</span><br><span class=\"line\">// 如果希望此账号只有读取的权限，则修改为</span><br><span class=\"line\">// db.addUser(&quot;账户名称&quot;, &quot;密码&quot;, true)</span><br></pre></td></tr></table></figure></p>\n<p>执行完成之后，先停止MongoDB服务，在执行下面指令重新开启MongoDB服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mongod --auth</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"进入库\"><a href=\"#进入库\" class=\"headerlink\" title=\"进入库\"></a>进入库</h1><p>启动完成之后，在连接上MongoDB Shell，在其中执行以下命令才可进入到admin库中：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use admin </span><br><span class=\"line\">db.auth(&quot;账户名称&quot;, &quot;密码&quot;)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>MongoDB预设不会开启认证权限功能（Authentication），所以任何人都可以随意连接到MongoDB的数据库。于是我们要去创建一个管理员的账号，并为其添加权限。</p>\n<h1 id=\"创建新用户\"><a href=\"#创建新用户\" class=\"headerlink\" title=\"创建新用户\"></a>创建新用户</h1><p>在开启MongoDB服务的情况下。执行<code>mongod</code>或则<code>mongod --dbpath &lt;path to data directory&gt;</code> 进入MongoDB服务。<br>进入服务之后，执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use admin</span><br><span class=\"line\">db.addUser(&quot;账户名称&quot;, &quot;密码&quot;)</span><br><span class=\"line\">// 如果希望此账号只有读取的权限，则修改为</span><br><span class=\"line\">// db.addUser(&quot;账户名称&quot;, &quot;密码&quot;, true)</span><br></pre></td></tr></table></figure></p>\n<p>执行完成之后，先停止MongoDB服务，在执行下面指令重新开启MongoDB服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mongod --auth</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"进入库\"><a href=\"#进入库\" class=\"headerlink\" title=\"进入库\"></a>进入库</h1><p>启动完成之后，在连接上MongoDB Shell，在其中执行以下命令才可进入到admin库中：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use admin </span><br><span class=\"line\">db.auth(&quot;账户名称&quot;, &quot;密码&quot;)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"MongoDB添加到window服务，随系统自启动","date":"2016-12-28T03:38:01.000Z","_content":"最近在window上安转MongoDB，记录一下遇到的一些的问题。\n# windows上安装MongoDB\n首先去官网下载Windows安装包：https://www.mongodb.org/downloads\n安装路径这里假设是安装在 `D:/soft/mongodb/`。\n安装好之后，我们可以随便在一个目录下，比如在 `D:/` 根目录下创建一个目录 `D:\\mongodb\\`，进入该目录，新建data和logs两个目录。\n然后打开控制台命令窗口（CMD），输入`D:\\soft\\mongodb\\bin` 进入到安装目录下。\n再执行：`mongod --dbpath d:/mongodb/data`，开启MongoDB服务，并将运行目录指向之前创建好的 `D:\\mongodb\\data` 下。\n打开浏览器，进入：`http://127.0.0.1:27017`（window服务默认端口27017），这时你会看到以下提示语：\n```\nYou are trying to access MongoDB on the native driver port. For http diagnostic access, add 1000 to the port number\n```\n这说明MongoDB服务已经启动了。\n# 添加MongoDB服务到windows本地服务中\n上面的方法要保证MongoDB服务运行，必须每次都要重复输入命令才能开启。为了方便在windows上开启MongoDB服务，我们需要将MongoDB服务到windows本地服务中，并且设置随系统启动开启。\n继续回到CMD中，在安装目录中（D:\\soft\\mongodb\\bin）执行：\n```\nmongod.exe --logpath d:/soft/mongodb/logs/mongodb.log --logappend --dbpath d:/soft/mongodb/data --directoryperdb --serviceName MongoDB -install --auth\n```\n> 此处注意 \"--auth\" 是将服务开启权限认证，这样别人需要账户和密码才能去访问你的数据库。\n> 如果要开启认证，需要在前期运行时要在MongoDB服务中设置好账户密码。\n> 详细方法可参考：[MongoDB如何开启认证权限功能](http://www.mjpiero.cc/2016/12/28/MongoDB%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E8%AE%A4%E8%AF%81%E6%9D%83%E9%99%90%E5%8A%9F%E8%83%BD/)\n> 如果不需要，或则选择后期再设置，可以不使用。\n\n上面执行完毕之后，会在windows服务下创建一个名为MongoDB的服务。\n执行 `net start MongoDB` 便开启MongoDB服务了。\n可以在windows的服务窗口中看见MongoDB的服务状态。\n![](/images/QQ截图20161228122836.png)\n# 删除MongoDB服务\n如果要删除MongoDB服务，首先先停止当前的MongoDB服务，这个可以去服务窗口停止。\n然后在CMD中执行：`sc delete MongoDB`\n这样之前安装的服务就会被删除。\n# 安装时遇到的一些问题\n在安装时可能遇到的一些问题：\n## Windows不能在本地计算机启动MongoDB，错误代码 100\n__解决办法：__ MongoDB安装目录\\data\\将此文件夹下的mongod.lock、storage.bson删除\n## 连接数据库时发生错误 failed to execute listdatabases command\n__解决办法：__ 在安装服务的时候开启权限认证，确定一下账户密码是否有误。\n如果是在添加服务的时候使用了\"--auth\"命令，则需要进入MongoDB服务中重新添加新的账户和密码。\n详细方法可参考：[MongoDB如何开启认证权限功能](http://www.mjpiero.cc/2016/12/28/MongoDB%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E8%AE%A4%E8%AF%81%E6%9D%83%E9%99%90%E5%8A%9F%E8%83%BD/)","source":"_posts/MongoDB添加到window服务，随服务自启动.md","raw":"---\ntitle: MongoDB添加到window服务，随系统自启动\ndate: 2016-12-28 11:38:01\ntags: [mongodb, 环境搭建]\ncategories: [mongodb]\n---\n最近在window上安转MongoDB，记录一下遇到的一些的问题。\n# windows上安装MongoDB\n首先去官网下载Windows安装包：https://www.mongodb.org/downloads\n安装路径这里假设是安装在 `D:/soft/mongodb/`。\n安装好之后，我们可以随便在一个目录下，比如在 `D:/` 根目录下创建一个目录 `D:\\mongodb\\`，进入该目录，新建data和logs两个目录。\n然后打开控制台命令窗口（CMD），输入`D:\\soft\\mongodb\\bin` 进入到安装目录下。\n再执行：`mongod --dbpath d:/mongodb/data`，开启MongoDB服务，并将运行目录指向之前创建好的 `D:\\mongodb\\data` 下。\n打开浏览器，进入：`http://127.0.0.1:27017`（window服务默认端口27017），这时你会看到以下提示语：\n```\nYou are trying to access MongoDB on the native driver port. For http diagnostic access, add 1000 to the port number\n```\n这说明MongoDB服务已经启动了。\n# 添加MongoDB服务到windows本地服务中\n上面的方法要保证MongoDB服务运行，必须每次都要重复输入命令才能开启。为了方便在windows上开启MongoDB服务，我们需要将MongoDB服务到windows本地服务中，并且设置随系统启动开启。\n继续回到CMD中，在安装目录中（D:\\soft\\mongodb\\bin）执行：\n```\nmongod.exe --logpath d:/soft/mongodb/logs/mongodb.log --logappend --dbpath d:/soft/mongodb/data --directoryperdb --serviceName MongoDB -install --auth\n```\n> 此处注意 \"--auth\" 是将服务开启权限认证，这样别人需要账户和密码才能去访问你的数据库。\n> 如果要开启认证，需要在前期运行时要在MongoDB服务中设置好账户密码。\n> 详细方法可参考：[MongoDB如何开启认证权限功能](http://www.mjpiero.cc/2016/12/28/MongoDB%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E8%AE%A4%E8%AF%81%E6%9D%83%E9%99%90%E5%8A%9F%E8%83%BD/)\n> 如果不需要，或则选择后期再设置，可以不使用。\n\n上面执行完毕之后，会在windows服务下创建一个名为MongoDB的服务。\n执行 `net start MongoDB` 便开启MongoDB服务了。\n可以在windows的服务窗口中看见MongoDB的服务状态。\n![](/images/QQ截图20161228122836.png)\n# 删除MongoDB服务\n如果要删除MongoDB服务，首先先停止当前的MongoDB服务，这个可以去服务窗口停止。\n然后在CMD中执行：`sc delete MongoDB`\n这样之前安装的服务就会被删除。\n# 安装时遇到的一些问题\n在安装时可能遇到的一些问题：\n## Windows不能在本地计算机启动MongoDB，错误代码 100\n__解决办法：__ MongoDB安装目录\\data\\将此文件夹下的mongod.lock、storage.bson删除\n## 连接数据库时发生错误 failed to execute listdatabases command\n__解决办法：__ 在安装服务的时候开启权限认证，确定一下账户密码是否有误。\n如果是在添加服务的时候使用了\"--auth\"命令，则需要进入MongoDB服务中重新添加新的账户和密码。\n详细方法可参考：[MongoDB如何开启认证权限功能](http://www.mjpiero.cc/2016/12/28/MongoDB%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E8%AE%A4%E8%AF%81%E6%9D%83%E9%99%90%E5%8A%9F%E8%83%BD/)","slug":"MongoDB添加到window服务，随服务自启动","published":1,"updated":"2017-03-13T02:21:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjleqs1nv0008q3v3py5i54ja","content":"<p>最近在window上安转MongoDB，记录一下遇到的一些的问题。</p>\n<h1 id=\"windows上安装MongoDB\"><a href=\"#windows上安装MongoDB\" class=\"headerlink\" title=\"windows上安装MongoDB\"></a>windows上安装MongoDB</h1><p>首先去官网下载Windows安装包：<a href=\"https://www.mongodb.org/downloads\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.org/downloads</a><br>安装路径这里假设是安装在 <code>D:/soft/mongodb/</code>。<br>安装好之后，我们可以随便在一个目录下，比如在 <code>D:/</code> 根目录下创建一个目录 <code>D:\\mongodb\\</code>，进入该目录，新建data和logs两个目录。<br>然后打开控制台命令窗口（CMD），输入<code>D:\\soft\\mongodb\\bin</code> 进入到安装目录下。<br>再执行：<code>mongod --dbpath d:/mongodb/data</code>，开启MongoDB服务，并将运行目录指向之前创建好的 <code>D:\\mongodb\\data</code> 下。<br>打开浏览器，进入：<code>http://127.0.0.1:27017</code>（window服务默认端口27017），这时你会看到以下提示语：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">You are trying to access MongoDB on the native driver port. For http diagnostic access, add 1000 to the port number</span><br></pre></td></tr></table></figure></p>\n<p>这说明MongoDB服务已经启动了。</p>\n<h1 id=\"添加MongoDB服务到windows本地服务中\"><a href=\"#添加MongoDB服务到windows本地服务中\" class=\"headerlink\" title=\"添加MongoDB服务到windows本地服务中\"></a>添加MongoDB服务到windows本地服务中</h1><p>上面的方法要保证MongoDB服务运行，必须每次都要重复输入命令才能开启。为了方便在windows上开启MongoDB服务，我们需要将MongoDB服务到windows本地服务中，并且设置随系统启动开启。<br>继续回到CMD中，在安装目录中（D:\\soft\\mongodb\\bin）执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mongod.exe --logpath d:/soft/mongodb/logs/mongodb.log --logappend --dbpath d:/soft/mongodb/data --directoryperdb --serviceName MongoDB -install --auth</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>此处注意 “–auth” 是将服务开启权限认证，这样别人需要账户和密码才能去访问你的数据库。<br>如果要开启认证，需要在前期运行时要在MongoDB服务中设置好账户密码。<br>详细方法可参考：<a href=\"http://www.mjpiero.cc/2016/12/28/MongoDB%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E8%AE%A4%E8%AF%81%E6%9D%83%E9%99%90%E5%8A%9F%E8%83%BD/\">MongoDB如何开启认证权限功能</a><br>如果不需要，或则选择后期再设置，可以不使用。</p>\n</blockquote>\n<p>上面执行完毕之后，会在windows服务下创建一个名为MongoDB的服务。<br>执行 <code>net start MongoDB</code> 便开启MongoDB服务了。<br>可以在windows的服务窗口中看见MongoDB的服务状态。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20161228122836.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h1 id=\"删除MongoDB服务\"><a href=\"#删除MongoDB服务\" class=\"headerlink\" title=\"删除MongoDB服务\"></a>删除MongoDB服务</h1><p>如果要删除MongoDB服务，首先先停止当前的MongoDB服务，这个可以去服务窗口停止。<br>然后在CMD中执行：<code>sc delete MongoDB</code><br>这样之前安装的服务就会被删除。</p>\n<h1 id=\"安装时遇到的一些问题\"><a href=\"#安装时遇到的一些问题\" class=\"headerlink\" title=\"安装时遇到的一些问题\"></a>安装时遇到的一些问题</h1><p>在安装时可能遇到的一些问题：</p>\n<h2 id=\"Windows不能在本地计算机启动MongoDB，错误代码-100\"><a href=\"#Windows不能在本地计算机启动MongoDB，错误代码-100\" class=\"headerlink\" title=\"Windows不能在本地计算机启动MongoDB，错误代码 100\"></a>Windows不能在本地计算机启动MongoDB，错误代码 100</h2><p><strong>解决办法：</strong> MongoDB安装目录\\data\\将此文件夹下的mongod.lock、storage.bson删除</p>\n<h2 id=\"连接数据库时发生错误-failed-to-execute-listdatabases-command\"><a href=\"#连接数据库时发生错误-failed-to-execute-listdatabases-command\" class=\"headerlink\" title=\"连接数据库时发生错误 failed to execute listdatabases command\"></a>连接数据库时发生错误 failed to execute listdatabases command</h2><p><strong>解决办法：</strong> 在安装服务的时候开启权限认证，确定一下账户密码是否有误。<br>如果是在添加服务的时候使用了”–auth”命令，则需要进入MongoDB服务中重新添加新的账户和密码。<br>详细方法可参考：<a href=\"http://www.mjpiero.cc/2016/12/28/MongoDB%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E8%AE%A4%E8%AF%81%E6%9D%83%E9%99%90%E5%8A%9F%E8%83%BD/\">MongoDB如何开启认证权限功能</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在window上安转MongoDB，记录一下遇到的一些的问题。</p>\n<h1 id=\"windows上安装MongoDB\"><a href=\"#windows上安装MongoDB\" class=\"headerlink\" title=\"windows上安装MongoDB\"></a>windows上安装MongoDB</h1><p>首先去官网下载Windows安装包：<a href=\"https://www.mongodb.org/downloads\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.org/downloads</a><br>安装路径这里假设是安装在 <code>D:/soft/mongodb/</code>。<br>安装好之后，我们可以随便在一个目录下，比如在 <code>D:/</code> 根目录下创建一个目录 <code>D:\\mongodb\\</code>，进入该目录，新建data和logs两个目录。<br>然后打开控制台命令窗口（CMD），输入<code>D:\\soft\\mongodb\\bin</code> 进入到安装目录下。<br>再执行：<code>mongod --dbpath d:/mongodb/data</code>，开启MongoDB服务，并将运行目录指向之前创建好的 <code>D:\\mongodb\\data</code> 下。<br>打开浏览器，进入：<code>http://127.0.0.1:27017</code>（window服务默认端口27017），这时你会看到以下提示语：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">You are trying to access MongoDB on the native driver port. For http diagnostic access, add 1000 to the port number</span><br></pre></td></tr></table></figure></p>\n<p>这说明MongoDB服务已经启动了。</p>\n<h1 id=\"添加MongoDB服务到windows本地服务中\"><a href=\"#添加MongoDB服务到windows本地服务中\" class=\"headerlink\" title=\"添加MongoDB服务到windows本地服务中\"></a>添加MongoDB服务到windows本地服务中</h1><p>上面的方法要保证MongoDB服务运行，必须每次都要重复输入命令才能开启。为了方便在windows上开启MongoDB服务，我们需要将MongoDB服务到windows本地服务中，并且设置随系统启动开启。<br>继续回到CMD中，在安装目录中（D:\\soft\\mongodb\\bin）执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mongod.exe --logpath d:/soft/mongodb/logs/mongodb.log --logappend --dbpath d:/soft/mongodb/data --directoryperdb --serviceName MongoDB -install --auth</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>此处注意 “–auth” 是将服务开启权限认证，这样别人需要账户和密码才能去访问你的数据库。<br>如果要开启认证，需要在前期运行时要在MongoDB服务中设置好账户密码。<br>详细方法可参考：<a href=\"http://www.mjpiero.cc/2016/12/28/MongoDB%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E8%AE%A4%E8%AF%81%E6%9D%83%E9%99%90%E5%8A%9F%E8%83%BD/\">MongoDB如何开启认证权限功能</a><br>如果不需要，或则选择后期再设置，可以不使用。</p>\n</blockquote>\n<p>上面执行完毕之后，会在windows服务下创建一个名为MongoDB的服务。<br>执行 <code>net start MongoDB</code> 便开启MongoDB服务了。<br>可以在windows的服务窗口中看见MongoDB的服务状态。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20161228122836.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h1 id=\"删除MongoDB服务\"><a href=\"#删除MongoDB服务\" class=\"headerlink\" title=\"删除MongoDB服务\"></a>删除MongoDB服务</h1><p>如果要删除MongoDB服务，首先先停止当前的MongoDB服务，这个可以去服务窗口停止。<br>然后在CMD中执行：<code>sc delete MongoDB</code><br>这样之前安装的服务就会被删除。</p>\n<h1 id=\"安装时遇到的一些问题\"><a href=\"#安装时遇到的一些问题\" class=\"headerlink\" title=\"安装时遇到的一些问题\"></a>安装时遇到的一些问题</h1><p>在安装时可能遇到的一些问题：</p>\n<h2 id=\"Windows不能在本地计算机启动MongoDB，错误代码-100\"><a href=\"#Windows不能在本地计算机启动MongoDB，错误代码-100\" class=\"headerlink\" title=\"Windows不能在本地计算机启动MongoDB，错误代码 100\"></a>Windows不能在本地计算机启动MongoDB，错误代码 100</h2><p><strong>解决办法：</strong> MongoDB安装目录\\data\\将此文件夹下的mongod.lock、storage.bson删除</p>\n<h2 id=\"连接数据库时发生错误-failed-to-execute-listdatabases-command\"><a href=\"#连接数据库时发生错误-failed-to-execute-listdatabases-command\" class=\"headerlink\" title=\"连接数据库时发生错误 failed to execute listdatabases command\"></a>连接数据库时发生错误 failed to execute listdatabases command</h2><p><strong>解决办法：</strong> 在安装服务的时候开启权限认证，确定一下账户密码是否有误。<br>如果是在添加服务的时候使用了”–auth”命令，则需要进入MongoDB服务中重新添加新的账户和密码。<br>详细方法可参考：<a href=\"http://www.mjpiero.cc/2016/12/28/MongoDB%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E8%AE%A4%E8%AF%81%E6%9D%83%E9%99%90%E5%8A%9F%E8%83%BD/\">MongoDB如何开启认证权限功能</a></p>\n"},{"title":"js模块化规范总结","date":"2018-08-29T02:17:23.000Z","_content":"早期，我们在使用js开发的时候，并没有类的概念，更不用说模块（Module）了，当然现在es2015|2016在语言标准的层面上，已经实现了模块的功能，而且实现的很简单，用意也是为了尽可能成为浏览器和服务器通用的模块解决方案。\n那么，作为一个模块化的系统，需要具备的是以下能力：\n1. 定义封装的模块。\n2. 定义新模块对其他模块的依赖。\n3. 可对其他模块的引入支持。\n\n让我们回忆一下广为人知的几个不同的模块化规范。\n\n## commonJS\n在es2015之前，js没有模块化的规范，Nodejs的CommonJS率先制定了js的模块化标准，当然也是仅仅限制在Nodejs的服务器环境下使用。\n- __模块化定义：__ \n```\n// hello.js\n// exports是作为模块文件唯一出口的对象\nfunction hello(){\n\tconsole.log('hello');\n}\nexports.hello = hello;\n```\n\n```\n// module为全局的对象，其exports属性等同于全局的exports对象\nmodule.exports = {\n\tsayName(){\n\t\tconsole.log('my name is Luo Xia');\n\t}\n\t...\n}\n```\n>注：这里需要注意的是一旦使用了module.exports，最终出口将会忽略在全局的exports对象上添加的属性和方法。\n\n```\n//Module.js\nfunction a(){\n\tconsole.log('a');\n} \nexports.a = a;\nmodule.exports = {\n\tb(){\n\t\tconsole.log('b');\n\t}\n};\n\n//testM.js\nlet m = require(\"./Module\");\nconsole.log(typeof m.a); //undefined\nconsole.log(typeof m.b); //function\n```\n- __导入：__ require('路径')\n有关require导入的路径规范，可以了解一下NodeJS里npm指令，这里要提到的是模块会优先从缓存加载，会优先加载核心模块（比如npm安装好的依赖包下的模块），之后才会加载文件模块。\n\n## AMD\nAMD中译是“异步模块定义”的意思。它是一个浏览器环境下的模块化规范，可以采用同步和异步地加载方式加载模块文件。\n- __模块化定义：__ 全局的 define(id?, dependencies?, factory);\nid为模块标识符，dependencies为模块依赖的其他模块，factory为依赖加载完毕后执行的回调函数。\n\n```\n// 独立加载模块，不依赖其他模块，省略dependencies\ndefine(function(){\n\treturn {\n\t\tsayHello(){\n\t\t\tconsole.log('hello');\n\t\t}\n\t}\n});\n\n// 依赖其他模块\ndefine(['jquery'],function(){\n\treturn {\n\t\t...\n\t}\n});\n```\n- __导入：__ require(['模块名称'], function ('模块变量引用'){// 代码});\n```\n// a.js\ndefine(function (){\n　　return {\n　　　a:'hello world'\n　　}\n});\n// b.js\nrequire(['./a.js'], function (moduleA){\n    console.log(moduleA.a); // 打印出：hello world\n});\n```\n- __应用：__ [requireJS](https://requirejs.org/)\n\n## CMD\nCMD是在AMD基础上改进的一种规范，和AMD不同在于对依赖模块的执行时机处理不同，CMD是就近依赖，而AMD是前置依赖。也就是说AMD要在一开始就加载所有的依赖，而CMD是一级一级的加载。\n- __定义模块：__ define(function(require, exports, module) {});\n像AMD和CommonJS的整合版，和NodeJS兼容性会比较好，后期requireJS\n\n```\ndefine(function(require,exports,module){\n    require('...');\n\t...\n});\n```\n- __导入：__ \n\n```\n// a.js\ndefine(function (require, exports, module){\n　　exports.a = 'hello world';\n});\n// b.js\ndefine(function (require, exports, module){\n    var moduleA = require('./a.js');  // 同步加载\n    // requie.async(id,callback?);  异步加载\n    console.log(moduleA.a); // 打印出：hello world\n});\n```\n比起AMD默认一个当多个用，CMD则是按照API严格区分，AMD中require分全局和局部加载，但是CMD是没有全局require的，每个API都简单纯粹。\n- __应用：__ [Seajs](https://seajs.github.io/seajs/)\n\n## UMD\n兼容AMD和CommonJS的规范，还兼容全局引用的方式。因此在浏览器和服务器的环境都可以应用此规范。\n实际上就是一个兼容性的写法，详细可看：[UMD兼容多种模块规范](http://www.mjpiero.cc/2016/12/08/UMD%E5%85%BC%E5%AE%B9%E5%A4%9A%E7%A7%8D%E6%A8%A1%E5%9D%97%E8%A7%84%E8%8C%83/)\n\n## ES2015|ES2016 Module规范\nES2015出来之后，终于有了自己的模块规范。下面我们直接从es6开始说。\n- __定义模块化：__ \n\n```\n// test.js\nlet a = 'hello';\nlet b = 'word';\nlet year = 2018;\n\n// 和CommonJS不同的是，这里export后面跟着的不是对象，而是一系列代表出口的值\n// 同样可以用as设置别名\n// 例如：export{a as aName}\n\n// 这类\nexport {a, b};\n```\n>注：export后面可以直接跟一个函数，但是不能直接跟对象，对象都需要用`{}`框起来（export default输出不同）。\n\n- __导入：__ \n我们都知道CommonJS的模块是一个对象，es6的模块不是对象，是编译时执行的，使得编译时就能够确定依赖关系和输入输出的变量。\n比如说：\n\n```\n// 从fs里面加载3个方法，其他方法不加载，这叫”编译时加载“，ES6可以在编译时就完成模块加载。\nimport { stat, exists, readFile } from 'fs';\n```\n引用的时候我们没法引用模块本身，因为它不是对象。\n```\nimport {a, b, c} from './test';\n\nimport {a as name, b, c} from './test';\n\nimport * as ALLName from './test';\n```\n\n- __默认输出：__\n当我们并不知道模块的API，可以提供默认输出：\n\n```\nexport default function () {\n  console.log('foo');\n}\n```\n这时通过import导出则不需要{}，因为只有一个变量：\n\n```\nimport name from './export-default';\n\n// 例如我们在使用一些库\n// import $ from 'jquery';\n```\n>注：es6 Module和CommonJS有个本质的区别，CommonJS加载的模块是对值的拷贝，而ES6 Module是对值的引用，这样模块定义文件内部变量的变化会实时反映到依赖文件，而CommonJS不同。\n\n## 总结\n自从es2015出来之后，AMD和CMD规范用的越来越少了，但是并不代表这些完全失去了可用性，考虑到浏览器的兼容性，虽然现在浏览器环境对es6的支持越来越完善了，但考虑对一些低版本的浏览器支持，很多在写es6的时候还是会使用babel对es6做一层转换，比如结合webpack配置去打包一个es6语法的js组件，打包出来会是UMD规范的，这是兼容性比较强的一种规范。\n当然，实际上只是要大家尽可能养成模块化开发的思想，灵活的在不同环境下去运用好这些规范。","source":"_posts/js模块化规范总结.md","raw":"---\ntitle: js模块化规范总结\ndate: 2018-08-29 10:17:23\ntags: [javascript,模块化]\ncategories: [javascript]\n---\n早期，我们在使用js开发的时候，并没有类的概念，更不用说模块（Module）了，当然现在es2015|2016在语言标准的层面上，已经实现了模块的功能，而且实现的很简单，用意也是为了尽可能成为浏览器和服务器通用的模块解决方案。\n那么，作为一个模块化的系统，需要具备的是以下能力：\n1. 定义封装的模块。\n2. 定义新模块对其他模块的依赖。\n3. 可对其他模块的引入支持。\n\n让我们回忆一下广为人知的几个不同的模块化规范。\n\n## commonJS\n在es2015之前，js没有模块化的规范，Nodejs的CommonJS率先制定了js的模块化标准，当然也是仅仅限制在Nodejs的服务器环境下使用。\n- __模块化定义：__ \n```\n// hello.js\n// exports是作为模块文件唯一出口的对象\nfunction hello(){\n\tconsole.log('hello');\n}\nexports.hello = hello;\n```\n\n```\n// module为全局的对象，其exports属性等同于全局的exports对象\nmodule.exports = {\n\tsayName(){\n\t\tconsole.log('my name is Luo Xia');\n\t}\n\t...\n}\n```\n>注：这里需要注意的是一旦使用了module.exports，最终出口将会忽略在全局的exports对象上添加的属性和方法。\n\n```\n//Module.js\nfunction a(){\n\tconsole.log('a');\n} \nexports.a = a;\nmodule.exports = {\n\tb(){\n\t\tconsole.log('b');\n\t}\n};\n\n//testM.js\nlet m = require(\"./Module\");\nconsole.log(typeof m.a); //undefined\nconsole.log(typeof m.b); //function\n```\n- __导入：__ require('路径')\n有关require导入的路径规范，可以了解一下NodeJS里npm指令，这里要提到的是模块会优先从缓存加载，会优先加载核心模块（比如npm安装好的依赖包下的模块），之后才会加载文件模块。\n\n## AMD\nAMD中译是“异步模块定义”的意思。它是一个浏览器环境下的模块化规范，可以采用同步和异步地加载方式加载模块文件。\n- __模块化定义：__ 全局的 define(id?, dependencies?, factory);\nid为模块标识符，dependencies为模块依赖的其他模块，factory为依赖加载完毕后执行的回调函数。\n\n```\n// 独立加载模块，不依赖其他模块，省略dependencies\ndefine(function(){\n\treturn {\n\t\tsayHello(){\n\t\t\tconsole.log('hello');\n\t\t}\n\t}\n});\n\n// 依赖其他模块\ndefine(['jquery'],function(){\n\treturn {\n\t\t...\n\t}\n});\n```\n- __导入：__ require(['模块名称'], function ('模块变量引用'){// 代码});\n```\n// a.js\ndefine(function (){\n　　return {\n　　　a:'hello world'\n　　}\n});\n// b.js\nrequire(['./a.js'], function (moduleA){\n    console.log(moduleA.a); // 打印出：hello world\n});\n```\n- __应用：__ [requireJS](https://requirejs.org/)\n\n## CMD\nCMD是在AMD基础上改进的一种规范，和AMD不同在于对依赖模块的执行时机处理不同，CMD是就近依赖，而AMD是前置依赖。也就是说AMD要在一开始就加载所有的依赖，而CMD是一级一级的加载。\n- __定义模块：__ define(function(require, exports, module) {});\n像AMD和CommonJS的整合版，和NodeJS兼容性会比较好，后期requireJS\n\n```\ndefine(function(require,exports,module){\n    require('...');\n\t...\n});\n```\n- __导入：__ \n\n```\n// a.js\ndefine(function (require, exports, module){\n　　exports.a = 'hello world';\n});\n// b.js\ndefine(function (require, exports, module){\n    var moduleA = require('./a.js');  // 同步加载\n    // requie.async(id,callback?);  异步加载\n    console.log(moduleA.a); // 打印出：hello world\n});\n```\n比起AMD默认一个当多个用，CMD则是按照API严格区分，AMD中require分全局和局部加载，但是CMD是没有全局require的，每个API都简单纯粹。\n- __应用：__ [Seajs](https://seajs.github.io/seajs/)\n\n## UMD\n兼容AMD和CommonJS的规范，还兼容全局引用的方式。因此在浏览器和服务器的环境都可以应用此规范。\n实际上就是一个兼容性的写法，详细可看：[UMD兼容多种模块规范](http://www.mjpiero.cc/2016/12/08/UMD%E5%85%BC%E5%AE%B9%E5%A4%9A%E7%A7%8D%E6%A8%A1%E5%9D%97%E8%A7%84%E8%8C%83/)\n\n## ES2015|ES2016 Module规范\nES2015出来之后，终于有了自己的模块规范。下面我们直接从es6开始说。\n- __定义模块化：__ \n\n```\n// test.js\nlet a = 'hello';\nlet b = 'word';\nlet year = 2018;\n\n// 和CommonJS不同的是，这里export后面跟着的不是对象，而是一系列代表出口的值\n// 同样可以用as设置别名\n// 例如：export{a as aName}\n\n// 这类\nexport {a, b};\n```\n>注：export后面可以直接跟一个函数，但是不能直接跟对象，对象都需要用`{}`框起来（export default输出不同）。\n\n- __导入：__ \n我们都知道CommonJS的模块是一个对象，es6的模块不是对象，是编译时执行的，使得编译时就能够确定依赖关系和输入输出的变量。\n比如说：\n\n```\n// 从fs里面加载3个方法，其他方法不加载，这叫”编译时加载“，ES6可以在编译时就完成模块加载。\nimport { stat, exists, readFile } from 'fs';\n```\n引用的时候我们没法引用模块本身，因为它不是对象。\n```\nimport {a, b, c} from './test';\n\nimport {a as name, b, c} from './test';\n\nimport * as ALLName from './test';\n```\n\n- __默认输出：__\n当我们并不知道模块的API，可以提供默认输出：\n\n```\nexport default function () {\n  console.log('foo');\n}\n```\n这时通过import导出则不需要{}，因为只有一个变量：\n\n```\nimport name from './export-default';\n\n// 例如我们在使用一些库\n// import $ from 'jquery';\n```\n>注：es6 Module和CommonJS有个本质的区别，CommonJS加载的模块是对值的拷贝，而ES6 Module是对值的引用，这样模块定义文件内部变量的变化会实时反映到依赖文件，而CommonJS不同。\n\n## 总结\n自从es2015出来之后，AMD和CMD规范用的越来越少了，但是并不代表这些完全失去了可用性，考虑到浏览器的兼容性，虽然现在浏览器环境对es6的支持越来越完善了，但考虑对一些低版本的浏览器支持，很多在写es6的时候还是会使用babel对es6做一层转换，比如结合webpack配置去打包一个es6语法的js组件，打包出来会是UMD规范的，这是兼容性比较强的一种规范。\n当然，实际上只是要大家尽可能养成模块化开发的思想，灵活的在不同环境下去运用好这些规范。","slug":"js模块化规范总结","published":1,"updated":"2018-08-29T12:14:46.683Z","_id":"cjleqs1nx000cq3v311zcp8ni","comments":1,"layout":"post","photos":[],"link":"","content":"<p>早期，我们在使用js开发的时候，并没有类的概念，更不用说模块（Module）了，当然现在es2015|2016在语言标准的层面上，已经实现了模块的功能，而且实现的很简单，用意也是为了尽可能成为浏览器和服务器通用的模块解决方案。<br>那么，作为一个模块化的系统，需要具备的是以下能力：</p>\n<ol>\n<li>定义封装的模块。</li>\n<li>定义新模块对其他模块的依赖。</li>\n<li>可对其他模块的引入支持。</li>\n</ol>\n<p>让我们回忆一下广为人知的几个不同的模块化规范。</p>\n<h2 id=\"commonJS\"><a href=\"#commonJS\" class=\"headerlink\" title=\"commonJS\"></a>commonJS</h2><p>在es2015之前，js没有模块化的规范，Nodejs的CommonJS率先制定了js的模块化标准，当然也是仅仅限制在Nodejs的服务器环境下使用。</p>\n<ul>\n<li><strong>模块化定义：</strong> <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">// hello.js</span><br><span class=\"line\">// exports是作为模块文件唯一出口的对象</span><br><span class=\"line\">function hello()&#123;</span><br><span class=\"line\">\tconsole.log(&apos;hello&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exports.hello = hello;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">// module为全局的对象，其exports属性等同于全局的exports对象</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">\tsayName()&#123;</span><br><span class=\"line\">\t\tconsole.log(&apos;my name is Luo Xia&apos;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：这里需要注意的是一旦使用了module.exports，最终出口将会忽略在全局的exports对象上添加的属性和方法。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">//Module.js</span><br><span class=\"line\">function a()&#123;</span><br><span class=\"line\">\tconsole.log(&apos;a&apos;);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">exports.a = a;</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">\tb()&#123;</span><br><span class=\"line\">\t\tconsole.log(&apos;b&apos;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//testM.js</span><br><span class=\"line\">let m = require(&quot;./Module&quot;);</span><br><span class=\"line\">console.log(typeof m.a); //undefined</span><br><span class=\"line\">console.log(typeof m.b); //function</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>导入：</strong> require(‘路径’)<br>有关require导入的路径规范，可以了解一下NodeJS里npm指令，这里要提到的是模块会优先从缓存加载，会优先加载核心模块（比如npm安装好的依赖包下的模块），之后才会加载文件模块。</li>\n</ul>\n<h2 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h2><p>AMD中译是“异步模块定义”的意思。它是一个浏览器环境下的模块化规范，可以采用同步和异步地加载方式加载模块文件。</p>\n<ul>\n<li><strong>模块化定义：</strong> 全局的 define(id?, dependencies?, factory);<br>id为模块标识符，dependencies为模块依赖的其他模块，factory为依赖加载完毕后执行的回调函数。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 独立加载模块，不依赖其他模块，省略dependencies</span><br><span class=\"line\">define(function()&#123;</span><br><span class=\"line\">\treturn &#123;</span><br><span class=\"line\">\t\tsayHello()&#123;</span><br><span class=\"line\">\t\t\tconsole.log(&apos;hello&apos;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 依赖其他模块</span><br><span class=\"line\">define([&apos;jquery&apos;],function()&#123;</span><br><span class=\"line\">\treturn &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>导入：</strong> require([‘模块名称’], function (‘模块变量引用’){// 代码});</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">// a.js</span><br><span class=\"line\">define(function ()&#123;</span><br><span class=\"line\">　　return &#123;</span><br><span class=\"line\">　　　a:&apos;hello world&apos;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// b.js</span><br><span class=\"line\">require([&apos;./a.js&apos;], function (moduleA)&#123;</span><br><span class=\"line\">    console.log(moduleA.a); // 打印出：hello world</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>应用：</strong> <a href=\"https://requirejs.org/\" target=\"_blank\" rel=\"noopener\">requireJS</a></p>\n</li>\n</ul>\n<h2 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h2><p>CMD是在AMD基础上改进的一种规范，和AMD不同在于对依赖模块的执行时机处理不同，CMD是就近依赖，而AMD是前置依赖。也就是说AMD要在一开始就加载所有的依赖，而CMD是一级一级的加载。</p>\n<ul>\n<li><strong>定义模块：</strong> define(function(require, exports, module) {});<br>像AMD和CommonJS的整合版，和NodeJS兼容性会比较好，后期requireJS</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(function(require,exports,module)&#123;</span><br><span class=\"line\">    require(&apos;...&apos;);</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>导入：</strong> </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">// a.js</span><br><span class=\"line\">define(function (require, exports, module)&#123;</span><br><span class=\"line\">　　exports.a = &apos;hello world&apos;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// b.js</span><br><span class=\"line\">define(function (require, exports, module)&#123;</span><br><span class=\"line\">    var moduleA = require(&apos;./a.js&apos;);  // 同步加载</span><br><span class=\"line\">    // requie.async(id,callback?);  异步加载</span><br><span class=\"line\">    console.log(moduleA.a); // 打印出：hello world</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>比起AMD默认一个当多个用，CMD则是按照API严格区分，AMD中require分全局和局部加载，但是CMD是没有全局require的，每个API都简单纯粹。</p>\n<ul>\n<li><strong>应用：</strong> <a href=\"https://seajs.github.io/seajs/\" target=\"_blank\" rel=\"noopener\">Seajs</a></li>\n</ul>\n<h2 id=\"UMD\"><a href=\"#UMD\" class=\"headerlink\" title=\"UMD\"></a>UMD</h2><p>兼容AMD和CommonJS的规范，还兼容全局引用的方式。因此在浏览器和服务器的环境都可以应用此规范。<br>实际上就是一个兼容性的写法，详细可看：<a href=\"http://www.mjpiero.cc/2016/12/08/UMD%E5%85%BC%E5%AE%B9%E5%A4%9A%E7%A7%8D%E6%A8%A1%E5%9D%97%E8%A7%84%E8%8C%83/\">UMD兼容多种模块规范</a></p>\n<h2 id=\"ES2015-ES2016-Module规范\"><a href=\"#ES2015-ES2016-Module规范\" class=\"headerlink\" title=\"ES2015|ES2016 Module规范\"></a>ES2015|ES2016 Module规范</h2><p>ES2015出来之后，终于有了自己的模块规范。下面我们直接从es6开始说。</p>\n<ul>\n<li><strong>定义模块化：</strong> </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">// test.js</span><br><span class=\"line\">let a = &apos;hello&apos;;</span><br><span class=\"line\">let b = &apos;word&apos;;</span><br><span class=\"line\">let year = 2018;</span><br><span class=\"line\"></span><br><span class=\"line\">// 和CommonJS不同的是，这里export后面跟着的不是对象，而是一系列代表出口的值</span><br><span class=\"line\">// 同样可以用as设置别名</span><br><span class=\"line\">// 例如：export&#123;a as aName&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 这类</span><br><span class=\"line\">export &#123;a, b&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：export后面可以直接跟一个函数，但是不能直接跟对象，对象都需要用<code>{}</code>框起来（export default输出不同）。</p>\n</blockquote>\n<ul>\n<li><strong>导入：</strong><br>我们都知道CommonJS的模块是一个对象，es6的模块不是对象，是编译时执行的，使得编译时就能够确定依赖关系和输入输出的变量。<br>比如说：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 从fs里面加载3个方法，其他方法不加载，这叫”编译时加载“，ES6可以在编译时就完成模块加载。</span><br><span class=\"line\">import &#123; stat, exists, readFile &#125; from &apos;fs&apos;;</span><br></pre></td></tr></table></figure>\n<p>引用的时候我们没法引用模块本身，因为它不是对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#123;a, b, c&#125; from &apos;./test&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123;a as name, b, c&#125; from &apos;./test&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">import * as ALLName from &apos;./test&apos;;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>默认输出：</strong><br>当我们并不知道模块的API，可以提供默认输出：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">export default function () &#123;</span><br><span class=\"line\">  console.log(&apos;foo&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时通过import导出则不需要{}，因为只有一个变量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import name from &apos;./export-default&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 例如我们在使用一些库</span><br><span class=\"line\">// import $ from &apos;jquery&apos;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：es6 Module和CommonJS有个本质的区别，CommonJS加载的模块是对值的拷贝，而ES6 Module是对值的引用，这样模块定义文件内部变量的变化会实时反映到依赖文件，而CommonJS不同。</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>自从es2015出来之后，AMD和CMD规范用的越来越少了，但是并不代表这些完全失去了可用性，考虑到浏览器的兼容性，虽然现在浏览器环境对es6的支持越来越完善了，但考虑对一些低版本的浏览器支持，很多在写es6的时候还是会使用babel对es6做一层转换，比如结合webpack配置去打包一个es6语法的js组件，打包出来会是UMD规范的，这是兼容性比较强的一种规范。<br>当然，实际上只是要大家尽可能养成模块化开发的思想，灵活的在不同环境下去运用好这些规范。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>早期，我们在使用js开发的时候，并没有类的概念，更不用说模块（Module）了，当然现在es2015|2016在语言标准的层面上，已经实现了模块的功能，而且实现的很简单，用意也是为了尽可能成为浏览器和服务器通用的模块解决方案。<br>那么，作为一个模块化的系统，需要具备的是以下能力：</p>\n<ol>\n<li>定义封装的模块。</li>\n<li>定义新模块对其他模块的依赖。</li>\n<li>可对其他模块的引入支持。</li>\n</ol>\n<p>让我们回忆一下广为人知的几个不同的模块化规范。</p>\n<h2 id=\"commonJS\"><a href=\"#commonJS\" class=\"headerlink\" title=\"commonJS\"></a>commonJS</h2><p>在es2015之前，js没有模块化的规范，Nodejs的CommonJS率先制定了js的模块化标准，当然也是仅仅限制在Nodejs的服务器环境下使用。</p>\n<ul>\n<li><strong>模块化定义：</strong> <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">// hello.js</span><br><span class=\"line\">// exports是作为模块文件唯一出口的对象</span><br><span class=\"line\">function hello()&#123;</span><br><span class=\"line\">\tconsole.log(&apos;hello&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exports.hello = hello;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">// module为全局的对象，其exports属性等同于全局的exports对象</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">\tsayName()&#123;</span><br><span class=\"line\">\t\tconsole.log(&apos;my name is Luo Xia&apos;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：这里需要注意的是一旦使用了module.exports，最终出口将会忽略在全局的exports对象上添加的属性和方法。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">//Module.js</span><br><span class=\"line\">function a()&#123;</span><br><span class=\"line\">\tconsole.log(&apos;a&apos;);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">exports.a = a;</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">\tb()&#123;</span><br><span class=\"line\">\t\tconsole.log(&apos;b&apos;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//testM.js</span><br><span class=\"line\">let m = require(&quot;./Module&quot;);</span><br><span class=\"line\">console.log(typeof m.a); //undefined</span><br><span class=\"line\">console.log(typeof m.b); //function</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>导入：</strong> require(‘路径’)<br>有关require导入的路径规范，可以了解一下NodeJS里npm指令，这里要提到的是模块会优先从缓存加载，会优先加载核心模块（比如npm安装好的依赖包下的模块），之后才会加载文件模块。</li>\n</ul>\n<h2 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h2><p>AMD中译是“异步模块定义”的意思。它是一个浏览器环境下的模块化规范，可以采用同步和异步地加载方式加载模块文件。</p>\n<ul>\n<li><strong>模块化定义：</strong> 全局的 define(id?, dependencies?, factory);<br>id为模块标识符，dependencies为模块依赖的其他模块，factory为依赖加载完毕后执行的回调函数。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 独立加载模块，不依赖其他模块，省略dependencies</span><br><span class=\"line\">define(function()&#123;</span><br><span class=\"line\">\treturn &#123;</span><br><span class=\"line\">\t\tsayHello()&#123;</span><br><span class=\"line\">\t\t\tconsole.log(&apos;hello&apos;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 依赖其他模块</span><br><span class=\"line\">define([&apos;jquery&apos;],function()&#123;</span><br><span class=\"line\">\treturn &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>导入：</strong> require([‘模块名称’], function (‘模块变量引用’){// 代码});</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">// a.js</span><br><span class=\"line\">define(function ()&#123;</span><br><span class=\"line\">　　return &#123;</span><br><span class=\"line\">　　　a:&apos;hello world&apos;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// b.js</span><br><span class=\"line\">require([&apos;./a.js&apos;], function (moduleA)&#123;</span><br><span class=\"line\">    console.log(moduleA.a); // 打印出：hello world</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>应用：</strong> <a href=\"https://requirejs.org/\" target=\"_blank\" rel=\"noopener\">requireJS</a></p>\n</li>\n</ul>\n<h2 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h2><p>CMD是在AMD基础上改进的一种规范，和AMD不同在于对依赖模块的执行时机处理不同，CMD是就近依赖，而AMD是前置依赖。也就是说AMD要在一开始就加载所有的依赖，而CMD是一级一级的加载。</p>\n<ul>\n<li><strong>定义模块：</strong> define(function(require, exports, module) {});<br>像AMD和CommonJS的整合版，和NodeJS兼容性会比较好，后期requireJS</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(function(require,exports,module)&#123;</span><br><span class=\"line\">    require(&apos;...&apos;);</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>导入：</strong> </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">// a.js</span><br><span class=\"line\">define(function (require, exports, module)&#123;</span><br><span class=\"line\">　　exports.a = &apos;hello world&apos;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// b.js</span><br><span class=\"line\">define(function (require, exports, module)&#123;</span><br><span class=\"line\">    var moduleA = require(&apos;./a.js&apos;);  // 同步加载</span><br><span class=\"line\">    // requie.async(id,callback?);  异步加载</span><br><span class=\"line\">    console.log(moduleA.a); // 打印出：hello world</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>比起AMD默认一个当多个用，CMD则是按照API严格区分，AMD中require分全局和局部加载，但是CMD是没有全局require的，每个API都简单纯粹。</p>\n<ul>\n<li><strong>应用：</strong> <a href=\"https://seajs.github.io/seajs/\" target=\"_blank\" rel=\"noopener\">Seajs</a></li>\n</ul>\n<h2 id=\"UMD\"><a href=\"#UMD\" class=\"headerlink\" title=\"UMD\"></a>UMD</h2><p>兼容AMD和CommonJS的规范，还兼容全局引用的方式。因此在浏览器和服务器的环境都可以应用此规范。<br>实际上就是一个兼容性的写法，详细可看：<a href=\"http://www.mjpiero.cc/2016/12/08/UMD%E5%85%BC%E5%AE%B9%E5%A4%9A%E7%A7%8D%E6%A8%A1%E5%9D%97%E8%A7%84%E8%8C%83/\">UMD兼容多种模块规范</a></p>\n<h2 id=\"ES2015-ES2016-Module规范\"><a href=\"#ES2015-ES2016-Module规范\" class=\"headerlink\" title=\"ES2015|ES2016 Module规范\"></a>ES2015|ES2016 Module规范</h2><p>ES2015出来之后，终于有了自己的模块规范。下面我们直接从es6开始说。</p>\n<ul>\n<li><strong>定义模块化：</strong> </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">// test.js</span><br><span class=\"line\">let a = &apos;hello&apos;;</span><br><span class=\"line\">let b = &apos;word&apos;;</span><br><span class=\"line\">let year = 2018;</span><br><span class=\"line\"></span><br><span class=\"line\">// 和CommonJS不同的是，这里export后面跟着的不是对象，而是一系列代表出口的值</span><br><span class=\"line\">// 同样可以用as设置别名</span><br><span class=\"line\">// 例如：export&#123;a as aName&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 这类</span><br><span class=\"line\">export &#123;a, b&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：export后面可以直接跟一个函数，但是不能直接跟对象，对象都需要用<code>{}</code>框起来（export default输出不同）。</p>\n</blockquote>\n<ul>\n<li><strong>导入：</strong><br>我们都知道CommonJS的模块是一个对象，es6的模块不是对象，是编译时执行的，使得编译时就能够确定依赖关系和输入输出的变量。<br>比如说：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 从fs里面加载3个方法，其他方法不加载，这叫”编译时加载“，ES6可以在编译时就完成模块加载。</span><br><span class=\"line\">import &#123; stat, exists, readFile &#125; from &apos;fs&apos;;</span><br></pre></td></tr></table></figure>\n<p>引用的时候我们没法引用模块本身，因为它不是对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#123;a, b, c&#125; from &apos;./test&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123;a as name, b, c&#125; from &apos;./test&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">import * as ALLName from &apos;./test&apos;;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>默认输出：</strong><br>当我们并不知道模块的API，可以提供默认输出：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">export default function () &#123;</span><br><span class=\"line\">  console.log(&apos;foo&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时通过import导出则不需要{}，因为只有一个变量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import name from &apos;./export-default&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 例如我们在使用一些库</span><br><span class=\"line\">// import $ from &apos;jquery&apos;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：es6 Module和CommonJS有个本质的区别，CommonJS加载的模块是对值的拷贝，而ES6 Module是对值的引用，这样模块定义文件内部变量的变化会实时反映到依赖文件，而CommonJS不同。</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>自从es2015出来之后，AMD和CMD规范用的越来越少了，但是并不代表这些完全失去了可用性，考虑到浏览器的兼容性，虽然现在浏览器环境对es6的支持越来越完善了，但考虑对一些低版本的浏览器支持，很多在写es6的时候还是会使用babel对es6做一层转换，比如结合webpack配置去打包一个es6语法的js组件，打包出来会是UMD规范的，这是兼容性比较强的一种规范。<br>当然，实际上只是要大家尽可能养成模块化开发的思想，灵活的在不同环境下去运用好这些规范。</p>\n"},{"title":"mac 使用tree命令","date":"2018-08-23T03:59:10.000Z","_content":"\n开发的时候想要生成树状的目录结构，Linux下有个tree命令可以直接打印出树状的目录结构，可以了解一下，但是mac下默认是木有tree命令的。\n网上搜了一下，mark一下：\n\n使用find命令模拟出tree命令的效果，如显示当前目录的 tree 的命令：\n\n```\n$ find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'\n```\n\n还可以写一个别名来快速执行该命令，运行如下命令，将上面这个命令写到~/.bash_profile里，以后直接运行tree命令就更方便了:\n\n```\nalias tree=\"find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'\"\n```\n\n也可以使用 homebrew 安装 tree 命令行：\n```\n$ brew install tree\n```\n这样就在你的mac上安装了 tree 命令行了。\n\n \n\ntree命令行参数（只实用与安装了tree命令行工具）：\n\n- -a 显示所有文件和目录。\n- -A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。\n- -C 在文件和目录清单加上色彩，便于区分各种类型。\n- -d 显示目录名称而非内容。\n- -D 列出文件或目录的更改时间。\n- -f 在每个文件或目录之前，显示完整的相对路径名称。\n- -F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上\"*\",\"/\",\"=\",\"@\",\"|\"号。\n- -g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。\n- -i 不以阶梯状列出文件或目录名称。\n- -I 不显示符合范本样式的文件或目录名称。\n- -l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。\n- -n 不在文件和目录清单加上色彩。\n- -N 直接列出文件和目录名称，包括控制字符。\n- -p 列出权限标示。\n- -P 只显示符合范本样式的文件或目录名称。\n- -q 用\"?\"号取代控制字符，列出文件和目录名称。\n- -s 列出文件或目录大小。\n- -t 用文件和目录的更改时间排序。\n- -u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。\n- -x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。","source":"_posts/mac-使用tree命令.md","raw":"---\ntitle: mac 使用tree命令\ndate: 2018-08-23 11:59:10\ntags: [环境搭建,linux]\ncategories: [环境搭建]\n---\n\n开发的时候想要生成树状的目录结构，Linux下有个tree命令可以直接打印出树状的目录结构，可以了解一下，但是mac下默认是木有tree命令的。\n网上搜了一下，mark一下：\n\n使用find命令模拟出tree命令的效果，如显示当前目录的 tree 的命令：\n\n```\n$ find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'\n```\n\n还可以写一个别名来快速执行该命令，运行如下命令，将上面这个命令写到~/.bash_profile里，以后直接运行tree命令就更方便了:\n\n```\nalias tree=\"find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'\"\n```\n\n也可以使用 homebrew 安装 tree 命令行：\n```\n$ brew install tree\n```\n这样就在你的mac上安装了 tree 命令行了。\n\n \n\ntree命令行参数（只实用与安装了tree命令行工具）：\n\n- -a 显示所有文件和目录。\n- -A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。\n- -C 在文件和目录清单加上色彩，便于区分各种类型。\n- -d 显示目录名称而非内容。\n- -D 列出文件或目录的更改时间。\n- -f 在每个文件或目录之前，显示完整的相对路径名称。\n- -F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上\"*\",\"/\",\"=\",\"@\",\"|\"号。\n- -g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。\n- -i 不以阶梯状列出文件或目录名称。\n- -I 不显示符合范本样式的文件或目录名称。\n- -l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。\n- -n 不在文件和目录清单加上色彩。\n- -N 直接列出文件和目录名称，包括控制字符。\n- -p 列出权限标示。\n- -P 只显示符合范本样式的文件或目录名称。\n- -q 用\"?\"号取代控制字符，列出文件和目录名称。\n- -s 列出文件或目录大小。\n- -t 用文件和目录的更改时间排序。\n- -u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。\n- -x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。","slug":"mac-使用tree命令","published":1,"updated":"2018-08-23T07:44:14.898Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjleqs1nz000dq3v3m6qf8fgs","content":"<p>开发的时候想要生成树状的目录结构，Linux下有个tree命令可以直接打印出树状的目录结构，可以了解一下，但是mac下默认是木有tree命令的。<br>网上搜了一下，mark一下：</p>\n<p>使用find命令模拟出tree命令的效果，如显示当前目录的 tree 的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos;</span><br></pre></td></tr></table></figure>\n<p>还可以写一个别名来快速执行该命令，运行如下命令，将上面这个命令写到~/.bash_profile里，以后直接运行tree命令就更方便了:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">alias tree=&quot;find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos;&quot;</span><br></pre></td></tr></table></figure>\n<p>也可以使用 homebrew 安装 tree 命令行：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ brew install tree</span><br></pre></td></tr></table></figure></p>\n<p>这样就在你的mac上安装了 tree 命令行了。</p>\n<p>tree命令行参数（只实用与安装了tree命令行工具）：</p>\n<ul>\n<li>-a 显示所有文件和目录。</li>\n<li>-A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。</li>\n<li>-C 在文件和目录清单加上色彩，便于区分各种类型。</li>\n<li>-d 显示目录名称而非内容。</li>\n<li>-D 列出文件或目录的更改时间。</li>\n<li>-f 在每个文件或目录之前，显示完整的相对路径名称。</li>\n<li>-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上”*”,”/“,”=”,”@”,”|”号。</li>\n<li>-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。</li>\n<li>-i 不以阶梯状列出文件或目录名称。</li>\n<li>-I 不显示符合范本样式的文件或目录名称。</li>\n<li>-l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。</li>\n<li>-n 不在文件和目录清单加上色彩。</li>\n<li>-N 直接列出文件和目录名称，包括控制字符。</li>\n<li>-p 列出权限标示。</li>\n<li>-P 只显示符合范本样式的文件或目录名称。</li>\n<li>-q 用”?”号取代控制字符，列出文件和目录名称。</li>\n<li>-s 列出文件或目录大小。</li>\n<li>-t 用文件和目录的更改时间排序。</li>\n<li>-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。</li>\n<li>-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>开发的时候想要生成树状的目录结构，Linux下有个tree命令可以直接打印出树状的目录结构，可以了解一下，但是mac下默认是木有tree命令的。<br>网上搜了一下，mark一下：</p>\n<p>使用find命令模拟出tree命令的效果，如显示当前目录的 tree 的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos;</span><br></pre></td></tr></table></figure>\n<p>还可以写一个别名来快速执行该命令，运行如下命令，将上面这个命令写到~/.bash_profile里，以后直接运行tree命令就更方便了:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">alias tree=&quot;find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos;&quot;</span><br></pre></td></tr></table></figure>\n<p>也可以使用 homebrew 安装 tree 命令行：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ brew install tree</span><br></pre></td></tr></table></figure></p>\n<p>这样就在你的mac上安装了 tree 命令行了。</p>\n<p>tree命令行参数（只实用与安装了tree命令行工具）：</p>\n<ul>\n<li>-a 显示所有文件和目录。</li>\n<li>-A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。</li>\n<li>-C 在文件和目录清单加上色彩，便于区分各种类型。</li>\n<li>-d 显示目录名称而非内容。</li>\n<li>-D 列出文件或目录的更改时间。</li>\n<li>-f 在每个文件或目录之前，显示完整的相对路径名称。</li>\n<li>-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上”*”,”/“,”=”,”@”,”|”号。</li>\n<li>-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。</li>\n<li>-i 不以阶梯状列出文件或目录名称。</li>\n<li>-I 不显示符合范本样式的文件或目录名称。</li>\n<li>-l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。</li>\n<li>-n 不在文件和目录清单加上色彩。</li>\n<li>-N 直接列出文件和目录名称，包括控制字符。</li>\n<li>-p 列出权限标示。</li>\n<li>-P 只显示符合范本样式的文件或目录名称。</li>\n<li>-q 用”?”号取代控制字符，列出文件和目录名称。</li>\n<li>-s 列出文件或目录大小。</li>\n<li>-t 用文件和目录的更改时间排序。</li>\n<li>-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。</li>\n<li>-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。</li>\n</ul>\n"},{"title":"mainifest.json","date":"2018-08-23T04:24:55.000Z","_content":"\n在看别人开发的架子的时候，看到了这个文件，网上大概搜了一下，在此mark一下。\n\ndevelopers.google.com 上有个简介，中译过来被叫做“网络应用清单”，很多人也将他和web离线缓存联系在一起。\n实际上，开发者可以利用 mainifest.json 控制在用户想要看到应用的区域（例如移动设备主屏幕）中如何向用户显示网络应用或网站，指示用户可以启动哪些功能，以及定义其在启动时的外观。\n\nmainifest.json 提供了将网站书签保存到设备主屏幕的功能。当网站以这种方式启动时：\n\n- 它具有唯一的图标和名称，以便用户将其与其他网站区分开来。\n- 它会在下载资源或从缓存恢复资源时向用户显示某些信息。\n- 它会向浏览器提供默认显示特性，以避免网站资源可用时的过渡过于生硬。\n- 它通过一个文本文件中的元数据这一简单机制完成所有这些工作。那就是网络应用清单。\n\n>注：尽管您可以在任何网站上使用该文件，它们却是 PWA 的必备要素。\n\n## 创建清单\n下面是一个示例：\n```\n{\n  \"short_name\": \"AirHorner\",\n  \"name\": \"Kinlan's AirHorner of Infamy\",\n  \"icons\": [                              // 自定义图标\n    {\n      \"src\": \"launcher-icon-1x.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"48x48\"\n    },\n    {\n      \"src\": \"launcher-icon-2x.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"96x96\"\n    },\n    {\n      \"src\": \"launcher-icon-4x.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"192x192\"\n    }\n  ],\n  \"start_url\": \"index.html?launcher=true\",  // 设置启动网址\n  \"background_color\": \"#000000\"             // 设置背景颜色\n}\n```\n确保包括以下内容：\n\n- 在用户主屏幕上用作文本的 short_name。\n- 在网络应用安装横幅中使用的 name。\n\n## 将清单的相关信息告知浏览器\n在您创建清单且将清单添加到您的网站之后，将 link 标记添加到包含网络应用的所有页面上，如下所示：\n```\n<link rel=\"manifest\" href=\"/manifest.json\">\n```\n\n## 测试您的清单\n如果您想要手动验证网络应用清单是否已正确设置，请使用 Chrome DevTools 的 Application 面板上的 Manifest 标签。\n\n![](https://developers.google.com/web/fundamentals/web-app-manifest/images/devtools-manifest.png?hl=zh-cn)\n\n> [google开发者原文](https://developers.google.com/web/fundamentals/web-app-manifest/?hl=zh-cn)","source":"_posts/mainifest-json.md","raw":"---\ntitle: mainifest.json\ndate: 2018-08-23 12:24:55\ntags: [web移动端, 缓存, javascript]\ncategories: [javascript]\n---\n\n在看别人开发的架子的时候，看到了这个文件，网上大概搜了一下，在此mark一下。\n\ndevelopers.google.com 上有个简介，中译过来被叫做“网络应用清单”，很多人也将他和web离线缓存联系在一起。\n实际上，开发者可以利用 mainifest.json 控制在用户想要看到应用的区域（例如移动设备主屏幕）中如何向用户显示网络应用或网站，指示用户可以启动哪些功能，以及定义其在启动时的外观。\n\nmainifest.json 提供了将网站书签保存到设备主屏幕的功能。当网站以这种方式启动时：\n\n- 它具有唯一的图标和名称，以便用户将其与其他网站区分开来。\n- 它会在下载资源或从缓存恢复资源时向用户显示某些信息。\n- 它会向浏览器提供默认显示特性，以避免网站资源可用时的过渡过于生硬。\n- 它通过一个文本文件中的元数据这一简单机制完成所有这些工作。那就是网络应用清单。\n\n>注：尽管您可以在任何网站上使用该文件，它们却是 PWA 的必备要素。\n\n## 创建清单\n下面是一个示例：\n```\n{\n  \"short_name\": \"AirHorner\",\n  \"name\": \"Kinlan's AirHorner of Infamy\",\n  \"icons\": [                              // 自定义图标\n    {\n      \"src\": \"launcher-icon-1x.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"48x48\"\n    },\n    {\n      \"src\": \"launcher-icon-2x.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"96x96\"\n    },\n    {\n      \"src\": \"launcher-icon-4x.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"192x192\"\n    }\n  ],\n  \"start_url\": \"index.html?launcher=true\",  // 设置启动网址\n  \"background_color\": \"#000000\"             // 设置背景颜色\n}\n```\n确保包括以下内容：\n\n- 在用户主屏幕上用作文本的 short_name。\n- 在网络应用安装横幅中使用的 name。\n\n## 将清单的相关信息告知浏览器\n在您创建清单且将清单添加到您的网站之后，将 link 标记添加到包含网络应用的所有页面上，如下所示：\n```\n<link rel=\"manifest\" href=\"/manifest.json\">\n```\n\n## 测试您的清单\n如果您想要手动验证网络应用清单是否已正确设置，请使用 Chrome DevTools 的 Application 面板上的 Manifest 标签。\n\n![](https://developers.google.com/web/fundamentals/web-app-manifest/images/devtools-manifest.png?hl=zh-cn)\n\n> [google开发者原文](https://developers.google.com/web/fundamentals/web-app-manifest/?hl=zh-cn)","slug":"mainifest-json","published":1,"updated":"2018-08-24T09:58:52.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjleqs1o0000hq3v3z0u5d6zy","content":"<p>在看别人开发的架子的时候，看到了这个文件，网上大概搜了一下，在此mark一下。</p>\n<p>developers.google.com 上有个简介，中译过来被叫做“网络应用清单”，很多人也将他和web离线缓存联系在一起。<br>实际上，开发者可以利用 mainifest.json 控制在用户想要看到应用的区域（例如移动设备主屏幕）中如何向用户显示网络应用或网站，指示用户可以启动哪些功能，以及定义其在启动时的外观。</p>\n<p>mainifest.json 提供了将网站书签保存到设备主屏幕的功能。当网站以这种方式启动时：</p>\n<ul>\n<li>它具有唯一的图标和名称，以便用户将其与其他网站区分开来。</li>\n<li>它会在下载资源或从缓存恢复资源时向用户显示某些信息。</li>\n<li>它会向浏览器提供默认显示特性，以避免网站资源可用时的过渡过于生硬。</li>\n<li>它通过一个文本文件中的元数据这一简单机制完成所有这些工作。那就是网络应用清单。</li>\n</ul>\n<blockquote>\n<p>注：尽管您可以在任何网站上使用该文件，它们却是 PWA 的必备要素。</p>\n</blockquote>\n<h2 id=\"创建清单\"><a href=\"#创建清单\" class=\"headerlink\" title=\"创建清单\"></a>创建清单</h2><p>下面是一个示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;short_name&quot;: &quot;AirHorner&quot;,</span><br><span class=\"line\">  &quot;name&quot;: &quot;Kinlan&apos;s AirHorner of Infamy&quot;,</span><br><span class=\"line\">  &quot;icons&quot;: [                              // 自定义图标</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;src&quot;: &quot;launcher-icon-1x.png&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;image/png&quot;,</span><br><span class=\"line\">      &quot;sizes&quot;: &quot;48x48&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;src&quot;: &quot;launcher-icon-2x.png&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;image/png&quot;,</span><br><span class=\"line\">      &quot;sizes&quot;: &quot;96x96&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;src&quot;: &quot;launcher-icon-4x.png&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;image/png&quot;,</span><br><span class=\"line\">      &quot;sizes&quot;: &quot;192x192&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;start_url&quot;: &quot;index.html?launcher=true&quot;,  // 设置启动网址</span><br><span class=\"line\">  &quot;background_color&quot;: &quot;#000000&quot;             // 设置背景颜色</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>确保包括以下内容：</p>\n<ul>\n<li>在用户主屏幕上用作文本的 short_name。</li>\n<li>在网络应用安装横幅中使用的 name。</li>\n</ul>\n<h2 id=\"将清单的相关信息告知浏览器\"><a href=\"#将清单的相关信息告知浏览器\" class=\"headerlink\" title=\"将清单的相关信息告知浏览器\"></a>将清单的相关信息告知浏览器</h2><p>在您创建清单且将清单添加到您的网站之后，将 link 标记添加到包含网络应用的所有页面上，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;link rel=&quot;manifest&quot; href=&quot;/manifest.json&quot;&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"测试您的清单\"><a href=\"#测试您的清单\" class=\"headerlink\" title=\"测试您的清单\"></a>测试您的清单</h2><p>如果您想要手动验证网络应用清单是否已正确设置，请使用 Chrome DevTools 的 Application 面板上的 Manifest 标签。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://developers.google.com/web/fundamentals/web-app-manifest/images/devtools-manifest.png?hl=zh-cn\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<blockquote>\n<p><a href=\"https://developers.google.com/web/fundamentals/web-app-manifest/?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">google开发者原文</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>在看别人开发的架子的时候，看到了这个文件，网上大概搜了一下，在此mark一下。</p>\n<p>developers.google.com 上有个简介，中译过来被叫做“网络应用清单”，很多人也将他和web离线缓存联系在一起。<br>实际上，开发者可以利用 mainifest.json 控制在用户想要看到应用的区域（例如移动设备主屏幕）中如何向用户显示网络应用或网站，指示用户可以启动哪些功能，以及定义其在启动时的外观。</p>\n<p>mainifest.json 提供了将网站书签保存到设备主屏幕的功能。当网站以这种方式启动时：</p>\n<ul>\n<li>它具有唯一的图标和名称，以便用户将其与其他网站区分开来。</li>\n<li>它会在下载资源或从缓存恢复资源时向用户显示某些信息。</li>\n<li>它会向浏览器提供默认显示特性，以避免网站资源可用时的过渡过于生硬。</li>\n<li>它通过一个文本文件中的元数据这一简单机制完成所有这些工作。那就是网络应用清单。</li>\n</ul>\n<blockquote>\n<p>注：尽管您可以在任何网站上使用该文件，它们却是 PWA 的必备要素。</p>\n</blockquote>\n<h2 id=\"创建清单\"><a href=\"#创建清单\" class=\"headerlink\" title=\"创建清单\"></a>创建清单</h2><p>下面是一个示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;short_name&quot;: &quot;AirHorner&quot;,</span><br><span class=\"line\">  &quot;name&quot;: &quot;Kinlan&apos;s AirHorner of Infamy&quot;,</span><br><span class=\"line\">  &quot;icons&quot;: [                              // 自定义图标</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;src&quot;: &quot;launcher-icon-1x.png&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;image/png&quot;,</span><br><span class=\"line\">      &quot;sizes&quot;: &quot;48x48&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;src&quot;: &quot;launcher-icon-2x.png&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;image/png&quot;,</span><br><span class=\"line\">      &quot;sizes&quot;: &quot;96x96&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;src&quot;: &quot;launcher-icon-4x.png&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;image/png&quot;,</span><br><span class=\"line\">      &quot;sizes&quot;: &quot;192x192&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;start_url&quot;: &quot;index.html?launcher=true&quot;,  // 设置启动网址</span><br><span class=\"line\">  &quot;background_color&quot;: &quot;#000000&quot;             // 设置背景颜色</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>确保包括以下内容：</p>\n<ul>\n<li>在用户主屏幕上用作文本的 short_name。</li>\n<li>在网络应用安装横幅中使用的 name。</li>\n</ul>\n<h2 id=\"将清单的相关信息告知浏览器\"><a href=\"#将清单的相关信息告知浏览器\" class=\"headerlink\" title=\"将清单的相关信息告知浏览器\"></a>将清单的相关信息告知浏览器</h2><p>在您创建清单且将清单添加到您的网站之后，将 link 标记添加到包含网络应用的所有页面上，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;link rel=&quot;manifest&quot; href=&quot;/manifest.json&quot;&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"测试您的清单\"><a href=\"#测试您的清单\" class=\"headerlink\" title=\"测试您的清单\"></a>测试您的清单</h2><p>如果您想要手动验证网络应用清单是否已正确设置，请使用 Chrome DevTools 的 Application 面板上的 Manifest 标签。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://developers.google.com/web/fundamentals/web-app-manifest/images/devtools-manifest.png?hl=zh-cn\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<blockquote>\n<p><a href=\"https://developers.google.com/web/fundamentals/web-app-manifest/?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">google开发者原文</a></p>\n</blockquote>\n"},{"title":"threeJS 学习笔记 - 材质","date":"2018-08-23T04:15:58.000Z","_content":"\n一个材质结合 THREE.Geometry 对象，可以构成 THREE.Mesh 对象。材质就相当于物体模型的皮肤，决定物体的外观光泽，看上去是不是像金属或者线框外表等。\n\n## threeJS 提供的材质\n\n- MeshBasicMaterial：__网格基础材质__。基础材质，用于给几何体赋予一种简单的颜色，或者显示几何体的线框。\n- MeshDepthMaterial：__网格深度材质__。这个材质使用从摄像机到网格的距离来决定如何给网格上色。\n- MeshNormalMaterial：__网格法向材质__。这是一种简单的材质，根据法向向量计算物体表面的颜色。\n- MeshFaceMaterial：__网格面材质__。这是一个容器，可以为几何体的各个表面指定不同的材质。\n- MeshLambertMaterial：__网格Lambert材质__。这是一种考虑光照影响的材质，用于创建暗淡的、不光亮的物体。\n- MeshPhongMaterial：__网格Phong式材质__。这是一种考虑光照影响的材质，用于创建光亮的物体。\n- ShaderMaterial：__着色器材质__。这种材质允许使用自定义的着色器程序，直接控制顶点的放置方式以及像素的着色方式。\n- LineBasicMaterial：__直线基础材质__。这种材质可以用于 THREE.Line（直线）几何体，用来创建着色的直线。\n- LineDashMaterial：__直线基础材质__。 这种材质与 LineBasicMaterial（直线基础材质）一样，但允许创建出一种虚线的效果。\n\n## 3种常用材质\n基础属性常用的了解下：\n\n- ID：标识材质\n- name： 名称\n- opacity：透明度，结合transparent使用，范围为0~1\n- transparent：是否透明，如果为true则结合opacity设置透明度。如果为false则物体不透明\n- visible：是否可见，false则看不见，默认可以看见\n- side：侧面，觉得几何体的哪一面应用这个材质，默认为THREE.FrontSide(前外面)，还有THREE.BackSide(后内面)和THREE.DoubleSide(两面)\n- needUpdate：如果为true，则在几何体使用新的材质的时候更新材质缓存\n\n### ① THREE.MeshBasicMaterial 基础网格材质\n使用这种材质的网格，通常被渲染成简单的多边形，而且可以选择想要线框。除了一些THREE.Material的属性以外，还有如下属性\n\n- color：设置材质的颜色\n- wireframe：如果为true，则将材质渲染成线框，在调试的时候可以起到很好的作用\n- wireframeLinewidth：wireframe为true时，设置线框中线的宽度\n- wireframeLinecap：决定线框端点如何显示，可选的值 round，bevel(斜角)和miter(尖角)。\n- vertexColors：通过这属性，定义顶点的颜色，在canvasRender中不起作用。\n- fog：决定单个材质的是否受全局雾化的影响。 \n\n>对于fog属性，在全局中如果设定了雾化属性，那么本应该对所有场景的物体都添加雾化效果。\n例如：\n```\nscene.fog=new THREE.Fog(0xffffff,0.015,100)\n```\n而如果在当前材质中设置的如\n```\nvar cubeGeo= new THREE.CubeGeometry(30,30,30);\nvar cubeMat= new THREE.MeshBasicMaterial({color:\"0x0c0c0c\",fog:false})\nvar cude= new THREE.Mesh(cubeGeo,cubeMat);\nscene.add(cube);\n```\n则在当前这个cude方块中，并不能体现雾化效果。\n```\nmaterial.wireframe = true;\n```\nwireframe是否为true  显示如下\n![](/images/WechatIMG42820.png)\n![](/images/WechatIMG42821.png)\n\n### ② THREE.MeshLambertMaterial暗淡不发光\n该材质对光源有反应，除了之前说过的color，transparent，opacity，fog等属性，还有一些特有的属性，总结起来就只有2个\n\n- ambient：设置材质的环境色，和AmbientLight光源一起使用，这个颜色会与环境光的颜色相乘。即是对光源作出反应。\n- emissive：设置材质发射的颜色，不是一种光源，而是一种不受光照影响的颜色。默认为黑色\n```\nvar cubeGeometry = new THREE.BoxGeometry(15, 15, 15);\nvar meshMaterial = new THREE.MeshLamebertMaterial({color: 0x7777ff});\nvar cube = new THREE.Mesh(cubeGeometry, meshMaterial);\n```\n![](/images/WechatIMG42823.png)\n\n### ③ THREE.MeshPhongMaterial金属发亮的物体\n该材质对光源有反应，除了之前说过的color，transparent，opacity，fog等属性，还有一些特有的属性，总结起来有4个\n\n- ambient：设置材质的环境色，和AmbientLight光源一起使用，这个颜色会与环境光的颜色相乘。即是对光源作出反应。\n- emissive：设置材质发射的颜色，不是一种光源，而是一种不受光照影响的颜色。默认为黑色\n- specular：指定该材质的光亮程度及其高光部分的颜色，如果设置成和color属性相同的颜色，则会得到另一个更加类似金属的材质，如果设置成grey灰色，则看起来像塑料\n- shininess：指定高光部分的亮度，默认值为30.\n```\n var meshMaterial = new THREE.MeshPhongMaterial({\n        color: 0x7777ff，\n        specular:0x7777ff,\n        shininess:30\n});\n```\n![](/images/QQ20180727-183707.gif)\n","source":"_posts/threeJS-学习笔记-材质.md","raw":"---\ntitle: threeJS 学习笔记 - 材质\ndate: 2018-08-23 12:15:58\ntags: [threejs]\ncategories: [threejs]\n---\n\n一个材质结合 THREE.Geometry 对象，可以构成 THREE.Mesh 对象。材质就相当于物体模型的皮肤，决定物体的外观光泽，看上去是不是像金属或者线框外表等。\n\n## threeJS 提供的材质\n\n- MeshBasicMaterial：__网格基础材质__。基础材质，用于给几何体赋予一种简单的颜色，或者显示几何体的线框。\n- MeshDepthMaterial：__网格深度材质__。这个材质使用从摄像机到网格的距离来决定如何给网格上色。\n- MeshNormalMaterial：__网格法向材质__。这是一种简单的材质，根据法向向量计算物体表面的颜色。\n- MeshFaceMaterial：__网格面材质__。这是一个容器，可以为几何体的各个表面指定不同的材质。\n- MeshLambertMaterial：__网格Lambert材质__。这是一种考虑光照影响的材质，用于创建暗淡的、不光亮的物体。\n- MeshPhongMaterial：__网格Phong式材质__。这是一种考虑光照影响的材质，用于创建光亮的物体。\n- ShaderMaterial：__着色器材质__。这种材质允许使用自定义的着色器程序，直接控制顶点的放置方式以及像素的着色方式。\n- LineBasicMaterial：__直线基础材质__。这种材质可以用于 THREE.Line（直线）几何体，用来创建着色的直线。\n- LineDashMaterial：__直线基础材质__。 这种材质与 LineBasicMaterial（直线基础材质）一样，但允许创建出一种虚线的效果。\n\n## 3种常用材质\n基础属性常用的了解下：\n\n- ID：标识材质\n- name： 名称\n- opacity：透明度，结合transparent使用，范围为0~1\n- transparent：是否透明，如果为true则结合opacity设置透明度。如果为false则物体不透明\n- visible：是否可见，false则看不见，默认可以看见\n- side：侧面，觉得几何体的哪一面应用这个材质，默认为THREE.FrontSide(前外面)，还有THREE.BackSide(后内面)和THREE.DoubleSide(两面)\n- needUpdate：如果为true，则在几何体使用新的材质的时候更新材质缓存\n\n### ① THREE.MeshBasicMaterial 基础网格材质\n使用这种材质的网格，通常被渲染成简单的多边形，而且可以选择想要线框。除了一些THREE.Material的属性以外，还有如下属性\n\n- color：设置材质的颜色\n- wireframe：如果为true，则将材质渲染成线框，在调试的时候可以起到很好的作用\n- wireframeLinewidth：wireframe为true时，设置线框中线的宽度\n- wireframeLinecap：决定线框端点如何显示，可选的值 round，bevel(斜角)和miter(尖角)。\n- vertexColors：通过这属性，定义顶点的颜色，在canvasRender中不起作用。\n- fog：决定单个材质的是否受全局雾化的影响。 \n\n>对于fog属性，在全局中如果设定了雾化属性，那么本应该对所有场景的物体都添加雾化效果。\n例如：\n```\nscene.fog=new THREE.Fog(0xffffff,0.015,100)\n```\n而如果在当前材质中设置的如\n```\nvar cubeGeo= new THREE.CubeGeometry(30,30,30);\nvar cubeMat= new THREE.MeshBasicMaterial({color:\"0x0c0c0c\",fog:false})\nvar cude= new THREE.Mesh(cubeGeo,cubeMat);\nscene.add(cube);\n```\n则在当前这个cude方块中，并不能体现雾化效果。\n```\nmaterial.wireframe = true;\n```\nwireframe是否为true  显示如下\n![](/images/WechatIMG42820.png)\n![](/images/WechatIMG42821.png)\n\n### ② THREE.MeshLambertMaterial暗淡不发光\n该材质对光源有反应，除了之前说过的color，transparent，opacity，fog等属性，还有一些特有的属性，总结起来就只有2个\n\n- ambient：设置材质的环境色，和AmbientLight光源一起使用，这个颜色会与环境光的颜色相乘。即是对光源作出反应。\n- emissive：设置材质发射的颜色，不是一种光源，而是一种不受光照影响的颜色。默认为黑色\n```\nvar cubeGeometry = new THREE.BoxGeometry(15, 15, 15);\nvar meshMaterial = new THREE.MeshLamebertMaterial({color: 0x7777ff});\nvar cube = new THREE.Mesh(cubeGeometry, meshMaterial);\n```\n![](/images/WechatIMG42823.png)\n\n### ③ THREE.MeshPhongMaterial金属发亮的物体\n该材质对光源有反应，除了之前说过的color，transparent，opacity，fog等属性，还有一些特有的属性，总结起来有4个\n\n- ambient：设置材质的环境色，和AmbientLight光源一起使用，这个颜色会与环境光的颜色相乘。即是对光源作出反应。\n- emissive：设置材质发射的颜色，不是一种光源，而是一种不受光照影响的颜色。默认为黑色\n- specular：指定该材质的光亮程度及其高光部分的颜色，如果设置成和color属性相同的颜色，则会得到另一个更加类似金属的材质，如果设置成grey灰色，则看起来像塑料\n- shininess：指定高光部分的亮度，默认值为30.\n```\n var meshMaterial = new THREE.MeshPhongMaterial({\n        color: 0x7777ff，\n        specular:0x7777ff,\n        shininess:30\n});\n```\n![](/images/QQ20180727-183707.gif)\n","slug":"threeJS-学习笔记-材质","published":1,"updated":"2018-08-23T07:49:57.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjleqs1o3000jq3v3g4p2nuvq","content":"<p>一个材质结合 THREE.Geometry 对象，可以构成 THREE.Mesh 对象。材质就相当于物体模型的皮肤，决定物体的外观光泽，看上去是不是像金属或者线框外表等。</p>\n<h2 id=\"threeJS-提供的材质\"><a href=\"#threeJS-提供的材质\" class=\"headerlink\" title=\"threeJS 提供的材质\"></a>threeJS 提供的材质</h2><ul>\n<li>MeshBasicMaterial：<strong>网格基础材质</strong>。基础材质，用于给几何体赋予一种简单的颜色，或者显示几何体的线框。</li>\n<li>MeshDepthMaterial：<strong>网格深度材质</strong>。这个材质使用从摄像机到网格的距离来决定如何给网格上色。</li>\n<li>MeshNormalMaterial：<strong>网格法向材质</strong>。这是一种简单的材质，根据法向向量计算物体表面的颜色。</li>\n<li>MeshFaceMaterial：<strong>网格面材质</strong>。这是一个容器，可以为几何体的各个表面指定不同的材质。</li>\n<li>MeshLambertMaterial：<strong>网格Lambert材质</strong>。这是一种考虑光照影响的材质，用于创建暗淡的、不光亮的物体。</li>\n<li>MeshPhongMaterial：<strong>网格Phong式材质</strong>。这是一种考虑光照影响的材质，用于创建光亮的物体。</li>\n<li>ShaderMaterial：<strong>着色器材质</strong>。这种材质允许使用自定义的着色器程序，直接控制顶点的放置方式以及像素的着色方式。</li>\n<li>LineBasicMaterial：<strong>直线基础材质</strong>。这种材质可以用于 THREE.Line（直线）几何体，用来创建着色的直线。</li>\n<li>LineDashMaterial：<strong>直线基础材质</strong>。 这种材质与 LineBasicMaterial（直线基础材质）一样，但允许创建出一种虚线的效果。</li>\n</ul>\n<h2 id=\"3种常用材质\"><a href=\"#3种常用材质\" class=\"headerlink\" title=\"3种常用材质\"></a>3种常用材质</h2><p>基础属性常用的了解下：</p>\n<ul>\n<li>ID：标识材质</li>\n<li>name： 名称</li>\n<li>opacity：透明度，结合transparent使用，范围为0~1</li>\n<li>transparent：是否透明，如果为true则结合opacity设置透明度。如果为false则物体不透明</li>\n<li>visible：是否可见，false则看不见，默认可以看见</li>\n<li>side：侧面，觉得几何体的哪一面应用这个材质，默认为THREE.FrontSide(前外面)，还有THREE.BackSide(后内面)和THREE.DoubleSide(两面)</li>\n<li>needUpdate：如果为true，则在几何体使用新的材质的时候更新材质缓存</li>\n</ul>\n<h3 id=\"①-THREE-MeshBasicMaterial-基础网格材质\"><a href=\"#①-THREE-MeshBasicMaterial-基础网格材质\" class=\"headerlink\" title=\"① THREE.MeshBasicMaterial 基础网格材质\"></a>① THREE.MeshBasicMaterial 基础网格材质</h3><p>使用这种材质的网格，通常被渲染成简单的多边形，而且可以选择想要线框。除了一些THREE.Material的属性以外，还有如下属性</p>\n<ul>\n<li>color：设置材质的颜色</li>\n<li>wireframe：如果为true，则将材质渲染成线框，在调试的时候可以起到很好的作用</li>\n<li>wireframeLinewidth：wireframe为true时，设置线框中线的宽度</li>\n<li>wireframeLinecap：决定线框端点如何显示，可选的值 round，bevel(斜角)和miter(尖角)。</li>\n<li>vertexColors：通过这属性，定义顶点的颜色，在canvasRender中不起作用。</li>\n<li>fog：决定单个材质的是否受全局雾化的影响。 </li>\n</ul>\n<blockquote>\n<p>对于fog属性，在全局中如果设定了雾化属性，那么本应该对所有场景的物体都添加雾化效果。<br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">scene.fog=new THREE.Fog(0xffffff,0.015,100)</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>而如果在当前材质中设置的如<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var cubeGeo= new THREE.CubeGeometry(30,30,30);</span><br><span class=\"line\">var cubeMat= new THREE.MeshBasicMaterial(&#123;color:&quot;0x0c0c0c&quot;,fog:false&#125;)</span><br><span class=\"line\">var cude= new THREE.Mesh(cubeGeo,cubeMat);</span><br><span class=\"line\">scene.add(cube);</span><br></pre></td></tr></table></figure></p>\n<p>则在当前这个cude方块中，并不能体现雾化效果。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">material.wireframe = true;</span><br></pre></td></tr></table></figure></p>\n<p>wireframe是否为true  显示如下<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/WechatIMG42820.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/WechatIMG42821.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h3 id=\"②-THREE-MeshLambertMaterial暗淡不发光\"><a href=\"#②-THREE-MeshLambertMaterial暗淡不发光\" class=\"headerlink\" title=\"② THREE.MeshLambertMaterial暗淡不发光\"></a>② THREE.MeshLambertMaterial暗淡不发光</h3><p>该材质对光源有反应，除了之前说过的color，transparent，opacity，fog等属性，还有一些特有的属性，总结起来就只有2个</p>\n<ul>\n<li>ambient：设置材质的环境色，和AmbientLight光源一起使用，这个颜色会与环境光的颜色相乘。即是对光源作出反应。</li>\n<li>emissive：设置材质发射的颜色，不是一种光源，而是一种不受光照影响的颜色。默认为黑色<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var cubeGeometry = new THREE.BoxGeometry(15, 15, 15);</span><br><span class=\"line\">var meshMaterial = new THREE.MeshLamebertMaterial(&#123;color: 0x7777ff&#125;);</span><br><span class=\"line\">var cube = new THREE.Mesh(cubeGeometry, meshMaterial);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/WechatIMG42823.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"③-THREE-MeshPhongMaterial金属发亮的物体\"><a href=\"#③-THREE-MeshPhongMaterial金属发亮的物体\" class=\"headerlink\" title=\"③ THREE.MeshPhongMaterial金属发亮的物体\"></a>③ THREE.MeshPhongMaterial金属发亮的物体</h3><p>该材质对光源有反应，除了之前说过的color，transparent，opacity，fog等属性，还有一些特有的属性，总结起来有4个</p>\n<ul>\n<li>ambient：设置材质的环境色，和AmbientLight光源一起使用，这个颜色会与环境光的颜色相乘。即是对光源作出反应。</li>\n<li>emissive：设置材质发射的颜色，不是一种光源，而是一种不受光照影响的颜色。默认为黑色</li>\n<li>specular：指定该材质的光亮程度及其高光部分的颜色，如果设置成和color属性相同的颜色，则会得到另一个更加类似金属的材质，如果设置成grey灰色，则看起来像塑料</li>\n<li>shininess：指定高光部分的亮度，默认值为30.<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> var meshMaterial = new THREE.MeshPhongMaterial(&#123;</span><br><span class=\"line\">        color: 0x7777ff，</span><br><span class=\"line\">        specular:0x7777ff,</span><br><span class=\"line\">        shininess:30</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ20180727-183707.gif\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n","site":{"data":{}},"excerpt":"","more":"<p>一个材质结合 THREE.Geometry 对象，可以构成 THREE.Mesh 对象。材质就相当于物体模型的皮肤，决定物体的外观光泽，看上去是不是像金属或者线框外表等。</p>\n<h2 id=\"threeJS-提供的材质\"><a href=\"#threeJS-提供的材质\" class=\"headerlink\" title=\"threeJS 提供的材质\"></a>threeJS 提供的材质</h2><ul>\n<li>MeshBasicMaterial：<strong>网格基础材质</strong>。基础材质，用于给几何体赋予一种简单的颜色，或者显示几何体的线框。</li>\n<li>MeshDepthMaterial：<strong>网格深度材质</strong>。这个材质使用从摄像机到网格的距离来决定如何给网格上色。</li>\n<li>MeshNormalMaterial：<strong>网格法向材质</strong>。这是一种简单的材质，根据法向向量计算物体表面的颜色。</li>\n<li>MeshFaceMaterial：<strong>网格面材质</strong>。这是一个容器，可以为几何体的各个表面指定不同的材质。</li>\n<li>MeshLambertMaterial：<strong>网格Lambert材质</strong>。这是一种考虑光照影响的材质，用于创建暗淡的、不光亮的物体。</li>\n<li>MeshPhongMaterial：<strong>网格Phong式材质</strong>。这是一种考虑光照影响的材质，用于创建光亮的物体。</li>\n<li>ShaderMaterial：<strong>着色器材质</strong>。这种材质允许使用自定义的着色器程序，直接控制顶点的放置方式以及像素的着色方式。</li>\n<li>LineBasicMaterial：<strong>直线基础材质</strong>。这种材质可以用于 THREE.Line（直线）几何体，用来创建着色的直线。</li>\n<li>LineDashMaterial：<strong>直线基础材质</strong>。 这种材质与 LineBasicMaterial（直线基础材质）一样，但允许创建出一种虚线的效果。</li>\n</ul>\n<h2 id=\"3种常用材质\"><a href=\"#3种常用材质\" class=\"headerlink\" title=\"3种常用材质\"></a>3种常用材质</h2><p>基础属性常用的了解下：</p>\n<ul>\n<li>ID：标识材质</li>\n<li>name： 名称</li>\n<li>opacity：透明度，结合transparent使用，范围为0~1</li>\n<li>transparent：是否透明，如果为true则结合opacity设置透明度。如果为false则物体不透明</li>\n<li>visible：是否可见，false则看不见，默认可以看见</li>\n<li>side：侧面，觉得几何体的哪一面应用这个材质，默认为THREE.FrontSide(前外面)，还有THREE.BackSide(后内面)和THREE.DoubleSide(两面)</li>\n<li>needUpdate：如果为true，则在几何体使用新的材质的时候更新材质缓存</li>\n</ul>\n<h3 id=\"①-THREE-MeshBasicMaterial-基础网格材质\"><a href=\"#①-THREE-MeshBasicMaterial-基础网格材质\" class=\"headerlink\" title=\"① THREE.MeshBasicMaterial 基础网格材质\"></a>① THREE.MeshBasicMaterial 基础网格材质</h3><p>使用这种材质的网格，通常被渲染成简单的多边形，而且可以选择想要线框。除了一些THREE.Material的属性以外，还有如下属性</p>\n<ul>\n<li>color：设置材质的颜色</li>\n<li>wireframe：如果为true，则将材质渲染成线框，在调试的时候可以起到很好的作用</li>\n<li>wireframeLinewidth：wireframe为true时，设置线框中线的宽度</li>\n<li>wireframeLinecap：决定线框端点如何显示，可选的值 round，bevel(斜角)和miter(尖角)。</li>\n<li>vertexColors：通过这属性，定义顶点的颜色，在canvasRender中不起作用。</li>\n<li>fog：决定单个材质的是否受全局雾化的影响。 </li>\n</ul>\n<blockquote>\n<p>对于fog属性，在全局中如果设定了雾化属性，那么本应该对所有场景的物体都添加雾化效果。<br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">scene.fog=new THREE.Fog(0xffffff,0.015,100)</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>而如果在当前材质中设置的如<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var cubeGeo= new THREE.CubeGeometry(30,30,30);</span><br><span class=\"line\">var cubeMat= new THREE.MeshBasicMaterial(&#123;color:&quot;0x0c0c0c&quot;,fog:false&#125;)</span><br><span class=\"line\">var cude= new THREE.Mesh(cubeGeo,cubeMat);</span><br><span class=\"line\">scene.add(cube);</span><br></pre></td></tr></table></figure></p>\n<p>则在当前这个cude方块中，并不能体现雾化效果。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">material.wireframe = true;</span><br></pre></td></tr></table></figure></p>\n<p>wireframe是否为true  显示如下<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/WechatIMG42820.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/WechatIMG42821.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h3 id=\"②-THREE-MeshLambertMaterial暗淡不发光\"><a href=\"#②-THREE-MeshLambertMaterial暗淡不发光\" class=\"headerlink\" title=\"② THREE.MeshLambertMaterial暗淡不发光\"></a>② THREE.MeshLambertMaterial暗淡不发光</h3><p>该材质对光源有反应，除了之前说过的color，transparent，opacity，fog等属性，还有一些特有的属性，总结起来就只有2个</p>\n<ul>\n<li>ambient：设置材质的环境色，和AmbientLight光源一起使用，这个颜色会与环境光的颜色相乘。即是对光源作出反应。</li>\n<li>emissive：设置材质发射的颜色，不是一种光源，而是一种不受光照影响的颜色。默认为黑色<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var cubeGeometry = new THREE.BoxGeometry(15, 15, 15);</span><br><span class=\"line\">var meshMaterial = new THREE.MeshLamebertMaterial(&#123;color: 0x7777ff&#125;);</span><br><span class=\"line\">var cube = new THREE.Mesh(cubeGeometry, meshMaterial);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/WechatIMG42823.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"③-THREE-MeshPhongMaterial金属发亮的物体\"><a href=\"#③-THREE-MeshPhongMaterial金属发亮的物体\" class=\"headerlink\" title=\"③ THREE.MeshPhongMaterial金属发亮的物体\"></a>③ THREE.MeshPhongMaterial金属发亮的物体</h3><p>该材质对光源有反应，除了之前说过的color，transparent，opacity，fog等属性，还有一些特有的属性，总结起来有4个</p>\n<ul>\n<li>ambient：设置材质的环境色，和AmbientLight光源一起使用，这个颜色会与环境光的颜色相乘。即是对光源作出反应。</li>\n<li>emissive：设置材质发射的颜色，不是一种光源，而是一种不受光照影响的颜色。默认为黑色</li>\n<li>specular：指定该材质的光亮程度及其高光部分的颜色，如果设置成和color属性相同的颜色，则会得到另一个更加类似金属的材质，如果设置成grey灰色，则看起来像塑料</li>\n<li>shininess：指定高光部分的亮度，默认值为30.<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> var meshMaterial = new THREE.MeshPhongMaterial(&#123;</span><br><span class=\"line\">        color: 0x7777ff，</span><br><span class=\"line\">        specular:0x7777ff,</span><br><span class=\"line\">        shininess:30</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ20180727-183707.gif\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n"},{"title":"web移动端软键盘状态","date":"2017-01-18T10:10:54.000Z","_content":"如今各种移动端设备盛行，虽然现在移动端开发已经非常通用和成熟，但是在开发过程中，还是经常遇到各种神奇的问题，在这里对于移动端web开发遇到的一些问题进行一一整理。\n对于移动端设备上的软键盘，在某些时候，会成为页面的一部分，并且不同型号的设备的软键盘对于Html布局的实现也有些不同。\n比如ios设备对于从下方推出键盘的时候，如果输入控件在页面推出之后，在键盘的高度的上方的话，则键盘是以一个浮层的方式弹出，并且将那个触发的控件推到键盘的上方。如果那个控件在页面底部，如果推出的键盘会覆盖该控件，系统会将整个页面向上推，直到将那个控件推到键盘上方为止。而android的实现的不同，有部分的android的实现和ios一样，有些android的机型的实现却不同，如果发现触发的input控件比键盘的高度底的时候，会自动将整个document的高度增加，增加到这个控件的高度超过键盘的高度为止。\n随后，在判断软键盘是否打开关闭的状态时，因为这两种展现方法的不同，我大概搜罗出可能的解决办法（没有测试全部机型）：\n# 软键盘打开，整个页面向上滑动\n这种在ios系统里面比较常见，这类的基本上可以通过js的blur的方式来获取事件。\n```\n$(\".input-content input\").on(\"blur\",function(){\n\t//键盘关闭事件 \n})\n```\n# 软键盘覆盖元素\n这种情况在ios和android中都有出现，这类的设备，可以通过检测窗口变化来识别\n```\nvar wHeight = window.innerHeight;//获取初始可视窗口高度  \nwindow.addEventListener('resize', function(){//监测窗口大小的变化事件  \n  var hh = window.innerHeight;//当前可视窗口高度  \n  var viewTop = $(window).scrollTop();//可视窗口高度顶部距离网页顶部的距离  \n  if(wHeight > hh){\n  \t//可以作为虚拟键盘弹出事件  \n  }else{\n  \t//可以作为虚拟键盘关闭事件  \n  }  \n  wHeight = hh;  \n});\n```\n# 通用方法\n```\nvar flag = false;\nvar wHeight = window.innerHeight;\nwindow.addEventListener('resize', function(){\n    var hh = window.innerHeight; \n    var viewTop = $(window).scrollTop();\n    if(wHeight > hh){\n        flag = false;\n    }else{\n        if(!flag){\n            alert($(\".input-content input\").val());\n            flag = true;\n        }else{\n            return;\n        }\n    }  \n    wHeight = hh;  \n});\n$(\".input-content input\").on(\"blur\",function(){\n    if(!flag){\n        alert($(\".input-content input\").val());\n        flag = true;\n    }else{\n        return;\n    }\n}).on(\"focus\", function(){\n    flag = false;\n});\n```","source":"_posts/web移动端软键盘状态.md","raw":"---\ntitle: web移动端软键盘状态\ndate: 2017-01-18 18:10:54\ntags: [web移动端,javascript]\ncategories: [javascript]\n---\n如今各种移动端设备盛行，虽然现在移动端开发已经非常通用和成熟，但是在开发过程中，还是经常遇到各种神奇的问题，在这里对于移动端web开发遇到的一些问题进行一一整理。\n对于移动端设备上的软键盘，在某些时候，会成为页面的一部分，并且不同型号的设备的软键盘对于Html布局的实现也有些不同。\n比如ios设备对于从下方推出键盘的时候，如果输入控件在页面推出之后，在键盘的高度的上方的话，则键盘是以一个浮层的方式弹出，并且将那个触发的控件推到键盘的上方。如果那个控件在页面底部，如果推出的键盘会覆盖该控件，系统会将整个页面向上推，直到将那个控件推到键盘上方为止。而android的实现的不同，有部分的android的实现和ios一样，有些android的机型的实现却不同，如果发现触发的input控件比键盘的高度底的时候，会自动将整个document的高度增加，增加到这个控件的高度超过键盘的高度为止。\n随后，在判断软键盘是否打开关闭的状态时，因为这两种展现方法的不同，我大概搜罗出可能的解决办法（没有测试全部机型）：\n# 软键盘打开，整个页面向上滑动\n这种在ios系统里面比较常见，这类的基本上可以通过js的blur的方式来获取事件。\n```\n$(\".input-content input\").on(\"blur\",function(){\n\t//键盘关闭事件 \n})\n```\n# 软键盘覆盖元素\n这种情况在ios和android中都有出现，这类的设备，可以通过检测窗口变化来识别\n```\nvar wHeight = window.innerHeight;//获取初始可视窗口高度  \nwindow.addEventListener('resize', function(){//监测窗口大小的变化事件  \n  var hh = window.innerHeight;//当前可视窗口高度  \n  var viewTop = $(window).scrollTop();//可视窗口高度顶部距离网页顶部的距离  \n  if(wHeight > hh){\n  \t//可以作为虚拟键盘弹出事件  \n  }else{\n  \t//可以作为虚拟键盘关闭事件  \n  }  \n  wHeight = hh;  \n});\n```\n# 通用方法\n```\nvar flag = false;\nvar wHeight = window.innerHeight;\nwindow.addEventListener('resize', function(){\n    var hh = window.innerHeight; \n    var viewTop = $(window).scrollTop();\n    if(wHeight > hh){\n        flag = false;\n    }else{\n        if(!flag){\n            alert($(\".input-content input\").val());\n            flag = true;\n        }else{\n            return;\n        }\n    }  \n    wHeight = hh;  \n});\n$(\".input-content input\").on(\"blur\",function(){\n    if(!flag){\n        alert($(\".input-content input\").val());\n        flag = true;\n    }else{\n        return;\n    }\n}).on(\"focus\", function(){\n    flag = false;\n});\n```","slug":"web移动端软键盘状态","published":1,"updated":"2018-08-29T02:24:05.563Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjleqs1o4000nq3v3ywt16cxt","content":"<p>如今各种移动端设备盛行，虽然现在移动端开发已经非常通用和成熟，但是在开发过程中，还是经常遇到各种神奇的问题，在这里对于移动端web开发遇到的一些问题进行一一整理。<br>对于移动端设备上的软键盘，在某些时候，会成为页面的一部分，并且不同型号的设备的软键盘对于Html布局的实现也有些不同。<br>比如ios设备对于从下方推出键盘的时候，如果输入控件在页面推出之后，在键盘的高度的上方的话，则键盘是以一个浮层的方式弹出，并且将那个触发的控件推到键盘的上方。如果那个控件在页面底部，如果推出的键盘会覆盖该控件，系统会将整个页面向上推，直到将那个控件推到键盘上方为止。而android的实现的不同，有部分的android的实现和ios一样，有些android的机型的实现却不同，如果发现触发的input控件比键盘的高度底的时候，会自动将整个document的高度增加，增加到这个控件的高度超过键盘的高度为止。<br>随后，在判断软键盘是否打开关闭的状态时，因为这两种展现方法的不同，我大概搜罗出可能的解决办法（没有测试全部机型）：</p>\n<h1 id=\"软键盘打开，整个页面向上滑动\"><a href=\"#软键盘打开，整个页面向上滑动\" class=\"headerlink\" title=\"软键盘打开，整个页面向上滑动\"></a>软键盘打开，整个页面向上滑动</h1><p>这种在ios系统里面比较常见，这类的基本上可以通过js的blur的方式来获取事件。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(&quot;.input-content input&quot;).on(&quot;blur&quot;,function()&#123;</span><br><span class=\"line\">\t//键盘关闭事件 </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"软键盘覆盖元素\"><a href=\"#软键盘覆盖元素\" class=\"headerlink\" title=\"软键盘覆盖元素\"></a>软键盘覆盖元素</h1><p>这种情况在ios和android中都有出现，这类的设备，可以通过检测窗口变化来识别<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var wHeight = window.innerHeight;//获取初始可视窗口高度  </span><br><span class=\"line\">window.addEventListener(&apos;resize&apos;, function()&#123;//监测窗口大小的变化事件  </span><br><span class=\"line\">  var hh = window.innerHeight;//当前可视窗口高度  </span><br><span class=\"line\">  var viewTop = $(window).scrollTop();//可视窗口高度顶部距离网页顶部的距离  </span><br><span class=\"line\">  if(wHeight &gt; hh)&#123;</span><br><span class=\"line\">  \t//可以作为虚拟键盘弹出事件  </span><br><span class=\"line\">  &#125;else&#123;</span><br><span class=\"line\">  \t//可以作为虚拟键盘关闭事件  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  wHeight = hh;  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"通用方法\"><a href=\"#通用方法\" class=\"headerlink\" title=\"通用方法\"></a>通用方法</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var flag = false;</span><br><span class=\"line\">var wHeight = window.innerHeight;</span><br><span class=\"line\">window.addEventListener(&apos;resize&apos;, function()&#123;</span><br><span class=\"line\">    var hh = window.innerHeight; </span><br><span class=\"line\">    var viewTop = $(window).scrollTop();</span><br><span class=\"line\">    if(wHeight &gt; hh)&#123;</span><br><span class=\"line\">        flag = false;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        if(!flag)&#123;</span><br><span class=\"line\">            alert($(&quot;.input-content input&quot;).val());</span><br><span class=\"line\">            flag = true;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    wHeight = hh;  </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(&quot;.input-content input&quot;).on(&quot;blur&quot;,function()&#123;</span><br><span class=\"line\">    if(!flag)&#123;</span><br><span class=\"line\">        alert($(&quot;.input-content input&quot;).val());</span><br><span class=\"line\">        flag = true;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).on(&quot;focus&quot;, function()&#123;</span><br><span class=\"line\">    flag = false;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>如今各种移动端设备盛行，虽然现在移动端开发已经非常通用和成熟，但是在开发过程中，还是经常遇到各种神奇的问题，在这里对于移动端web开发遇到的一些问题进行一一整理。<br>对于移动端设备上的软键盘，在某些时候，会成为页面的一部分，并且不同型号的设备的软键盘对于Html布局的实现也有些不同。<br>比如ios设备对于从下方推出键盘的时候，如果输入控件在页面推出之后，在键盘的高度的上方的话，则键盘是以一个浮层的方式弹出，并且将那个触发的控件推到键盘的上方。如果那个控件在页面底部，如果推出的键盘会覆盖该控件，系统会将整个页面向上推，直到将那个控件推到键盘上方为止。而android的实现的不同，有部分的android的实现和ios一样，有些android的机型的实现却不同，如果发现触发的input控件比键盘的高度底的时候，会自动将整个document的高度增加，增加到这个控件的高度超过键盘的高度为止。<br>随后，在判断软键盘是否打开关闭的状态时，因为这两种展现方法的不同，我大概搜罗出可能的解决办法（没有测试全部机型）：</p>\n<h1 id=\"软键盘打开，整个页面向上滑动\"><a href=\"#软键盘打开，整个页面向上滑动\" class=\"headerlink\" title=\"软键盘打开，整个页面向上滑动\"></a>软键盘打开，整个页面向上滑动</h1><p>这种在ios系统里面比较常见，这类的基本上可以通过js的blur的方式来获取事件。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(&quot;.input-content input&quot;).on(&quot;blur&quot;,function()&#123;</span><br><span class=\"line\">\t//键盘关闭事件 </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"软键盘覆盖元素\"><a href=\"#软键盘覆盖元素\" class=\"headerlink\" title=\"软键盘覆盖元素\"></a>软键盘覆盖元素</h1><p>这种情况在ios和android中都有出现，这类的设备，可以通过检测窗口变化来识别<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var wHeight = window.innerHeight;//获取初始可视窗口高度  </span><br><span class=\"line\">window.addEventListener(&apos;resize&apos;, function()&#123;//监测窗口大小的变化事件  </span><br><span class=\"line\">  var hh = window.innerHeight;//当前可视窗口高度  </span><br><span class=\"line\">  var viewTop = $(window).scrollTop();//可视窗口高度顶部距离网页顶部的距离  </span><br><span class=\"line\">  if(wHeight &gt; hh)&#123;</span><br><span class=\"line\">  \t//可以作为虚拟键盘弹出事件  </span><br><span class=\"line\">  &#125;else&#123;</span><br><span class=\"line\">  \t//可以作为虚拟键盘关闭事件  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  wHeight = hh;  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"通用方法\"><a href=\"#通用方法\" class=\"headerlink\" title=\"通用方法\"></a>通用方法</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var flag = false;</span><br><span class=\"line\">var wHeight = window.innerHeight;</span><br><span class=\"line\">window.addEventListener(&apos;resize&apos;, function()&#123;</span><br><span class=\"line\">    var hh = window.innerHeight; </span><br><span class=\"line\">    var viewTop = $(window).scrollTop();</span><br><span class=\"line\">    if(wHeight &gt; hh)&#123;</span><br><span class=\"line\">        flag = false;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        if(!flag)&#123;</span><br><span class=\"line\">            alert($(&quot;.input-content input&quot;).val());</span><br><span class=\"line\">            flag = true;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    wHeight = hh;  </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(&quot;.input-content input&quot;).on(&quot;blur&quot;,function()&#123;</span><br><span class=\"line\">    if(!flag)&#123;</span><br><span class=\"line\">        alert($(&quot;.input-content input&quot;).val());</span><br><span class=\"line\">        flag = true;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).on(&quot;focus&quot;, function()&#123;</span><br><span class=\"line\">    flag = false;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>"},{"title":"【接粽子】小游戏 Made With CreateJs","date":"2016-10-21T08:55:05.000Z","_content":"\n# 简介\n制作的一款类似于接金币一类的小游戏。公司为了在端午节做宣传用的。\n\n一款好的游戏离不开好的设计，在此先给亲爱的设计妹纸点个赞~ (❁'▽'❁)\n\n游戏效果如下：\n\n![](/images/808279392447213144-576x1024.jpg)\n\n第一次尝试用createJs框架去搭建H5游戏，确实比起以前自己用canvas写的要方面很多，也流畅了不少。\n# Demo\n在微信上发布的游戏，请用微信扫码查看：\n\n![](http://pan.baidu.com/share/qrcode?w=150&amp;h=150&amp;url=http://v.mob.com/wechat/catchzongzi/index.php)\n# 源码\ngithub：https://github.com/MJPiero/catchzongzi\n\n另外也在github上分享了源码。说实话本人对于我写的不算满意，因为…… 用了太多愚蠢的方法，不过当时时间有点赶，就没有花太多时间去优化。也希望大家能提出更好的优化方法来。大家一起学习一起奋进嘞嘿！！！！","source":"_posts/【接粽子】小游戏-Made-With-CreateJs.md","raw":"---\ntitle: 【接粽子】小游戏 Made With CreateJs\ntags: [mywork, canvas, h5game]\ncategories: [mywork]\ndate: 2016-10-21 16:55:05\n---\n\n# 简介\n制作的一款类似于接金币一类的小游戏。公司为了在端午节做宣传用的。\n\n一款好的游戏离不开好的设计，在此先给亲爱的设计妹纸点个赞~ (❁'▽'❁)\n\n游戏效果如下：\n\n![](/images/808279392447213144-576x1024.jpg)\n\n第一次尝试用createJs框架去搭建H5游戏，确实比起以前自己用canvas写的要方面很多，也流畅了不少。\n# Demo\n在微信上发布的游戏，请用微信扫码查看：\n\n![](http://pan.baidu.com/share/qrcode?w=150&amp;h=150&amp;url=http://v.mob.com/wechat/catchzongzi/index.php)\n# 源码\ngithub：https://github.com/MJPiero/catchzongzi\n\n另外也在github上分享了源码。说实话本人对于我写的不算满意，因为…… 用了太多愚蠢的方法，不过当时时间有点赶，就没有花太多时间去优化。也希望大家能提出更好的优化方法来。大家一起学习一起奋进嘞嘿！！！！","slug":"【接粽子】小游戏-Made-With-CreateJs","published":1,"updated":"2016-10-26T10:13:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjleqs1o6000pq3v3rgn3q4sk","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>制作的一款类似于接金币一类的小游戏。公司为了在端午节做宣传用的。</p>\n<p>一款好的游戏离不开好的设计，在此先给亲爱的设计妹纸点个赞~ (❁’▽’❁)</p>\n<p>游戏效果如下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/808279392447213144-576x1024.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>第一次尝试用createJs框架去搭建H5游戏，确实比起以前自己用canvas写的要方面很多，也流畅了不少。</p>\n<h1 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h1><p>在微信上发布的游戏，请用微信扫码查看：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://pan.baidu.com/share/qrcode?w=150&amp;h=150&amp;url=http://v.mob.com/wechat/catchzongzi/index.php\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><p>github：<a href=\"https://github.com/MJPiero/catchzongzi\" target=\"_blank\" rel=\"noopener\">https://github.com/MJPiero/catchzongzi</a></p>\n<p>另外也在github上分享了源码。说实话本人对于我写的不算满意，因为…… 用了太多愚蠢的方法，不过当时时间有点赶，就没有花太多时间去优化。也希望大家能提出更好的优化方法来。大家一起学习一起奋进嘞嘿！！！！</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>制作的一款类似于接金币一类的小游戏。公司为了在端午节做宣传用的。</p>\n<p>一款好的游戏离不开好的设计，在此先给亲爱的设计妹纸点个赞~ (❁’▽’❁)</p>\n<p>游戏效果如下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/808279392447213144-576x1024.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>第一次尝试用createJs框架去搭建H5游戏，确实比起以前自己用canvas写的要方面很多，也流畅了不少。</p>\n<h1 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h1><p>在微信上发布的游戏，请用微信扫码查看：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://pan.baidu.com/share/qrcode?w=150&amp;h=150&amp;url=http://v.mob.com/wechat/catchzongzi/index.php\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><p>github：<a href=\"https://github.com/MJPiero/catchzongzi\" target=\"_blank\" rel=\"noopener\">https://github.com/MJPiero/catchzongzi</a></p>\n<p>另外也在github上分享了源码。说实话本人对于我写的不算满意，因为…… 用了太多愚蠢的方法，不过当时时间有点赶，就没有花太多时间去优化。也希望大家能提出更好的优化方法来。大家一起学习一起奋进嘞嘿！！！！</p>\n"},{"title":"你还在用第三方组件做Base64的编码和解码么？","date":"2018-08-24T08:16:43.000Z","_content":"\n清早看到一篇张老师的文章，才发现自己傻傻的用了很多年的第三方组件。\n早期web端要做base64编码和解码的时候最常用的就是去找个开源的组件base64.js。嗯，现在都还是这样的，觉得还满完美的，看了才发现实际浏览器原生提供了Base64编码解码的方法，啊，孤陋寡闻！！！\n嗯，我按照自己的理解简单介绍一下，btoa和atob的方法。来，跟我学着在浏览器的控制器上测试一下。\n```\nwindow.btoa('MJPiero');     //编码结果：\"TUpQaWVybw==\"\n\nwindow.atob(\"TUpQaWVybw==\");    //解码结果 \"MJPiero\"\n```\n是不是很简单！还有一个要注意的地方。如果你如下输入：\n```\nwindow.btoa('博客');\n```\n你会发现页面会报错：\n`Uncaught DOMException: Failed to execute 'btoa' on 'Window': The string to be encoded contains characters outside of the Latin1 range.`\n\n这是因为不支持中文汉字的缘故，但是我们加一层转码就可以了。\n```\nwindow.btoa(window.encodeURIComponent('博客'));   //编码结果：\"JUU1JThEJTlBJUU1JUFFJUEy\"\n\nwindow.decodeURIComponent(window.atob('JUU1JThEJTlBJUU1JUFFJUEy'));     //解码结果 \"博客\"\n```\n\n此外这个还有很多可以拓展的地方，这里还是让大家去[张鑫旭](https://www.zhangxinxu.com/wordpress/2018/08/js-base64-atob-btoa-encode-decode/)老师的文章里面去看看：\n- IE8/IE9的polyfill。由于这个方法支持IE10+的浏览器，所以有向下兼容的方法。\n- 任意文件Base64编码。","source":"_posts/你还在用第三方组件做Base64的编码和解码么？.md","raw":"---\ntitle: 你还在用第三方组件做Base64的编码和解码么？\ndate: 2018-08-24 16:16:43\ntags: [javascript]\ncategories: [javascript]\n---\n\n清早看到一篇张老师的文章，才发现自己傻傻的用了很多年的第三方组件。\n早期web端要做base64编码和解码的时候最常用的就是去找个开源的组件base64.js。嗯，现在都还是这样的，觉得还满完美的，看了才发现实际浏览器原生提供了Base64编码解码的方法，啊，孤陋寡闻！！！\n嗯，我按照自己的理解简单介绍一下，btoa和atob的方法。来，跟我学着在浏览器的控制器上测试一下。\n```\nwindow.btoa('MJPiero');     //编码结果：\"TUpQaWVybw==\"\n\nwindow.atob(\"TUpQaWVybw==\");    //解码结果 \"MJPiero\"\n```\n是不是很简单！还有一个要注意的地方。如果你如下输入：\n```\nwindow.btoa('博客');\n```\n你会发现页面会报错：\n`Uncaught DOMException: Failed to execute 'btoa' on 'Window': The string to be encoded contains characters outside of the Latin1 range.`\n\n这是因为不支持中文汉字的缘故，但是我们加一层转码就可以了。\n```\nwindow.btoa(window.encodeURIComponent('博客'));   //编码结果：\"JUU1JThEJTlBJUU1JUFFJUEy\"\n\nwindow.decodeURIComponent(window.atob('JUU1JThEJTlBJUU1JUFFJUEy'));     //解码结果 \"博客\"\n```\n\n此外这个还有很多可以拓展的地方，这里还是让大家去[张鑫旭](https://www.zhangxinxu.com/wordpress/2018/08/js-base64-atob-btoa-encode-decode/)老师的文章里面去看看：\n- IE8/IE9的polyfill。由于这个方法支持IE10+的浏览器，所以有向下兼容的方法。\n- 任意文件Base64编码。","slug":"你还在用第三方组件做Base64的编码和解码么？","published":1,"updated":"2018-08-24T09:59:08.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjleqs1o7000tq3v3ekdh0dl3","content":"<p>清早看到一篇张老师的文章，才发现自己傻傻的用了很多年的第三方组件。<br>早期web端要做base64编码和解码的时候最常用的就是去找个开源的组件base64.js。嗯，现在都还是这样的，觉得还满完美的，看了才发现实际浏览器原生提供了Base64编码解码的方法，啊，孤陋寡闻！！！<br>嗯，我按照自己的理解简单介绍一下，btoa和atob的方法。来，跟我学着在浏览器的控制器上测试一下。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">window.btoa(&apos;MJPiero&apos;);     //编码结果：&quot;TUpQaWVybw==&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">window.atob(&quot;TUpQaWVybw==&quot;);    //解码结果 &quot;MJPiero&quot;</span><br></pre></td></tr></table></figure></p>\n<p>是不是很简单！还有一个要注意的地方。如果你如下输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">window.btoa(&apos;博客&apos;);</span><br></pre></td></tr></table></figure></p>\n<p>你会发现页面会报错：<br><code>Uncaught DOMException: Failed to execute &#39;btoa&#39; on &#39;Window&#39;: The string to be encoded contains characters outside of the Latin1 range.</code></p>\n<p>这是因为不支持中文汉字的缘故，但是我们加一层转码就可以了。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">window.btoa(window.encodeURIComponent(&apos;博客&apos;));   //编码结果：&quot;JUU1JThEJTlBJUU1JUFFJUEy&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">window.decodeURIComponent(window.atob(&apos;JUU1JThEJTlBJUU1JUFFJUEy&apos;));     //解码结果 &quot;博客&quot;</span><br></pre></td></tr></table></figure></p>\n<p>此外这个还有很多可以拓展的地方，这里还是让大家去<a href=\"https://www.zhangxinxu.com/wordpress/2018/08/js-base64-atob-btoa-encode-decode/\" target=\"_blank\" rel=\"noopener\">张鑫旭</a>老师的文章里面去看看：</p>\n<ul>\n<li>IE8/IE9的polyfill。由于这个方法支持IE10+的浏览器，所以有向下兼容的方法。</li>\n<li>任意文件Base64编码。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>清早看到一篇张老师的文章，才发现自己傻傻的用了很多年的第三方组件。<br>早期web端要做base64编码和解码的时候最常用的就是去找个开源的组件base64.js。嗯，现在都还是这样的，觉得还满完美的，看了才发现实际浏览器原生提供了Base64编码解码的方法，啊，孤陋寡闻！！！<br>嗯，我按照自己的理解简单介绍一下，btoa和atob的方法。来，跟我学着在浏览器的控制器上测试一下。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">window.btoa(&apos;MJPiero&apos;);     //编码结果：&quot;TUpQaWVybw==&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">window.atob(&quot;TUpQaWVybw==&quot;);    //解码结果 &quot;MJPiero&quot;</span><br></pre></td></tr></table></figure></p>\n<p>是不是很简单！还有一个要注意的地方。如果你如下输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">window.btoa(&apos;博客&apos;);</span><br></pre></td></tr></table></figure></p>\n<p>你会发现页面会报错：<br><code>Uncaught DOMException: Failed to execute &#39;btoa&#39; on &#39;Window&#39;: The string to be encoded contains characters outside of the Latin1 range.</code></p>\n<p>这是因为不支持中文汉字的缘故，但是我们加一层转码就可以了。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">window.btoa(window.encodeURIComponent(&apos;博客&apos;));   //编码结果：&quot;JUU1JThEJTlBJUU1JUFFJUEy&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">window.decodeURIComponent(window.atob(&apos;JUU1JThEJTlBJUU1JUFFJUEy&apos;));     //解码结果 &quot;博客&quot;</span><br></pre></td></tr></table></figure></p>\n<p>此外这个还有很多可以拓展的地方，这里还是让大家去<a href=\"https://www.zhangxinxu.com/wordpress/2018/08/js-base64-atob-btoa-encode-decode/\" target=\"_blank\" rel=\"noopener\">张鑫旭</a>老师的文章里面去看看：</p>\n<ul>\n<li>IE8/IE9的polyfill。由于这个方法支持IE10+的浏览器，所以有向下兼容的方法。</li>\n<li>任意文件Base64编码。</li>\n</ul>\n"},{"title":"包与NPM","date":"2016-12-08T02:39:20.000Z","_content":"\n在说到NPM之前，应该先提及CommonJS的包规范。\n\nCommonJS包规范定义很简单，它是由包结构和包描述文件两个部分组成。\n\n# 包结构\n\n包结构是用于组织包中的各种文件。完全符合CommonJS规范的包目录应该包含如下文件。\n\n* package.json ———— 包描述文件。\n* bin ———— 用于存放可执行二进制文件的目录。\n* lib ———— 用于存放js代码的目录。\n* doc ———— 用于存放文档的目录。\n* test ———— 用于存放单元测试用例的代码。\n\n# 包描述文件\n\n包描述文件用于表达非代码相关的信息，它是一个JSON格式的文件（package.json），位于根目录下。\n\n这里我们就只介绍 NPM 的 package.json 文件定义了哪些必需的字段：\n\n* name ———— 项目名称。\n* version ———— 版本。在 http://semver.org/ 上有详细的定义，通常为 major.minor.revision 格式。\n* author ———— 作者。\n* description ———— 项目简介。\n* keywords ———— 关键词数组。用于NPM中做分类搜索的。\n* repository ———— 托管源代码的位置列表。示例：`{ \"type\": \"git\", \"url\": \"https://package/path\" }`\n* license ———— 当前包所使用的许可证列表。示例：`[{ \"type\": \"GPLv2\", \"url\": \"http://www.example.com/licenses/gpl.html\", }]`\n* engines ———— 指明该项目所需要的nodejs版本。\n* bugs ———— 返回bug的网页地址或则邮箱地址。\n* contributors ———— 贡献者列表。\n* scripts ———— 指定了运行脚本命令的npm命令行缩写。可以自行写好运行脚本。\n* dependencies ———— 指定了项目运行所依赖的模块。`npm install XX --save`\n* devDependencies ———— 指定项目开发所需要的模块。`npm install XX --save-dev`\n> * __波浪号（tilde）+指定版本：__比如~1.2.2，表示安装1.2.x的最新版本（不低于1.2.2），但是不安装1.3.x，也就是说安装时不改变大版本号和次要版本号。\n> * __插入号（caret）+指定版本：__比如ˆ1.2.2，表示安装1.x.x的最新版本（不低于1.2.2），但是不安装2.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。\n> * __latest：__安装最新版本。\n* peerDependencies ———— 用来供插件指定其所需要的主工具的版本（从npm 3.0版开始，peerDependencies不再会默认安装了）。\n* bin ———— 用来指定各个内部命令对应的可执行文件的位置。\n* main ———— 指定加载的入口文件。\n* config ———— 用于向环境变量输出值。示例：`{ \"port\" : \"8080\" }`，则在`server.js`脚本就可以直接引用config里的值 `http.createServer(...).listen(process.env.npm_package_config_port)`\n\n下面是express项目的package.json文件，可以参考下：\n```\n{\n\t\"name\": \"express\",\n\t\"description\": \"Sinatra inspired web development framework\",\n\t\"version\": \"3.3.4\",\n\t\"author\": \"TJ Holowaychuk <tj@vision-media.ca>\",\n\t\"contributors\": [\n\t\t{\n\t\t\t\"name\": \"TJ Holowaychuk\",\n\t\t\t\"email\": \"tj@vision-media.ca\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Aaron Heckmann\",\n\t\t\t\"email\": \"aaron.heckmann+github@gmail.com\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Ciaran Jessup\",\n\t\t\t\"email\": \"ciaranj@gmail.com\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Guillermo Rauch\",\n\t\t\t\"email\": \"rauchg@gmail.com\"\n\t\t}\n\t],\n\t\"dependencies\": {\n\t\t\"connect\": \"2.8.4\",\n\t\t\"commander\": \"1.2.0\",\n\t\t\"range-parser\": \"0.0.4\",\n\t\t\"mkdirp\": \"0.3.5\",\n\t\t\"cookie\": \"0.1.0\",\n\t\t\"buffer-crc32\": \"0.2.1\",\n\t\t\"fresh\": \"0.1.0\",\n\t\t\"methods\": \"0.0.1\",\n\t\t\"send\": \"0.1.3\",\n\t\t\"cookie-signature\": \"1.0.1\",\n\t\t\"debug\": \"*\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ejs\": \"*\",\n\t\t\"mocha\": \"*\",\n\t\t\"jade\": \"0.30.0\",\n\t\t\"hjs\": \"*\",\n\t\t\"stylus\": \"*\",\n\t\t\"should\": \"*\",\n\t\t\"connect-redis\": \"*\",\n\t\t\"marked\": \"*\",\n\t\t\"supertest\": \"0.6.0\"\n\t},\n\t\"keywords\": [\n\t\t\"express\",\n\t\t\"framework\",\n\t\t\"sinatra\",\n\t\t\"web\",\n\t\t\"rest\",\n\t\t\"restful\",\n\t\t\"router\",\n\t\t\"app\",\n\t\t\"api\"\n\t],\n\t\"repository\": \"git://github.com/visionmedia/express\",\n\t\"main\": \"index\",\n\t\"bin\": {\n\t\t\"express\": \"./bin/express\"\n\t},\n\t\"scripts\": {\n\t\t\"prepublish\": \"npm prune\",\n\t\t\"test\": \"make test\"\n\t},\n\t\"engines\": {\n\t\"node\": \"*\"\n\t}\n}\n```\n> __参考文献：__\n> - 《深入浅出Node.js》朴灵\n> - [http://javascript.ruanyifeng.com/nodejs/packagejson.html](http://javascript.ruanyifeng.com/nodejs/packagejson.html)","source":"_posts/包与NPM.md","raw":"---\ntitle: 包与NPM\ntags: [nodejs]\ncategories: [nodejs]\ndate: 2016-12-08 10:39:20\n---\n\n在说到NPM之前，应该先提及CommonJS的包规范。\n\nCommonJS包规范定义很简单，它是由包结构和包描述文件两个部分组成。\n\n# 包结构\n\n包结构是用于组织包中的各种文件。完全符合CommonJS规范的包目录应该包含如下文件。\n\n* package.json ———— 包描述文件。\n* bin ———— 用于存放可执行二进制文件的目录。\n* lib ———— 用于存放js代码的目录。\n* doc ———— 用于存放文档的目录。\n* test ———— 用于存放单元测试用例的代码。\n\n# 包描述文件\n\n包描述文件用于表达非代码相关的信息，它是一个JSON格式的文件（package.json），位于根目录下。\n\n这里我们就只介绍 NPM 的 package.json 文件定义了哪些必需的字段：\n\n* name ———— 项目名称。\n* version ———— 版本。在 http://semver.org/ 上有详细的定义，通常为 major.minor.revision 格式。\n* author ———— 作者。\n* description ———— 项目简介。\n* keywords ———— 关键词数组。用于NPM中做分类搜索的。\n* repository ———— 托管源代码的位置列表。示例：`{ \"type\": \"git\", \"url\": \"https://package/path\" }`\n* license ———— 当前包所使用的许可证列表。示例：`[{ \"type\": \"GPLv2\", \"url\": \"http://www.example.com/licenses/gpl.html\", }]`\n* engines ———— 指明该项目所需要的nodejs版本。\n* bugs ———— 返回bug的网页地址或则邮箱地址。\n* contributors ———— 贡献者列表。\n* scripts ———— 指定了运行脚本命令的npm命令行缩写。可以自行写好运行脚本。\n* dependencies ———— 指定了项目运行所依赖的模块。`npm install XX --save`\n* devDependencies ———— 指定项目开发所需要的模块。`npm install XX --save-dev`\n> * __波浪号（tilde）+指定版本：__比如~1.2.2，表示安装1.2.x的最新版本（不低于1.2.2），但是不安装1.3.x，也就是说安装时不改变大版本号和次要版本号。\n> * __插入号（caret）+指定版本：__比如ˆ1.2.2，表示安装1.x.x的最新版本（不低于1.2.2），但是不安装2.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。\n> * __latest：__安装最新版本。\n* peerDependencies ———— 用来供插件指定其所需要的主工具的版本（从npm 3.0版开始，peerDependencies不再会默认安装了）。\n* bin ———— 用来指定各个内部命令对应的可执行文件的位置。\n* main ———— 指定加载的入口文件。\n* config ———— 用于向环境变量输出值。示例：`{ \"port\" : \"8080\" }`，则在`server.js`脚本就可以直接引用config里的值 `http.createServer(...).listen(process.env.npm_package_config_port)`\n\n下面是express项目的package.json文件，可以参考下：\n```\n{\n\t\"name\": \"express\",\n\t\"description\": \"Sinatra inspired web development framework\",\n\t\"version\": \"3.3.4\",\n\t\"author\": \"TJ Holowaychuk <tj@vision-media.ca>\",\n\t\"contributors\": [\n\t\t{\n\t\t\t\"name\": \"TJ Holowaychuk\",\n\t\t\t\"email\": \"tj@vision-media.ca\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Aaron Heckmann\",\n\t\t\t\"email\": \"aaron.heckmann+github@gmail.com\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Ciaran Jessup\",\n\t\t\t\"email\": \"ciaranj@gmail.com\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Guillermo Rauch\",\n\t\t\t\"email\": \"rauchg@gmail.com\"\n\t\t}\n\t],\n\t\"dependencies\": {\n\t\t\"connect\": \"2.8.4\",\n\t\t\"commander\": \"1.2.0\",\n\t\t\"range-parser\": \"0.0.4\",\n\t\t\"mkdirp\": \"0.3.5\",\n\t\t\"cookie\": \"0.1.0\",\n\t\t\"buffer-crc32\": \"0.2.1\",\n\t\t\"fresh\": \"0.1.0\",\n\t\t\"methods\": \"0.0.1\",\n\t\t\"send\": \"0.1.3\",\n\t\t\"cookie-signature\": \"1.0.1\",\n\t\t\"debug\": \"*\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ejs\": \"*\",\n\t\t\"mocha\": \"*\",\n\t\t\"jade\": \"0.30.0\",\n\t\t\"hjs\": \"*\",\n\t\t\"stylus\": \"*\",\n\t\t\"should\": \"*\",\n\t\t\"connect-redis\": \"*\",\n\t\t\"marked\": \"*\",\n\t\t\"supertest\": \"0.6.0\"\n\t},\n\t\"keywords\": [\n\t\t\"express\",\n\t\t\"framework\",\n\t\t\"sinatra\",\n\t\t\"web\",\n\t\t\"rest\",\n\t\t\"restful\",\n\t\t\"router\",\n\t\t\"app\",\n\t\t\"api\"\n\t],\n\t\"repository\": \"git://github.com/visionmedia/express\",\n\t\"main\": \"index\",\n\t\"bin\": {\n\t\t\"express\": \"./bin/express\"\n\t},\n\t\"scripts\": {\n\t\t\"prepublish\": \"npm prune\",\n\t\t\"test\": \"make test\"\n\t},\n\t\"engines\": {\n\t\"node\": \"*\"\n\t}\n}\n```\n> __参考文献：__\n> - 《深入浅出Node.js》朴灵\n> - [http://javascript.ruanyifeng.com/nodejs/packagejson.html](http://javascript.ruanyifeng.com/nodejs/packagejson.html)","slug":"包与NPM","published":1,"updated":"2018-08-24T09:59:23.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjleqs1oc000zq3v3frvqngg4","content":"<p>在说到NPM之前，应该先提及CommonJS的包规范。</p>\n<p>CommonJS包规范定义很简单，它是由包结构和包描述文件两个部分组成。</p>\n<h1 id=\"包结构\"><a href=\"#包结构\" class=\"headerlink\" title=\"包结构\"></a>包结构</h1><p>包结构是用于组织包中的各种文件。完全符合CommonJS规范的包目录应该包含如下文件。</p>\n<ul>\n<li>package.json ———— 包描述文件。</li>\n<li>bin ———— 用于存放可执行二进制文件的目录。</li>\n<li>lib ———— 用于存放js代码的目录。</li>\n<li>doc ———— 用于存放文档的目录。</li>\n<li>test ———— 用于存放单元测试用例的代码。</li>\n</ul>\n<h1 id=\"包描述文件\"><a href=\"#包描述文件\" class=\"headerlink\" title=\"包描述文件\"></a>包描述文件</h1><p>包描述文件用于表达非代码相关的信息，它是一个JSON格式的文件（package.json），位于根目录下。</p>\n<p>这里我们就只介绍 NPM 的 package.json 文件定义了哪些必需的字段：</p>\n<ul>\n<li>name ———— 项目名称。</li>\n<li>version ———— 版本。在 <a href=\"http://semver.org/\" target=\"_blank\" rel=\"noopener\">http://semver.org/</a> 上有详细的定义，通常为 major.minor.revision 格式。</li>\n<li>author ———— 作者。</li>\n<li>description ———— 项目简介。</li>\n<li>keywords ———— 关键词数组。用于NPM中做分类搜索的。</li>\n<li>repository ———— 托管源代码的位置列表。示例：<code>{ &quot;type&quot;: &quot;git&quot;, &quot;url&quot;: &quot;https://package/path&quot; }</code></li>\n<li>license ———— 当前包所使用的许可证列表。示例：<code>[{ &quot;type&quot;: &quot;GPLv2&quot;, &quot;url&quot;: &quot;http://www.example.com/licenses/gpl.html&quot;, }]</code></li>\n<li>engines ———— 指明该项目所需要的nodejs版本。</li>\n<li>bugs ———— 返回bug的网页地址或则邮箱地址。</li>\n<li>contributors ———— 贡献者列表。</li>\n<li>scripts ———— 指定了运行脚本命令的npm命令行缩写。可以自行写好运行脚本。</li>\n<li>dependencies ———— 指定了项目运行所依赖的模块。<code>npm install XX --save</code></li>\n<li>devDependencies ———— 指定项目开发所需要的模块。<code>npm install XX --save-dev</code><blockquote>\n<ul>\n<li><strong>波浪号（tilde）+指定版本：</strong>比如~1.2.2，表示安装1.2.x的最新版本（不低于1.2.2），但是不安装1.3.x，也就是说安装时不改变大版本号和次要版本号。</li>\n<li><strong>插入号（caret）+指定版本：</strong>比如ˆ1.2.2，表示安装1.x.x的最新版本（不低于1.2.2），但是不安装2.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。</li>\n<li><strong>latest：</strong>安装最新版本。</li>\n</ul>\n</blockquote>\n</li>\n<li>peerDependencies ———— 用来供插件指定其所需要的主工具的版本（从npm 3.0版开始，peerDependencies不再会默认安装了）。</li>\n<li>bin ———— 用来指定各个内部命令对应的可执行文件的位置。</li>\n<li>main ———— 指定加载的入口文件。</li>\n<li>config ———— 用于向环境变量输出值。示例：<code>{ &quot;port&quot; : &quot;8080&quot; }</code>，则在<code>server.js</code>脚本就可以直接引用config里的值 <code>http.createServer(...).listen(process.env.npm_package_config_port)</code></li>\n</ul>\n<p>下面是express项目的package.json文件，可以参考下：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;name&quot;: &quot;express&quot;,</span><br><span class=\"line\">\t&quot;description&quot;: &quot;Sinatra inspired web development framework&quot;,</span><br><span class=\"line\">\t&quot;version&quot;: &quot;3.3.4&quot;,</span><br><span class=\"line\">\t&quot;author&quot;: &quot;TJ Holowaychuk &lt;tj@vision-media.ca&gt;&quot;,</span><br><span class=\"line\">\t&quot;contributors&quot;: [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;name&quot;: &quot;TJ Holowaychuk&quot;,</span><br><span class=\"line\">\t\t\t&quot;email&quot;: &quot;tj@vision-media.ca&quot;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;name&quot;: &quot;Aaron Heckmann&quot;,</span><br><span class=\"line\">\t\t\t&quot;email&quot;: &quot;aaron.heckmann+github@gmail.com&quot;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;name&quot;: &quot;Ciaran Jessup&quot;,</span><br><span class=\"line\">\t\t\t&quot;email&quot;: &quot;ciaranj@gmail.com&quot;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;name&quot;: &quot;Guillermo Rauch&quot;,</span><br><span class=\"line\">\t\t\t&quot;email&quot;: &quot;rauchg@gmail.com&quot;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t&quot;dependencies&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;connect&quot;: &quot;2.8.4&quot;,</span><br><span class=\"line\">\t\t&quot;commander&quot;: &quot;1.2.0&quot;,</span><br><span class=\"line\">\t\t&quot;range-parser&quot;: &quot;0.0.4&quot;,</span><br><span class=\"line\">\t\t&quot;mkdirp&quot;: &quot;0.3.5&quot;,</span><br><span class=\"line\">\t\t&quot;cookie&quot;: &quot;0.1.0&quot;,</span><br><span class=\"line\">\t\t&quot;buffer-crc32&quot;: &quot;0.2.1&quot;,</span><br><span class=\"line\">\t\t&quot;fresh&quot;: &quot;0.1.0&quot;,</span><br><span class=\"line\">\t\t&quot;methods&quot;: &quot;0.0.1&quot;,</span><br><span class=\"line\">\t\t&quot;send&quot;: &quot;0.1.3&quot;,</span><br><span class=\"line\">\t\t&quot;cookie-signature&quot;: &quot;1.0.1&quot;,</span><br><span class=\"line\">\t\t&quot;debug&quot;: &quot;*&quot;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;ejs&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;mocha&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;jade&quot;: &quot;0.30.0&quot;,</span><br><span class=\"line\">\t\t&quot;hjs&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;stylus&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;should&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;connect-redis&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;marked&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;supertest&quot;: &quot;0.6.0&quot;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;keywords&quot;: [</span><br><span class=\"line\">\t\t&quot;express&quot;,</span><br><span class=\"line\">\t\t&quot;framework&quot;,</span><br><span class=\"line\">\t\t&quot;sinatra&quot;,</span><br><span class=\"line\">\t\t&quot;web&quot;,</span><br><span class=\"line\">\t\t&quot;rest&quot;,</span><br><span class=\"line\">\t\t&quot;restful&quot;,</span><br><span class=\"line\">\t\t&quot;router&quot;,</span><br><span class=\"line\">\t\t&quot;app&quot;,</span><br><span class=\"line\">\t\t&quot;api&quot;</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t&quot;repository&quot;: &quot;git://github.com/visionmedia/express&quot;,</span><br><span class=\"line\">\t&quot;main&quot;: &quot;index&quot;,</span><br><span class=\"line\">\t&quot;bin&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;express&quot;: &quot;./bin/express&quot;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;scripts&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;prepublish&quot;: &quot;npm prune&quot;,</span><br><span class=\"line\">\t\t&quot;test&quot;: &quot;make test&quot;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;engines&quot;: &#123;</span><br><span class=\"line\">\t&quot;node&quot;: &quot;*&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong>参考文献：</strong></p>\n<ul>\n<li>《深入浅出Node.js》朴灵</li>\n<li><a href=\"http://javascript.ruanyifeng.com/nodejs/packagejson.html\" target=\"_blank\" rel=\"noopener\">http://javascript.ruanyifeng.com/nodejs/packagejson.html</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>在说到NPM之前，应该先提及CommonJS的包规范。</p>\n<p>CommonJS包规范定义很简单，它是由包结构和包描述文件两个部分组成。</p>\n<h1 id=\"包结构\"><a href=\"#包结构\" class=\"headerlink\" title=\"包结构\"></a>包结构</h1><p>包结构是用于组织包中的各种文件。完全符合CommonJS规范的包目录应该包含如下文件。</p>\n<ul>\n<li>package.json ———— 包描述文件。</li>\n<li>bin ———— 用于存放可执行二进制文件的目录。</li>\n<li>lib ———— 用于存放js代码的目录。</li>\n<li>doc ———— 用于存放文档的目录。</li>\n<li>test ———— 用于存放单元测试用例的代码。</li>\n</ul>\n<h1 id=\"包描述文件\"><a href=\"#包描述文件\" class=\"headerlink\" title=\"包描述文件\"></a>包描述文件</h1><p>包描述文件用于表达非代码相关的信息，它是一个JSON格式的文件（package.json），位于根目录下。</p>\n<p>这里我们就只介绍 NPM 的 package.json 文件定义了哪些必需的字段：</p>\n<ul>\n<li>name ———— 项目名称。</li>\n<li>version ———— 版本。在 <a href=\"http://semver.org/\" target=\"_blank\" rel=\"noopener\">http://semver.org/</a> 上有详细的定义，通常为 major.minor.revision 格式。</li>\n<li>author ———— 作者。</li>\n<li>description ———— 项目简介。</li>\n<li>keywords ———— 关键词数组。用于NPM中做分类搜索的。</li>\n<li>repository ———— 托管源代码的位置列表。示例：<code>{ &quot;type&quot;: &quot;git&quot;, &quot;url&quot;: &quot;https://package/path&quot; }</code></li>\n<li>license ———— 当前包所使用的许可证列表。示例：<code>[{ &quot;type&quot;: &quot;GPLv2&quot;, &quot;url&quot;: &quot;http://www.example.com/licenses/gpl.html&quot;, }]</code></li>\n<li>engines ———— 指明该项目所需要的nodejs版本。</li>\n<li>bugs ———— 返回bug的网页地址或则邮箱地址。</li>\n<li>contributors ———— 贡献者列表。</li>\n<li>scripts ———— 指定了运行脚本命令的npm命令行缩写。可以自行写好运行脚本。</li>\n<li>dependencies ———— 指定了项目运行所依赖的模块。<code>npm install XX --save</code></li>\n<li>devDependencies ———— 指定项目开发所需要的模块。<code>npm install XX --save-dev</code><blockquote>\n<ul>\n<li><strong>波浪号（tilde）+指定版本：</strong>比如~1.2.2，表示安装1.2.x的最新版本（不低于1.2.2），但是不安装1.3.x，也就是说安装时不改变大版本号和次要版本号。</li>\n<li><strong>插入号（caret）+指定版本：</strong>比如ˆ1.2.2，表示安装1.x.x的最新版本（不低于1.2.2），但是不安装2.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。</li>\n<li><strong>latest：</strong>安装最新版本。</li>\n</ul>\n</blockquote>\n</li>\n<li>peerDependencies ———— 用来供插件指定其所需要的主工具的版本（从npm 3.0版开始，peerDependencies不再会默认安装了）。</li>\n<li>bin ———— 用来指定各个内部命令对应的可执行文件的位置。</li>\n<li>main ———— 指定加载的入口文件。</li>\n<li>config ———— 用于向环境变量输出值。示例：<code>{ &quot;port&quot; : &quot;8080&quot; }</code>，则在<code>server.js</code>脚本就可以直接引用config里的值 <code>http.createServer(...).listen(process.env.npm_package_config_port)</code></li>\n</ul>\n<p>下面是express项目的package.json文件，可以参考下：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;name&quot;: &quot;express&quot;,</span><br><span class=\"line\">\t&quot;description&quot;: &quot;Sinatra inspired web development framework&quot;,</span><br><span class=\"line\">\t&quot;version&quot;: &quot;3.3.4&quot;,</span><br><span class=\"line\">\t&quot;author&quot;: &quot;TJ Holowaychuk &lt;tj@vision-media.ca&gt;&quot;,</span><br><span class=\"line\">\t&quot;contributors&quot;: [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;name&quot;: &quot;TJ Holowaychuk&quot;,</span><br><span class=\"line\">\t\t\t&quot;email&quot;: &quot;tj@vision-media.ca&quot;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;name&quot;: &quot;Aaron Heckmann&quot;,</span><br><span class=\"line\">\t\t\t&quot;email&quot;: &quot;aaron.heckmann+github@gmail.com&quot;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;name&quot;: &quot;Ciaran Jessup&quot;,</span><br><span class=\"line\">\t\t\t&quot;email&quot;: &quot;ciaranj@gmail.com&quot;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;name&quot;: &quot;Guillermo Rauch&quot;,</span><br><span class=\"line\">\t\t\t&quot;email&quot;: &quot;rauchg@gmail.com&quot;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t&quot;dependencies&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;connect&quot;: &quot;2.8.4&quot;,</span><br><span class=\"line\">\t\t&quot;commander&quot;: &quot;1.2.0&quot;,</span><br><span class=\"line\">\t\t&quot;range-parser&quot;: &quot;0.0.4&quot;,</span><br><span class=\"line\">\t\t&quot;mkdirp&quot;: &quot;0.3.5&quot;,</span><br><span class=\"line\">\t\t&quot;cookie&quot;: &quot;0.1.0&quot;,</span><br><span class=\"line\">\t\t&quot;buffer-crc32&quot;: &quot;0.2.1&quot;,</span><br><span class=\"line\">\t\t&quot;fresh&quot;: &quot;0.1.0&quot;,</span><br><span class=\"line\">\t\t&quot;methods&quot;: &quot;0.0.1&quot;,</span><br><span class=\"line\">\t\t&quot;send&quot;: &quot;0.1.3&quot;,</span><br><span class=\"line\">\t\t&quot;cookie-signature&quot;: &quot;1.0.1&quot;,</span><br><span class=\"line\">\t\t&quot;debug&quot;: &quot;*&quot;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;ejs&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;mocha&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;jade&quot;: &quot;0.30.0&quot;,</span><br><span class=\"line\">\t\t&quot;hjs&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;stylus&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;should&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;connect-redis&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;marked&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;supertest&quot;: &quot;0.6.0&quot;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;keywords&quot;: [</span><br><span class=\"line\">\t\t&quot;express&quot;,</span><br><span class=\"line\">\t\t&quot;framework&quot;,</span><br><span class=\"line\">\t\t&quot;sinatra&quot;,</span><br><span class=\"line\">\t\t&quot;web&quot;,</span><br><span class=\"line\">\t\t&quot;rest&quot;,</span><br><span class=\"line\">\t\t&quot;restful&quot;,</span><br><span class=\"line\">\t\t&quot;router&quot;,</span><br><span class=\"line\">\t\t&quot;app&quot;,</span><br><span class=\"line\">\t\t&quot;api&quot;</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t&quot;repository&quot;: &quot;git://github.com/visionmedia/express&quot;,</span><br><span class=\"line\">\t&quot;main&quot;: &quot;index&quot;,</span><br><span class=\"line\">\t&quot;bin&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;express&quot;: &quot;./bin/express&quot;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;scripts&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;prepublish&quot;: &quot;npm prune&quot;,</span><br><span class=\"line\">\t\t&quot;test&quot;: &quot;make test&quot;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;engines&quot;: &#123;</span><br><span class=\"line\">\t&quot;node&quot;: &quot;*&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong>参考文献：</strong></p>\n<ul>\n<li>《深入浅出Node.js》朴灵</li>\n<li><a href=\"http://javascript.ruanyifeng.com/nodejs/packagejson.html\" target=\"_blank\" rel=\"noopener\">http://javascript.ruanyifeng.com/nodejs/packagejson.html</a></li>\n</ul>\n</blockquote>\n"},{"title":"开启新世界的大门！(灬ºωº灬)","date":"2016-10-21T06:38:33.000Z","_content":"\n首先，欢迎你手残点进了此地！！！ξ( ✿＞◡❛)\n\n博主前端开发人员一枚，于今涉足行业将近2年，在之前干过漫画编辑做过网页设计，可谓上得了厅堂下得了厨房。然而水平有限，寻求志同道合人士共同学习进步。 (´∩ω∩｀)\n\n此博客内容仅仅是自己学习上的一些心得总结，并不一定是正确可取的，还希望发现BUG的小伙伴们积极指出错误！\n\n知错能改，善莫大焉。(⁰▿⁰) 还望大家文明交流，博主其实是玻璃心。(´▽`ʃ♡ƪ)","source":"_posts/开启新世界的大门！-灬ºωº灬.md","raw":"---\ntitle: 开启新世界的大门！(灬ºωº灬)\ntags: []\ncategories: []\ndate: 2016-10-21 14:38:33\n---\n\n首先，欢迎你手残点进了此地！！！ξ( ✿＞◡❛)\n\n博主前端开发人员一枚，于今涉足行业将近2年，在之前干过漫画编辑做过网页设计，可谓上得了厅堂下得了厨房。然而水平有限，寻求志同道合人士共同学习进步。 (´∩ω∩｀)\n\n此博客内容仅仅是自己学习上的一些心得总结，并不一定是正确可取的，还希望发现BUG的小伙伴们积极指出错误！\n\n知错能改，善莫大焉。(⁰▿⁰) 还望大家文明交流，博主其实是玻璃心。(´▽`ʃ♡ƪ)","slug":"开启新世界的大门！-灬ºωº灬","published":1,"updated":"2016-10-21T06:42:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjleqs1od0011q3v3b38pslgq","content":"<p>首先，欢迎你手残点进了此地！！！ξ( ✿＞◡❛)</p>\n<p>博主前端开发人员一枚，于今涉足行业将近2年，在之前干过漫画编辑做过网页设计，可谓上得了厅堂下得了厨房。然而水平有限，寻求志同道合人士共同学习进步。 (´∩ω∩｀)</p>\n<p>此博客内容仅仅是自己学习上的一些心得总结，并不一定是正确可取的，还希望发现BUG的小伙伴们积极指出错误！</p>\n<p>知错能改，善莫大焉。(⁰▿⁰) 还望大家文明交流，博主其实是玻璃心。(´▽`ʃ♡ƪ)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先，欢迎你手残点进了此地！！！ξ( ✿＞◡❛)</p>\n<p>博主前端开发人员一枚，于今涉足行业将近2年，在之前干过漫画编辑做过网页设计，可谓上得了厅堂下得了厨房。然而水平有限，寻求志同道合人士共同学习进步。 (´∩ω∩｀)</p>\n<p>此博客内容仅仅是自己学习上的一些心得总结，并不一定是正确可取的，还希望发现BUG的小伙伴们积极指出错误！</p>\n<p>知错能改，善莫大焉。(⁰▿⁰) 还望大家文明交流，博主其实是玻璃心。(´▽`ʃ♡ƪ)</p>\n"},{"title":"解决gem install SSL 证书错误","date":"2016-10-21T08:40:10.000Z","_content":"\n这个问题我是在替换gem镜像路径的时候遇到的。\n\n详情见：[解决国内Ruby Gem Install 失败问题](http://blog2.pierrothall.com/2016/10/21/%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%86%85Ruby-Gem-Install-%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/)\n\n这个其实也折腾了我一个多小时在网上找解决办法。\n# 问题\n相信有部分的人在按照上面方法安装的时候出现了和我一样的问题：\n\n![](/images/QQ截图20160413163537.png)\n\n在网上搜索一圈之后，解释是：\n> ruby 没有包含 SSL 证书，所以 https 的链接被服务器拒绝。\n\n本来这个情况下，只要改用http路径就好了，偏偏淘宝已经停止基于HTTP协议的镜像服务了。\n\n于是我继续在网上搜了一圈，找到了如下的解决办法（来源：https://gist.github.com/fnichol/867550 ）:\n# 解决\n先下载证书 http://curl.haxx.se/ca/cacert.pem ，然后再环境变量里设置 SSL_CERT_FILE 这个环境变量，并指向 cacert.pem 文件。\n\n![](/images/QQ截图20160413165101.png)\n\n之后再在`cmd.exe`中输入命令：\n\n```\nset SSL_CERT_FILE=C:\\path\\to\\cacert.pem\n```\n之后再按照上面的方法来操作一遍~~~\n\n![](/images/QQ截图20160413165633.png)\n\nPerfect！！","source":"_posts/解决gem-install-SSL-证书错误.md","raw":"---\ntitle: 解决gem install SSL 证书错误\ntags: [环境搭建, ruby]\ncategories: [环境搭建]\ndate: 2016-10-21 16:40:10\n---\n\n这个问题我是在替换gem镜像路径的时候遇到的。\n\n详情见：[解决国内Ruby Gem Install 失败问题](http://blog2.pierrothall.com/2016/10/21/%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%86%85Ruby-Gem-Install-%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/)\n\n这个其实也折腾了我一个多小时在网上找解决办法。\n# 问题\n相信有部分的人在按照上面方法安装的时候出现了和我一样的问题：\n\n![](/images/QQ截图20160413163537.png)\n\n在网上搜索一圈之后，解释是：\n> ruby 没有包含 SSL 证书，所以 https 的链接被服务器拒绝。\n\n本来这个情况下，只要改用http路径就好了，偏偏淘宝已经停止基于HTTP协议的镜像服务了。\n\n于是我继续在网上搜了一圈，找到了如下的解决办法（来源：https://gist.github.com/fnichol/867550 ）:\n# 解决\n先下载证书 http://curl.haxx.se/ca/cacert.pem ，然后再环境变量里设置 SSL_CERT_FILE 这个环境变量，并指向 cacert.pem 文件。\n\n![](/images/QQ截图20160413165101.png)\n\n之后再在`cmd.exe`中输入命令：\n\n```\nset SSL_CERT_FILE=C:\\path\\to\\cacert.pem\n```\n之后再按照上面的方法来操作一遍~~~\n\n![](/images/QQ截图20160413165633.png)\n\nPerfect！！","slug":"解决gem-install-SSL-证书错误","published":1,"updated":"2018-08-24T09:59:30.616Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjleqs1oe0013q3v31otgt5ov","content":"<p>这个问题我是在替换gem镜像路径的时候遇到的。</p>\n<p>详情见：<a href=\"http://blog2.pierrothall.com/2016/10/21/%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%86%85Ruby-Gem-Install-%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/\" target=\"_blank\" rel=\"noopener\">解决国内Ruby Gem Install 失败问题</a></p>\n<p>这个其实也折腾了我一个多小时在网上找解决办法。</p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>相信有部分的人在按照上面方法安装的时候出现了和我一样的问题：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20160413163537.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>在网上搜索一圈之后，解释是：</p>\n<blockquote>\n<p>ruby 没有包含 SSL 证书，所以 https 的链接被服务器拒绝。</p>\n</blockquote>\n<p>本来这个情况下，只要改用http路径就好了，偏偏淘宝已经停止基于HTTP协议的镜像服务了。</p>\n<p>于是我继续在网上搜了一圈，找到了如下的解决办法（来源：<a href=\"https://gist.github.com/fnichol/867550\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/fnichol/867550</a> ）:</p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><p>先下载证书 <a href=\"http://curl.haxx.se/ca/cacert.pem\" target=\"_blank\" rel=\"noopener\">http://curl.haxx.se/ca/cacert.pem</a> ，然后再环境变量里设置 SSL_CERT_FILE 这个环境变量，并指向 cacert.pem 文件。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20160413165101.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>之后再在<code>cmd.exe</code>中输入命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">set SSL_CERT_FILE=C:\\path\\to\\cacert.pem</span><br></pre></td></tr></table></figure>\n<p>之后再按照上面的方法来操作一遍~~~</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20160413165633.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>Perfect！！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这个问题我是在替换gem镜像路径的时候遇到的。</p>\n<p>详情见：<a href=\"http://blog2.pierrothall.com/2016/10/21/%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%86%85Ruby-Gem-Install-%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/\" target=\"_blank\" rel=\"noopener\">解决国内Ruby Gem Install 失败问题</a></p>\n<p>这个其实也折腾了我一个多小时在网上找解决办法。</p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>相信有部分的人在按照上面方法安装的时候出现了和我一样的问题：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20160413163537.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>在网上搜索一圈之后，解释是：</p>\n<blockquote>\n<p>ruby 没有包含 SSL 证书，所以 https 的链接被服务器拒绝。</p>\n</blockquote>\n<p>本来这个情况下，只要改用http路径就好了，偏偏淘宝已经停止基于HTTP协议的镜像服务了。</p>\n<p>于是我继续在网上搜了一圈，找到了如下的解决办法（来源：<a href=\"https://gist.github.com/fnichol/867550\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/fnichol/867550</a> ）:</p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><p>先下载证书 <a href=\"http://curl.haxx.se/ca/cacert.pem\" target=\"_blank\" rel=\"noopener\">http://curl.haxx.se/ca/cacert.pem</a> ，然后再环境变量里设置 SSL_CERT_FILE 这个环境变量，并指向 cacert.pem 文件。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20160413165101.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>之后再在<code>cmd.exe</code>中输入命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">set SSL_CERT_FILE=C:\\path\\to\\cacert.pem</span><br></pre></td></tr></table></figure>\n<p>之后再按照上面的方法来操作一遍~~~</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20160413165633.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>Perfect！！</p>\n"},{"title":"解决国内Ruby Gem Install 失败问题","date":"2016-10-21T06:55:48.000Z","_content":"\n做一个国内的程序员真的是很辛苦很辛苦，各种被墙，科技还怎么进步捏。好在上有政策下有对策，国内大神还是很良心的给我们提供了很多不少解决方案。\n\n淘宝团队提供了国内可以快速访问的镜像地址，官方地址：https://ruby.taobao.org/\n\n官方有详细的替换的方法，这里我也按照我的流程过一遍。\n# 安装Ruby\n首先，我的系统是win7。\n\n在window上安装Ruby，可以通过下载RubyInstaller工具（ http://rubyinstaller.org/ ）快速安装：\n\n![](/images/QQ截图20160413155659.png)\n# 替换成taobao镜像\n之后 `win+R` 键打开运行窗口，输入cmd 快速打开命令行程序。\n```\n$ gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/\n$ gem sources -l\n*** CURRENT SOURCES ***\n\nhttps://ruby.taobao.org\n# 请确保只有 ruby.taobao.org\n$ gem install rails\n```\n以上是淘宝官方的方法。很简单，然而现实总是没这么顺利…\n\n和我一样安装遇到SSL证书错误的请看这里：[解决gem install SSL 证书错误](http://blog2.pierrothall.com/2016/10/21/%E8%A7%A3%E5%86%B3gem-install-SSL-%E8%AF%81%E4%B9%A6%E9%94%99%E8%AF%AF/)","source":"_posts/解决国内Ruby-Gem-Install-失败问题.md","raw":"---\ntitle: 解决国内Ruby Gem Install 失败问题\ntags: [ruby, 环境搭建]\ncategories: [环境搭建]\ndate: 2016-10-21 14:55:48\n---\n\n做一个国内的程序员真的是很辛苦很辛苦，各种被墙，科技还怎么进步捏。好在上有政策下有对策，国内大神还是很良心的给我们提供了很多不少解决方案。\n\n淘宝团队提供了国内可以快速访问的镜像地址，官方地址：https://ruby.taobao.org/\n\n官方有详细的替换的方法，这里我也按照我的流程过一遍。\n# 安装Ruby\n首先，我的系统是win7。\n\n在window上安装Ruby，可以通过下载RubyInstaller工具（ http://rubyinstaller.org/ ）快速安装：\n\n![](/images/QQ截图20160413155659.png)\n# 替换成taobao镜像\n之后 `win+R` 键打开运行窗口，输入cmd 快速打开命令行程序。\n```\n$ gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/\n$ gem sources -l\n*** CURRENT SOURCES ***\n\nhttps://ruby.taobao.org\n# 请确保只有 ruby.taobao.org\n$ gem install rails\n```\n以上是淘宝官方的方法。很简单，然而现实总是没这么顺利…\n\n和我一样安装遇到SSL证书错误的请看这里：[解决gem install SSL 证书错误](http://blog2.pierrothall.com/2016/10/21/%E8%A7%A3%E5%86%B3gem-install-SSL-%E8%AF%81%E4%B9%A6%E9%94%99%E8%AF%AF/)","slug":"解决国内Ruby-Gem-Install-失败问题","published":1,"updated":"2018-08-24T09:59:36.474Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjleqs1oh0017q3v37r0qiyne","content":"<p>做一个国内的程序员真的是很辛苦很辛苦，各种被墙，科技还怎么进步捏。好在上有政策下有对策，国内大神还是很良心的给我们提供了很多不少解决方案。</p>\n<p>淘宝团队提供了国内可以快速访问的镜像地址，官方地址：<a href=\"https://ruby.taobao.org/\" target=\"_blank\" rel=\"noopener\">https://ruby.taobao.org/</a></p>\n<p>官方有详细的替换的方法，这里我也按照我的流程过一遍。</p>\n<h1 id=\"安装Ruby\"><a href=\"#安装Ruby\" class=\"headerlink\" title=\"安装Ruby\"></a>安装Ruby</h1><p>首先，我的系统是win7。</p>\n<p>在window上安装Ruby，可以通过下载RubyInstaller工具（ <a href=\"http://rubyinstaller.org/\" target=\"_blank\" rel=\"noopener\">http://rubyinstaller.org/</a> ）快速安装：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20160413155659.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h1 id=\"替换成taobao镜像\"><a href=\"#替换成taobao镜像\" class=\"headerlink\" title=\"替换成taobao镜像\"></a>替换成taobao镜像</h1><p>之后 <code>win+R</code> 键打开运行窗口，输入cmd 快速打开命令行程序。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/</span><br><span class=\"line\">$ gem sources -l</span><br><span class=\"line\">*** CURRENT SOURCES ***</span><br><span class=\"line\"></span><br><span class=\"line\">https://ruby.taobao.org</span><br><span class=\"line\"># 请确保只有 ruby.taobao.org</span><br><span class=\"line\">$ gem install rails</span><br></pre></td></tr></table></figure></p>\n<p>以上是淘宝官方的方法。很简单，然而现实总是没这么顺利…</p>\n<p>和我一样安装遇到SSL证书错误的请看这里：<a href=\"http://blog2.pierrothall.com/2016/10/21/%E8%A7%A3%E5%86%B3gem-install-SSL-%E8%AF%81%E4%B9%A6%E9%94%99%E8%AF%AF/\" target=\"_blank\" rel=\"noopener\">解决gem install SSL 证书错误</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>做一个国内的程序员真的是很辛苦很辛苦，各种被墙，科技还怎么进步捏。好在上有政策下有对策，国内大神还是很良心的给我们提供了很多不少解决方案。</p>\n<p>淘宝团队提供了国内可以快速访问的镜像地址，官方地址：<a href=\"https://ruby.taobao.org/\" target=\"_blank\" rel=\"noopener\">https://ruby.taobao.org/</a></p>\n<p>官方有详细的替换的方法，这里我也按照我的流程过一遍。</p>\n<h1 id=\"安装Ruby\"><a href=\"#安装Ruby\" class=\"headerlink\" title=\"安装Ruby\"></a>安装Ruby</h1><p>首先，我的系统是win7。</p>\n<p>在window上安装Ruby，可以通过下载RubyInstaller工具（ <a href=\"http://rubyinstaller.org/\" target=\"_blank\" rel=\"noopener\">http://rubyinstaller.org/</a> ）快速安装：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20160413155659.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h1 id=\"替换成taobao镜像\"><a href=\"#替换成taobao镜像\" class=\"headerlink\" title=\"替换成taobao镜像\"></a>替换成taobao镜像</h1><p>之后 <code>win+R</code> 键打开运行窗口，输入cmd 快速打开命令行程序。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/</span><br><span class=\"line\">$ gem sources -l</span><br><span class=\"line\">*** CURRENT SOURCES ***</span><br><span class=\"line\"></span><br><span class=\"line\">https://ruby.taobao.org</span><br><span class=\"line\"># 请确保只有 ruby.taobao.org</span><br><span class=\"line\">$ gem install rails</span><br></pre></td></tr></table></figure></p>\n<p>以上是淘宝官方的方法。很简单，然而现实总是没这么顺利…</p>\n<p>和我一样安装遇到SSL证书错误的请看这里：<a href=\"http://blog2.pierrothall.com/2016/10/21/%E8%A7%A3%E5%86%B3gem-install-SSL-%E8%AF%81%E4%B9%A6%E9%94%99%E8%AF%AF/\" target=\"_blank\" rel=\"noopener\">解决gem install SSL 证书错误</a></p>\n"},{"title":"web移动端调试大法","date":"2016-12-29T07:02:38.000Z","_content":"在做移动端web开发的时候，头痛遇到移动端调试的问题，虽然现在很多PC浏览器的开发工具都自带移动端调试功能，但是显然和真机测试还是有一定差距，因为移动端不同的设备会出现不同的问题，在PC模拟器上显示正常的换到真机上测试就是会出问题。\n在这里整理一些常见的移动端调试方法。\n\n__先从一般的页面调试方法开始。__\n# console方式\n这个是最常见的一种调试方法，通过console在浏览器控制台打印出每步所需的回调数据。\n详细可以参考[Web API接口](https://developer.mozilla.org/zh-CN/docs/Web/API/Console)\n# 浏览器自带的移动端模拟器调试\n这个现在也比较常见了。最常用的是chrome的模拟器，当然现在流行的浏览器基本上都有开发者的模式，也都携有移动端的模拟器。比如火狐浏览器、360浏览器等。\n基本上浏览器开启开发者模式的方法都统一了，在windows环境下按`F12`进入开发者攻击界面，mac环境则是下按`option+command+i`。\n![](/images/QQ截图20161229151926.png)\n# UC浏览器测试\nUC浏览器提供了开发版方便开发者们连接测试。详见：[UC浏览器开发者版](http://plus.uc.cn/document/webapp/doc5.html)\n# 第三方平台在线模拟器调试\n第三方开发的平台比较方便，功能也相当强大，对于一些需要完善测试的，其实使用第三方的平台还是比较方便的。\n这里我就推荐几个比较有名的第三方平台：\n- [BrowserStack](https://www.browserstack.com/)\n- [Keynote](http://www.keynote.com/)\n- [BrowserShots](http://browsershots.org/)\n- [Browsera](http://www.browsera.com/)\n- [Ghostlab](http://www.vanamco.com/ghostlab/)\n等等...\n\n__下面介绍一些我比较喜欢的一些远程调试工具。__\n# Weinre\n之前微信开发工具中的远程调试也是基于这个开发的。\n安装方法很简单快捷。\n安装 Weinre：\n```\nnpm install -g weinre\n```\n安装完成之后，输入指令启动：\n```\nweinre --httpPort 8081 --boundHost -all-\n```\n显示如下则启动成功。\n![](/images/QQ截图20161229154152.png)\n此时我们访问地址：`http://localhost:8081/` 会显示下图：\n![](/images/QQ截图20161229154809.png)\n在页面中也有提供几种方案，在你的项目中添加对应的js。例如：`<script src=\"http://192.168.55.23:8081/target/target-script-min.js#anonymous\"></script>`\n随后便可以通过PC访问`http://192.168.55.23:8081/client/#anonymous`就可以看到手机上访问的项目页面了。\n![](/images/QQ截图20161229160034.png)\n# 代理应用\n这类代理应用实际上是用于抓包的，但是比起Weinre是基于开发者自身开发测试的。如果我们想要去获取其他网站的一些资源，例如http请求，或则一些js源码等。这时候使用代理工具比较合适。\nmac下常使用的是[Charles](https://www.charlesproxy.com/),windows环境下可以用[Fiddler](http://www.telerik.com/fiddler)\n默认开启的是8888端口。在手机上设置一个网络代理即可，这个不多详细介绍了。\n# [BrowserSync](https://browsersync.io/)\n这是一个很强大的多终端测试工具，它可以跨设备同步操作行为，还可以监听你的文件，在文件修改时自动刷新所有设备中页面。\n[BrowserSync官方网站](https://browsersync.io/)\n也可以通过npm全局安装\n```\nnpm install -g browser-sync\n```\n随后进入项目根目录下\n```\nbrowser-sync start --files \"*.*\"\n// 意思为监听当前目录下所有改动\n```\n终端中若显示如下，则启动成功：\n![](http://7xoxxe.com1.z0.glb.clouddn.com/bs.png)\n终端中显示默认访问地址：`http://localhost:3001` 则可直接进入到控制台界面。\n之后和weinre类似，也是添加一段js在自己的项目底下。\nBrowserSync还可以和gulp以及webpack搭配使用，详细的可以看官方文档。\n# 真机测试\n真机测试是一概而论的说法。由于像ios系统本身就提供了一些对前端十分友好的开发者工具。\n例如，Safari浏览器自带的开发者工具，或则xcode也有测试的方法，这里我局限性比较高，有这方面条件的是可以去搜罗一下相关的方法。\n再者，PhoneGap也是有调试工具的，只不过需要安装它测试app。\n这也是一种方法，不过个人还是偏爱Weinre或则BrowserSync的测试工具。\n\n以上。是我整理的一些移动端测试的方法。欢迎补充~","source":"_posts/web移动端调试大法.md","raw":"---\ntitle: web移动端调试大法\ndate: 2016-12-29 15:02:38\ntags: [环境搭建,web移动端]\ncategories: [环境搭建]\n---\n在做移动端web开发的时候，头痛遇到移动端调试的问题，虽然现在很多PC浏览器的开发工具都自带移动端调试功能，但是显然和真机测试还是有一定差距，因为移动端不同的设备会出现不同的问题，在PC模拟器上显示正常的换到真机上测试就是会出问题。\n在这里整理一些常见的移动端调试方法。\n\n__先从一般的页面调试方法开始。__\n# console方式\n这个是最常见的一种调试方法，通过console在浏览器控制台打印出每步所需的回调数据。\n详细可以参考[Web API接口](https://developer.mozilla.org/zh-CN/docs/Web/API/Console)\n# 浏览器自带的移动端模拟器调试\n这个现在也比较常见了。最常用的是chrome的模拟器，当然现在流行的浏览器基本上都有开发者的模式，也都携有移动端的模拟器。比如火狐浏览器、360浏览器等。\n基本上浏览器开启开发者模式的方法都统一了，在windows环境下按`F12`进入开发者攻击界面，mac环境则是下按`option+command+i`。\n![](/images/QQ截图20161229151926.png)\n# UC浏览器测试\nUC浏览器提供了开发版方便开发者们连接测试。详见：[UC浏览器开发者版](http://plus.uc.cn/document/webapp/doc5.html)\n# 第三方平台在线模拟器调试\n第三方开发的平台比较方便，功能也相当强大，对于一些需要完善测试的，其实使用第三方的平台还是比较方便的。\n这里我就推荐几个比较有名的第三方平台：\n- [BrowserStack](https://www.browserstack.com/)\n- [Keynote](http://www.keynote.com/)\n- [BrowserShots](http://browsershots.org/)\n- [Browsera](http://www.browsera.com/)\n- [Ghostlab](http://www.vanamco.com/ghostlab/)\n等等...\n\n__下面介绍一些我比较喜欢的一些远程调试工具。__\n# Weinre\n之前微信开发工具中的远程调试也是基于这个开发的。\n安装方法很简单快捷。\n安装 Weinre：\n```\nnpm install -g weinre\n```\n安装完成之后，输入指令启动：\n```\nweinre --httpPort 8081 --boundHost -all-\n```\n显示如下则启动成功。\n![](/images/QQ截图20161229154152.png)\n此时我们访问地址：`http://localhost:8081/` 会显示下图：\n![](/images/QQ截图20161229154809.png)\n在页面中也有提供几种方案，在你的项目中添加对应的js。例如：`<script src=\"http://192.168.55.23:8081/target/target-script-min.js#anonymous\"></script>`\n随后便可以通过PC访问`http://192.168.55.23:8081/client/#anonymous`就可以看到手机上访问的项目页面了。\n![](/images/QQ截图20161229160034.png)\n# 代理应用\n这类代理应用实际上是用于抓包的，但是比起Weinre是基于开发者自身开发测试的。如果我们想要去获取其他网站的一些资源，例如http请求，或则一些js源码等。这时候使用代理工具比较合适。\nmac下常使用的是[Charles](https://www.charlesproxy.com/),windows环境下可以用[Fiddler](http://www.telerik.com/fiddler)\n默认开启的是8888端口。在手机上设置一个网络代理即可，这个不多详细介绍了。\n# [BrowserSync](https://browsersync.io/)\n这是一个很强大的多终端测试工具，它可以跨设备同步操作行为，还可以监听你的文件，在文件修改时自动刷新所有设备中页面。\n[BrowserSync官方网站](https://browsersync.io/)\n也可以通过npm全局安装\n```\nnpm install -g browser-sync\n```\n随后进入项目根目录下\n```\nbrowser-sync start --files \"*.*\"\n// 意思为监听当前目录下所有改动\n```\n终端中若显示如下，则启动成功：\n![](http://7xoxxe.com1.z0.glb.clouddn.com/bs.png)\n终端中显示默认访问地址：`http://localhost:3001` 则可直接进入到控制台界面。\n之后和weinre类似，也是添加一段js在自己的项目底下。\nBrowserSync还可以和gulp以及webpack搭配使用，详细的可以看官方文档。\n# 真机测试\n真机测试是一概而论的说法。由于像ios系统本身就提供了一些对前端十分友好的开发者工具。\n例如，Safari浏览器自带的开发者工具，或则xcode也有测试的方法，这里我局限性比较高，有这方面条件的是可以去搜罗一下相关的方法。\n再者，PhoneGap也是有调试工具的，只不过需要安装它测试app。\n这也是一种方法，不过个人还是偏爱Weinre或则BrowserSync的测试工具。\n\n以上。是我整理的一些移动端测试的方法。欢迎补充~","slug":"web移动端调试大法","published":1,"updated":"2018-08-29T02:23:46.719Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjleqs1oj0019q3v38ds37d5t","content":"<p>在做移动端web开发的时候，头痛遇到移动端调试的问题，虽然现在很多PC浏览器的开发工具都自带移动端调试功能，但是显然和真机测试还是有一定差距，因为移动端不同的设备会出现不同的问题，在PC模拟器上显示正常的换到真机上测试就是会出问题。<br>在这里整理一些常见的移动端调试方法。</p>\n<p><strong>先从一般的页面调试方法开始。</strong></p>\n<h1 id=\"console方式\"><a href=\"#console方式\" class=\"headerlink\" title=\"console方式\"></a>console方式</h1><p>这个是最常见的一种调试方法，通过console在浏览器控制台打印出每步所需的回调数据。<br>详细可以参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Console\" target=\"_blank\" rel=\"noopener\">Web API接口</a></p>\n<h1 id=\"浏览器自带的移动端模拟器调试\"><a href=\"#浏览器自带的移动端模拟器调试\" class=\"headerlink\" title=\"浏览器自带的移动端模拟器调试\"></a>浏览器自带的移动端模拟器调试</h1><p>这个现在也比较常见了。最常用的是chrome的模拟器，当然现在流行的浏览器基本上都有开发者的模式，也都携有移动端的模拟器。比如火狐浏览器、360浏览器等。<br>基本上浏览器开启开发者模式的方法都统一了，在windows环境下按<code>F12</code>进入开发者攻击界面，mac环境则是下按<code>option+command+i</code>。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20161229151926.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h1 id=\"UC浏览器测试\"><a href=\"#UC浏览器测试\" class=\"headerlink\" title=\"UC浏览器测试\"></a>UC浏览器测试</h1><p>UC浏览器提供了开发版方便开发者们连接测试。详见：<a href=\"http://plus.uc.cn/document/webapp/doc5.html\" target=\"_blank\" rel=\"noopener\">UC浏览器开发者版</a></p>\n<h1 id=\"第三方平台在线模拟器调试\"><a href=\"#第三方平台在线模拟器调试\" class=\"headerlink\" title=\"第三方平台在线模拟器调试\"></a>第三方平台在线模拟器调试</h1><p>第三方开发的平台比较方便，功能也相当强大，对于一些需要完善测试的，其实使用第三方的平台还是比较方便的。<br>这里我就推荐几个比较有名的第三方平台：</p>\n<ul>\n<li><a href=\"https://www.browserstack.com/\" target=\"_blank\" rel=\"noopener\">BrowserStack</a></li>\n<li><a href=\"http://www.keynote.com/\" target=\"_blank\" rel=\"noopener\">Keynote</a></li>\n<li><a href=\"http://browsershots.org/\" target=\"_blank\" rel=\"noopener\">BrowserShots</a></li>\n<li><a href=\"http://www.browsera.com/\" target=\"_blank\" rel=\"noopener\">Browsera</a></li>\n<li><a href=\"http://www.vanamco.com/ghostlab/\" target=\"_blank\" rel=\"noopener\">Ghostlab</a><br>等等…</li>\n</ul>\n<p><strong>下面介绍一些我比较喜欢的一些远程调试工具。</strong></p>\n<h1 id=\"Weinre\"><a href=\"#Weinre\" class=\"headerlink\" title=\"Weinre\"></a>Weinre</h1><p>之前微信开发工具中的远程调试也是基于这个开发的。<br>安装方法很简单快捷。<br>安装 Weinre：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g weinre</span><br></pre></td></tr></table></figure></p>\n<p>安装完成之后，输入指令启动：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">weinre --httpPort 8081 --boundHost -all-</span><br></pre></td></tr></table></figure></p>\n<p>显示如下则启动成功。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20161229154152.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>此时我们访问地址：<code>http://localhost:8081/</code> 会显示下图：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20161229154809.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>在页面中也有提供几种方案，在你的项目中添加对应的js。例如：<code>&lt;script src=&quot;http://192.168.55.23:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;</code><br>随后便可以通过PC访问<code>http://192.168.55.23:8081/client/#anonymous</code>就可以看到手机上访问的项目页面了。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20161229160034.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h1 id=\"代理应用\"><a href=\"#代理应用\" class=\"headerlink\" title=\"代理应用\"></a>代理应用</h1><p>这类代理应用实际上是用于抓包的，但是比起Weinre是基于开发者自身开发测试的。如果我们想要去获取其他网站的一些资源，例如http请求，或则一些js源码等。这时候使用代理工具比较合适。<br>mac下常使用的是<a href=\"https://www.charlesproxy.com/\" target=\"_blank\" rel=\"noopener\">Charles</a>,windows环境下可以用<a href=\"http://www.telerik.com/fiddler\" target=\"_blank\" rel=\"noopener\">Fiddler</a><br>默认开启的是8888端口。在手机上设置一个网络代理即可，这个不多详细介绍了。</p>\n<h1 id=\"BrowserSync\"><a href=\"#BrowserSync\" class=\"headerlink\" title=\"BrowserSync\"></a><a href=\"https://browsersync.io/\" target=\"_blank\" rel=\"noopener\">BrowserSync</a></h1><p>这是一个很强大的多终端测试工具，它可以跨设备同步操作行为，还可以监听你的文件，在文件修改时自动刷新所有设备中页面。<br><a href=\"https://browsersync.io/\" target=\"_blank\" rel=\"noopener\">BrowserSync官方网站</a><br>也可以通过npm全局安装<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g browser-sync</span><br></pre></td></tr></table></figure></p>\n<p>随后进入项目根目录下<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">browser-sync start --files &quot;*.*&quot;</span><br><span class=\"line\">// 意思为监听当前目录下所有改动</span><br></pre></td></tr></table></figure></p>\n<p>终端中若显示如下，则启动成功：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xoxxe.com1.z0.glb.clouddn.com/bs.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>终端中显示默认访问地址：<code>http://localhost:3001</code> 则可直接进入到控制台界面。<br>之后和weinre类似，也是添加一段js在自己的项目底下。<br>BrowserSync还可以和gulp以及webpack搭配使用，详细的可以看官方文档。</p>\n<h1 id=\"真机测试\"><a href=\"#真机测试\" class=\"headerlink\" title=\"真机测试\"></a>真机测试</h1><p>真机测试是一概而论的说法。由于像ios系统本身就提供了一些对前端十分友好的开发者工具。<br>例如，Safari浏览器自带的开发者工具，或则xcode也有测试的方法，这里我局限性比较高，有这方面条件的是可以去搜罗一下相关的方法。<br>再者，PhoneGap也是有调试工具的，只不过需要安装它测试app。<br>这也是一种方法，不过个人还是偏爱Weinre或则BrowserSync的测试工具。</p>\n<p>以上。是我整理的一些移动端测试的方法。欢迎补充~</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在做移动端web开发的时候，头痛遇到移动端调试的问题，虽然现在很多PC浏览器的开发工具都自带移动端调试功能，但是显然和真机测试还是有一定差距，因为移动端不同的设备会出现不同的问题，在PC模拟器上显示正常的换到真机上测试就是会出问题。<br>在这里整理一些常见的移动端调试方法。</p>\n<p><strong>先从一般的页面调试方法开始。</strong></p>\n<h1 id=\"console方式\"><a href=\"#console方式\" class=\"headerlink\" title=\"console方式\"></a>console方式</h1><p>这个是最常见的一种调试方法，通过console在浏览器控制台打印出每步所需的回调数据。<br>详细可以参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Console\" target=\"_blank\" rel=\"noopener\">Web API接口</a></p>\n<h1 id=\"浏览器自带的移动端模拟器调试\"><a href=\"#浏览器自带的移动端模拟器调试\" class=\"headerlink\" title=\"浏览器自带的移动端模拟器调试\"></a>浏览器自带的移动端模拟器调试</h1><p>这个现在也比较常见了。最常用的是chrome的模拟器，当然现在流行的浏览器基本上都有开发者的模式，也都携有移动端的模拟器。比如火狐浏览器、360浏览器等。<br>基本上浏览器开启开发者模式的方法都统一了，在windows环境下按<code>F12</code>进入开发者攻击界面，mac环境则是下按<code>option+command+i</code>。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20161229151926.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h1 id=\"UC浏览器测试\"><a href=\"#UC浏览器测试\" class=\"headerlink\" title=\"UC浏览器测试\"></a>UC浏览器测试</h1><p>UC浏览器提供了开发版方便开发者们连接测试。详见：<a href=\"http://plus.uc.cn/document/webapp/doc5.html\" target=\"_blank\" rel=\"noopener\">UC浏览器开发者版</a></p>\n<h1 id=\"第三方平台在线模拟器调试\"><a href=\"#第三方平台在线模拟器调试\" class=\"headerlink\" title=\"第三方平台在线模拟器调试\"></a>第三方平台在线模拟器调试</h1><p>第三方开发的平台比较方便，功能也相当强大，对于一些需要完善测试的，其实使用第三方的平台还是比较方便的。<br>这里我就推荐几个比较有名的第三方平台：</p>\n<ul>\n<li><a href=\"https://www.browserstack.com/\" target=\"_blank\" rel=\"noopener\">BrowserStack</a></li>\n<li><a href=\"http://www.keynote.com/\" target=\"_blank\" rel=\"noopener\">Keynote</a></li>\n<li><a href=\"http://browsershots.org/\" target=\"_blank\" rel=\"noopener\">BrowserShots</a></li>\n<li><a href=\"http://www.browsera.com/\" target=\"_blank\" rel=\"noopener\">Browsera</a></li>\n<li><a href=\"http://www.vanamco.com/ghostlab/\" target=\"_blank\" rel=\"noopener\">Ghostlab</a><br>等等…</li>\n</ul>\n<p><strong>下面介绍一些我比较喜欢的一些远程调试工具。</strong></p>\n<h1 id=\"Weinre\"><a href=\"#Weinre\" class=\"headerlink\" title=\"Weinre\"></a>Weinre</h1><p>之前微信开发工具中的远程调试也是基于这个开发的。<br>安装方法很简单快捷。<br>安装 Weinre：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g weinre</span><br></pre></td></tr></table></figure></p>\n<p>安装完成之后，输入指令启动：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">weinre --httpPort 8081 --boundHost -all-</span><br></pre></td></tr></table></figure></p>\n<p>显示如下则启动成功。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20161229154152.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>此时我们访问地址：<code>http://localhost:8081/</code> 会显示下图：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20161229154809.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>在页面中也有提供几种方案，在你的项目中添加对应的js。例如：<code>&lt;script src=&quot;http://192.168.55.23:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;</code><br>随后便可以通过PC访问<code>http://192.168.55.23:8081/client/#anonymous</code>就可以看到手机上访问的项目页面了。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20161229160034.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h1 id=\"代理应用\"><a href=\"#代理应用\" class=\"headerlink\" title=\"代理应用\"></a>代理应用</h1><p>这类代理应用实际上是用于抓包的，但是比起Weinre是基于开发者自身开发测试的。如果我们想要去获取其他网站的一些资源，例如http请求，或则一些js源码等。这时候使用代理工具比较合适。<br>mac下常使用的是<a href=\"https://www.charlesproxy.com/\" target=\"_blank\" rel=\"noopener\">Charles</a>,windows环境下可以用<a href=\"http://www.telerik.com/fiddler\" target=\"_blank\" rel=\"noopener\">Fiddler</a><br>默认开启的是8888端口。在手机上设置一个网络代理即可，这个不多详细介绍了。</p>\n<h1 id=\"BrowserSync\"><a href=\"#BrowserSync\" class=\"headerlink\" title=\"BrowserSync\"></a><a href=\"https://browsersync.io/\" target=\"_blank\" rel=\"noopener\">BrowserSync</a></h1><p>这是一个很强大的多终端测试工具，它可以跨设备同步操作行为，还可以监听你的文件，在文件修改时自动刷新所有设备中页面。<br><a href=\"https://browsersync.io/\" target=\"_blank\" rel=\"noopener\">BrowserSync官方网站</a><br>也可以通过npm全局安装<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g browser-sync</span><br></pre></td></tr></table></figure></p>\n<p>随后进入项目根目录下<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">browser-sync start --files &quot;*.*&quot;</span><br><span class=\"line\">// 意思为监听当前目录下所有改动</span><br></pre></td></tr></table></figure></p>\n<p>终端中若显示如下，则启动成功：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xoxxe.com1.z0.glb.clouddn.com/bs.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>终端中显示默认访问地址：<code>http://localhost:3001</code> 则可直接进入到控制台界面。<br>之后和weinre类似，也是添加一段js在自己的项目底下。<br>BrowserSync还可以和gulp以及webpack搭配使用，详细的可以看官方文档。</p>\n<h1 id=\"真机测试\"><a href=\"#真机测试\" class=\"headerlink\" title=\"真机测试\"></a>真机测试</h1><p>真机测试是一概而论的说法。由于像ios系统本身就提供了一些对前端十分友好的开发者工具。<br>例如，Safari浏览器自带的开发者工具，或则xcode也有测试的方法，这里我局限性比较高，有这方面条件的是可以去搜罗一下相关的方法。<br>再者，PhoneGap也是有调试工具的，只不过需要安装它测试app。<br>这也是一种方法，不过个人还是偏爱Weinre或则BrowserSync的测试工具。</p>\n<p>以上。是我整理的一些移动端测试的方法。欢迎补充~</p>\n"},{"title":"UMD兼容多种模块规范","date":"2016-12-08T04:13:38.000Z","_content":"\n我们通常需要将类库代码包装在一个闭包内，为了能兼容Node、AMD、CMD以及一些常见的浏览器环境中，我们可以使用如下的方法去包装。\n```\n;(function (name, definition) {\n\n// 检测上下文环境是否为AMD或CMD\nif (typeof define === \"function\" && ( define.amd || define.cmd ) ) {\n\n\tdefine(definition);\n\n// 检测上下文环境是否为Node\n} else if ( typeof module !== 'undefined' && module.exports ) {\n\n\tmodule.exports = definition();\n\n} else {\n\t// 将模块的执行结果在window变量中，在浏览器中this指向window对象\n\tthis[name] = definition();\n}\n})('hello', function () {\n\tvar hello = function () {};\n\treturn hello;\n});\n```","source":"_posts/UMD兼容多种模块规范.md","raw":"---\ntitle: UMD兼容多种模块规范\ndate: 2016-12-08 12:13:38\ntags: [javascript]\ncategories: [javascript]\n---\n\n我们通常需要将类库代码包装在一个闭包内，为了能兼容Node、AMD、CMD以及一些常见的浏览器环境中，我们可以使用如下的方法去包装。\n```\n;(function (name, definition) {\n\n// 检测上下文环境是否为AMD或CMD\nif (typeof define === \"function\" && ( define.amd || define.cmd ) ) {\n\n\tdefine(definition);\n\n// 检测上下文环境是否为Node\n} else if ( typeof module !== 'undefined' && module.exports ) {\n\n\tmodule.exports = definition();\n\n} else {\n\t// 将模块的执行结果在window变量中，在浏览器中this指向window对象\n\tthis[name] = definition();\n}\n})('hello', function () {\n\tvar hello = function () {};\n\treturn hello;\n});\n```","slug":"UMD兼容多种模块规范","published":1,"updated":"2018-08-29T06:40:44.538Z","_id":"cjlerugz1002tq3v3yzcwwhvw","comments":1,"layout":"post","photos":[],"link":"","content":"<p>我们通常需要将类库代码包装在一个闭包内，为了能兼容Node、AMD、CMD以及一些常见的浏览器环境中，我们可以使用如下的方法去包装。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">;(function (name, definition) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">// 检测上下文环境是否为AMD或CMD</span><br><span class=\"line\">if (typeof define === &quot;function&quot; &amp;&amp; ( define.amd || define.cmd ) ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdefine(definition);</span><br><span class=\"line\"></span><br><span class=\"line\">// 检测上下文环境是否为Node</span><br><span class=\"line\">&#125; else if ( typeof module !== &apos;undefined&apos; &amp;&amp; module.exports ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmodule.exports = definition();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">\t// 将模块的执行结果在window变量中，在浏览器中this指向window对象</span><br><span class=\"line\">\tthis[name] = definition();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)(&apos;hello&apos;, function () &#123;</span><br><span class=\"line\">\tvar hello = function () &#123;&#125;;</span><br><span class=\"line\">\treturn hello;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>我们通常需要将类库代码包装在一个闭包内，为了能兼容Node、AMD、CMD以及一些常见的浏览器环境中，我们可以使用如下的方法去包装。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">;(function (name, definition) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">// 检测上下文环境是否为AMD或CMD</span><br><span class=\"line\">if (typeof define === &quot;function&quot; &amp;&amp; ( define.amd || define.cmd ) ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdefine(definition);</span><br><span class=\"line\"></span><br><span class=\"line\">// 检测上下文环境是否为Node</span><br><span class=\"line\">&#125; else if ( typeof module !== &apos;undefined&apos; &amp;&amp; module.exports ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmodule.exports = definition();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">\t// 将模块的执行结果在window变量中，在浏览器中this指向window对象</span><br><span class=\"line\">\tthis[name] = definition();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)(&apos;hello&apos;, function () &#123;</span><br><span class=\"line\">\tvar hello = function () &#123;&#125;;</span><br><span class=\"line\">\treturn hello;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n"},{"title":"谈谈Virtual DOM","date":"2018-08-29T10:45:03.000Z","_content":"Virtual DOM 最开始知道这个词是通过React得知的，而vdom的诞生也是为了提升页面渲染性能，因为通常我们要将数据的变化实时反应到UI上，会对DOM进行操作，如果遇到复杂繁琐的操作，那么普通的DOM操作就显得格外沉重。\n我们先回忆一下早期的一些做法。\n（[灵感来源地](https://www.jianshu.com/p/bef1c1ee5a0e) 图片来源此）\n\n## 页面DOM操作\n早期，嗯，应该是很久远的事情了，那时候，web页面还基本是静态的，内容没有太多变化，然后服务端接手做数据渲染，那时候一旦有个数据变化，最常见的就是整个页面都刷新，这是因为重新请求页面，基于新的数据渲染出新的页面。\n![](/images/37341-849962bd459dd09f.webp)\n这样的做法肯定是无法满足产品大大们的需求，当我们更多的关注用户体验时，我们不可能在采用页面刷新的方法去做处理了，然后我们就开始直接操作页面DOM，这时候jq帮了我们大忙，","source":"_posts/谈谈Virtual-DOM.md","raw":"---\ntitle: 谈谈Virtual DOM\ndate: 2018-08-29 18:45:03\ntags: [vue]\ncategories: [vue]\n---\nVirtual DOM 最开始知道这个词是通过React得知的，而vdom的诞生也是为了提升页面渲染性能，因为通常我们要将数据的变化实时反应到UI上，会对DOM进行操作，如果遇到复杂繁琐的操作，那么普通的DOM操作就显得格外沉重。\n我们先回忆一下早期的一些做法。\n（[灵感来源地](https://www.jianshu.com/p/bef1c1ee5a0e) 图片来源此）\n\n## 页面DOM操作\n早期，嗯，应该是很久远的事情了，那时候，web页面还基本是静态的，内容没有太多变化，然后服务端接手做数据渲染，那时候一旦有个数据变化，最常见的就是整个页面都刷新，这是因为重新请求页面，基于新的数据渲染出新的页面。\n![](/images/37341-849962bd459dd09f.webp)\n这样的做法肯定是无法满足产品大大们的需求，当我们更多的关注用户体验时，我们不可能在采用页面刷新的方法去做处理了，然后我们就开始直接操作页面DOM，这时候jq帮了我们大忙，","slug":"谈谈Virtual-DOM","published":1,"updated":"2018-08-29T12:18:44.950Z","_id":"cjlf0koam00046pv3t1epdf4t","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Virtual DOM 最开始知道这个词是通过React得知的，而vdom的诞生也是为了提升页面渲染性能，因为通常我们要将数据的变化实时反应到UI上，会对DOM进行操作，如果遇到复杂繁琐的操作，那么普通的DOM操作就显得格外沉重。<br>我们先回忆一下早期的一些做法。<br>（<a href=\"https://www.jianshu.com/p/bef1c1ee5a0e\" target=\"_blank\" rel=\"noopener\">灵感来源地</a> 图片来源此）</p>\n<h2 id=\"页面DOM操作\"><a href=\"#页面DOM操作\" class=\"headerlink\" title=\"页面DOM操作\"></a>页面DOM操作</h2><p>早期，嗯，应该是很久远的事情了，那时候，web页面还基本是静态的，内容没有太多变化，然后服务端接手做数据渲染，那时候一旦有个数据变化，最常见的就是整个页面都刷新，这是因为重新请求页面，基于新的数据渲染出新的页面。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/37341-849962bd459dd09f.webp\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>这样的做法肯定是无法满足产品大大们的需求，当我们更多的关注用户体验时，我们不可能在采用页面刷新的方法去做处理了，然后我们就开始直接操作页面DOM，这时候jq帮了我们大忙，</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Virtual DOM 最开始知道这个词是通过React得知的，而vdom的诞生也是为了提升页面渲染性能，因为通常我们要将数据的变化实时反应到UI上，会对DOM进行操作，如果遇到复杂繁琐的操作，那么普通的DOM操作就显得格外沉重。<br>我们先回忆一下早期的一些做法。<br>（<a href=\"https://www.jianshu.com/p/bef1c1ee5a0e\" target=\"_blank\" rel=\"noopener\">灵感来源地</a> 图片来源此）</p>\n<h2 id=\"页面DOM操作\"><a href=\"#页面DOM操作\" class=\"headerlink\" title=\"页面DOM操作\"></a>页面DOM操作</h2><p>早期，嗯，应该是很久远的事情了，那时候，web页面还基本是静态的，内容没有太多变化，然后服务端接手做数据渲染，那时候一旦有个数据变化，最常见的就是整个页面都刷新，这是因为重新请求页面，基于新的数据渲染出新的页面。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/37341-849962bd459dd09f.webp\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>这样的做法肯定是无法满足产品大大们的需求，当我们更多的关注用户体验时，我们不可能在采用页面刷新的方法去做处理了，然后我们就开始直接操作页面DOM，这时候jq帮了我们大忙，</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjleqs1nn0002q3v3ppa6bnmz","category_id":"cjleqs1nq0004q3v3a5m1lf63","_id":"cjleqs1o0000eq3v3ypljdk1x"},{"post_id":"cjleqs1np0003q3v3dsjq3htn","category_id":"cjleqs1nw0009q3v3m8gj4ypd","_id":"cjleqs1o4000kq3v3ykocbm10"},{"post_id":"cjleqs1ns0006q3v30lm51nhr","category_id":"cjleqs1o0000fq3v33atx0o52","_id":"cjleqs1o7000qq3v3h6c02llg"},{"post_id":"cjleqs1nu0007q3v323gy6c35","category_id":"cjleqs1o4000lq3v3pz1paxdk","_id":"cjleqs1oc000xq3v3cgxx4bzt"},{"post_id":"cjleqs1o6000pq3v3rgn3q4sk","category_id":"cjleqs1o0000fq3v33atx0o52","_id":"cjleqs1od0010q3v3t92nzacy"},{"post_id":"cjleqs1nv0008q3v3py5i54ja","category_id":"cjleqs1o4000lq3v3pz1paxdk","_id":"cjleqs1oe0012q3v3s46wsgyt"},{"post_id":"cjleqs1nz000dq3v3m6qf8fgs","category_id":"cjleqs1oc000wq3v37vmraerl","_id":"cjleqs1ok001aq3v3n8cigdbo"},{"post_id":"cjleqs1oe0013q3v31otgt5ov","category_id":"cjleqs1oc000wq3v37vmraerl","_id":"cjleqs1ol001dq3v31epyx1a8"},{"post_id":"cjleqs1oh0017q3v37r0qiyne","category_id":"cjleqs1oc000wq3v37vmraerl","_id":"cjleqs1om001fq3v3hwhpj9wo"},{"post_id":"cjleqs1o0000hq3v3z0u5d6zy","category_id":"cjleqs1og0014q3v32k4sasnc","_id":"cjleqs1on001iq3v34s2au0i6"},{"post_id":"cjleqs1oj0019q3v38ds37d5t","category_id":"cjleqs1oc000wq3v37vmraerl","_id":"cjleqs1oo001jq3v3vmagd47i"},{"post_id":"cjleqs1o3000jq3v3g4p2nuvq","category_id":"cjleqs1ok001bq3v3ic6o1dbz","_id":"cjleqs1op001mq3v3qwn9dpk9"},{"post_id":"cjleqs1o4000nq3v3ywt16cxt","category_id":"cjleqs1og0014q3v32k4sasnc","_id":"cjleqs1op001qq3v3pjvhh1x4"},{"post_id":"cjleqs1o7000tq3v3ekdh0dl3","category_id":"cjleqs1og0014q3v32k4sasnc","_id":"cjleqs1or001tq3v3no70jq6z"},{"post_id":"cjleqs1oc000zq3v3frvqngg4","category_id":"cjleqs1oq001sq3v3to0se4kv","_id":"cjleqs1os001yq3v351xi3keg"},{"post_id":"cjlerugz1002tq3v3yzcwwhvw","category_id":"cjleqs1og0014q3v32k4sasnc","_id":"cjlerugz2002vq3v3t6pa7jpt"},{"post_id":"cjleqs1nx000cq3v311zcp8ni","category_id":"cjleqs1og0014q3v32k4sasnc","_id":"cjlez256000016pv39yf7i3xg"},{"post_id":"cjleqs1nh0000q3v39i0qomw5","category_id":"cjleqs1nq0004q3v3a5m1lf63","_id":"cjlez2nlr00036pv3qolnunkn"},{"post_id":"cjlf0koam00046pv3t1epdf4t","category_id":"cjleqs1nq0004q3v3a5m1lf63","_id":"cjlf0le8x00066pv3bqome3h8"}],"PostTag":[{"post_id":"cjleqs1nn0002q3v3ppa6bnmz","tag_id":"cjleqs1ns0005q3v3amp5h8aj","_id":"cjleqs1nx000bq3v3ms6f52ou"},{"post_id":"cjleqs1np0003q3v3dsjq3htn","tag_id":"cjleqs1nw000aq3v3custk65f","_id":"cjleqs1o2000iq3v36jvh6sfv"},{"post_id":"cjleqs1ns0006q3v30lm51nhr","tag_id":"cjleqs1o0000gq3v323dl8gwt","_id":"cjleqs1o6000oq3v3112x7iyz"},{"post_id":"cjleqs1nu0007q3v323gy6c35","tag_id":"cjleqs1o4000mq3v3prwksia7","_id":"cjleqs1oa000uq3v3hadv8d10"},{"post_id":"cjleqs1nv0008q3v3py5i54ja","tag_id":"cjleqs1o4000mq3v3prwksia7","_id":"cjleqs1og0016q3v3ddg0dreu"},{"post_id":"cjleqs1nv0008q3v3py5i54ja","tag_id":"cjleqs1oc000yq3v32xo11o7n","_id":"cjleqs1oj0018q3v3uhhpp9oz"},{"post_id":"cjleqs1nx000cq3v311zcp8ni","tag_id":"cjleqs1og0015q3v3ad67a998","_id":"cjleqs1om001eq3v385koads6"},{"post_id":"cjleqs1nz000dq3v3m6qf8fgs","tag_id":"cjleqs1oc000yq3v32xo11o7n","_id":"cjleqs1op001nq3v3e3v7xmwj"},{"post_id":"cjleqs1nz000dq3v3m6qf8fgs","tag_id":"cjleqs1om001gq3v380ilff9o","_id":"cjleqs1op001oq3v3ekhim8z0"},{"post_id":"cjleqs1o0000hq3v3z0u5d6zy","tag_id":"cjleqs1oo001lq3v3janyr9ra","_id":"cjleqs1os001xq3v3duoczhkw"},{"post_id":"cjleqs1o0000hq3v3z0u5d6zy","tag_id":"cjleqs1oq001rq3v3xhfplus5","_id":"cjleqs1os001zq3v32l8y68mx"},{"post_id":"cjleqs1o0000hq3v3z0u5d6zy","tag_id":"cjleqs1og0015q3v3ad67a998","_id":"cjleqs1ot0021q3v32s88m40e"},{"post_id":"cjleqs1o3000jq3v3g4p2nuvq","tag_id":"cjleqs1or001wq3v3rxfwx0vo","_id":"cjleqs1ot0022q3v37riejfm9"},{"post_id":"cjleqs1o4000nq3v3ywt16cxt","tag_id":"cjleqs1oo001lq3v3janyr9ra","_id":"cjleqs1ou0025q3v3wu8vjcca"},{"post_id":"cjleqs1o4000nq3v3ywt16cxt","tag_id":"cjleqs1og0015q3v3ad67a998","_id":"cjleqs1ou0026q3v3ubdy9zr5"},{"post_id":"cjleqs1o6000pq3v3rgn3q4sk","tag_id":"cjleqs1o0000gq3v323dl8gwt","_id":"cjleqs1ov0029q3v38h5b1qh1"},{"post_id":"cjleqs1o6000pq3v3rgn3q4sk","tag_id":"cjleqs1ot0024q3v341qg9u4u","_id":"cjleqs1ov002aq3v3arlpp7x9"},{"post_id":"cjleqs1o6000pq3v3rgn3q4sk","tag_id":"cjleqs1ou0027q3v3gb1hjerw","_id":"cjleqs1ov002cq3v3xp17s3mr"},{"post_id":"cjleqs1o7000tq3v3ekdh0dl3","tag_id":"cjleqs1og0015q3v3ad67a998","_id":"cjleqs1ov002dq3v3bvr8xwa7"},{"post_id":"cjleqs1oc000zq3v3frvqngg4","tag_id":"cjleqs1ow002eq3v3piw02vmn","_id":"cjleqs1ox002hq3v3xi0zxpa1"},{"post_id":"cjleqs1oe0013q3v31otgt5ov","tag_id":"cjleqs1oc000yq3v32xo11o7n","_id":"cjleqs1ox002jq3v39a398pzl"},{"post_id":"cjleqs1oe0013q3v31otgt5ov","tag_id":"cjleqs1ow002gq3v399vj3b4p","_id":"cjleqs1ox002kq3v3njfmazd9"},{"post_id":"cjleqs1oh0017q3v37r0qiyne","tag_id":"cjleqs1ow002gq3v399vj3b4p","_id":"cjleqs1oy002mq3v3grhftclg"},{"post_id":"cjleqs1oh0017q3v37r0qiyne","tag_id":"cjleqs1oc000yq3v32xo11o7n","_id":"cjleqs1oy002nq3v3cwxctyps"},{"post_id":"cjleqs1oj0019q3v38ds37d5t","tag_id":"cjleqs1oc000yq3v32xo11o7n","_id":"cjleqs1oy002oq3v33c78lytu"},{"post_id":"cjleqs1oj0019q3v38ds37d5t","tag_id":"cjleqs1oo001lq3v3janyr9ra","_id":"cjleqs1oy002pq3v30bpn6k21"},{"post_id":"cjleqs1nh0000q3v39i0qomw5","tag_id":"cjleqs1ns0005q3v3amp5h8aj","_id":"cjleqsy51002sq3v31qc4h7wm"},{"post_id":"cjlerugz1002tq3v3yzcwwhvw","tag_id":"cjleqs1og0015q3v3ad67a998","_id":"cjlerugz2002uq3v3zevad2mt"},{"post_id":"cjleqs1nx000cq3v311zcp8ni","tag_id":"cjlez256000006pv31v01l6mb","_id":"cjlez256100026pv3g1agmpfc"},{"post_id":"cjlf0koam00046pv3t1epdf4t","tag_id":"cjleqs1ns0005q3v3amp5h8aj","_id":"cjlf0le8x00056pv36s8db6gr"}],"Tag":[{"name":"vue","_id":"cjleqs1ns0005q3v3amp5h8aj"},{"name":"css","_id":"cjleqs1nw000aq3v3custk65f"},{"name":"mywork","_id":"cjleqs1o0000gq3v323dl8gwt"},{"name":"mongodb","_id":"cjleqs1o4000mq3v3prwksia7"},{"name":"环境搭建","_id":"cjleqs1oc000yq3v32xo11o7n"},{"name":"javascript","_id":"cjleqs1og0015q3v3ad67a998"},{"name":"linux","_id":"cjleqs1om001gq3v380ilff9o"},{"name":"web移动端","_id":"cjleqs1oo001lq3v3janyr9ra"},{"name":"缓存","_id":"cjleqs1oq001rq3v3xhfplus5"},{"name":"threejs","_id":"cjleqs1or001wq3v3rxfwx0vo"},{"name":"canvas","_id":"cjleqs1ot0024q3v341qg9u4u"},{"name":"h5game","_id":"cjleqs1ou0027q3v3gb1hjerw"},{"name":"nodejs","_id":"cjleqs1ow002eq3v3piw02vmn"},{"name":"ruby","_id":"cjleqs1ow002gq3v399vj3b4p"},{"name":"模块化","_id":"cjlez256000006pv31v01l6mb"}]}}