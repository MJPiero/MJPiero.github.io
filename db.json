{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/QQ截图20160413163537.png","path":"images/QQ截图20160413163537.png","modified":1,"renderable":0},{"_id":"source/images/QQ截图20160413165101.png","path":"images/QQ截图20160413165101.png","modified":1,"renderable":0},{"_id":"source/images/QQ截图20160413165633.png","path":"images/QQ截图20160413165633.png","modified":1,"renderable":0},{"_id":"source/images/QQ截图20161021165145.png","path":"images/QQ截图20161021165145.png","modified":1,"renderable":0},{"_id":"source/images/QQ截图20160708183414.png","path":"images/QQ截图20160708183414.png","modified":1,"renderable":0},{"_id":"source/images/QQ截图20161229154152.png","path":"images/QQ截图20161229154152.png","modified":1,"renderable":0},{"_id":"source/images/QQ截图20161229154809.png","path":"images/QQ截图20161229154809.png","modified":1,"renderable":0},{"_id":"source/images/QQ截图20161229160034.png","path":"images/QQ截图20161229160034.png","modified":1,"renderable":0},{"_id":"source/images/QQ截图20161027161847.png","path":"images/QQ截图20161027161847.png","modified":1,"renderable":0},{"_id":"source/images/QQ截图20161228122836.png","path":"images/QQ截图20161228122836.png","modified":1,"renderable":0},{"_id":"source/images/QQ截图20160413155659.png","path":"images/QQ截图20160413155659.png","modified":1,"renderable":0},{"_id":"source/images/QQ截图20161027164200.jpg","path":"images/QQ截图20161027164200.jpg","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/indigo_card/source/css/style.less","path":"css/style.less","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/img/cc.png","path":"img/cc.png","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/img/alipay.jpg","path":"img/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/img/wechat.jpg","path":"img/wechat.jpg","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/img/brand.jpg","path":"img/brand.jpg","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/img/logo.jpg","path":"img/logo.jpg","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"source/images/QQ截图20161229151926.png","path":"images/QQ截图20161229151926.png","modified":1,"renderable":0},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/indigo_card/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/images/808279392447213144-576x1024.jpg","path":"images/808279392447213144-576x1024.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"7548adc9068517aa422418eaa2dbe99216f2422c","modified":1534858924383},{"_id":"themes/indigo_card/README.md","hash":"a91710ebddfcbeee28ebdccbdd2688ddff8f1560","modified":1477486604000},{"_id":"themes/indigo_card/_config.yml","hash":"4d3ec99840748b46fe2dc4a4046407ffc8271bf3","modified":1489372116000},{"_id":"themes/indigo_card/package.json","hash":"076ef0d0b75b14add11877f1085e73e03a0e23a8","modified":1477486604000},{"_id":"source/_drafts/初了解vue-vuex-这很接地气.md","hash":"be61551d41f80e90c9d33e90a7e32bfeb03ac728","modified":1534996687422},{"_id":"source/_posts/mac-使用tree命令.md","hash":"eb435a7bf309aa0c328e79c89f942e63c2ebd564","modified":1534996810872},{"_id":"source/_posts/Materialize-UI-风格-WIKI-模板页.md","hash":"b5072daa6b1e34589623d64bd98bce7771a426b9","modified":1477476812000},{"_id":"source/_posts/MongoDB如何开启认证权限功能.md","hash":"c6fc468f28b37197b620ab1d2d3147a27002095a","modified":1482906260000},{"_id":"source/_posts/MongoDB添加到window服务，随服务自启动.md","hash":"055b68c1bfc712f8f130901d06f1778bdc70b1a9","modified":1489371686000},{"_id":"source/_posts/【Web移动端】web移动端调试大法.md","hash":"8cd455f3529a2e6c46336ad1cfd21a556d229d65","modified":1484735116000},{"_id":"source/_posts/【Web移动端】web移动端软键盘状态.md","hash":"ea6f4eb5429cb3af8e4b28ff2910c53f03c3624a","modified":1484736426000},{"_id":"source/_posts/【接粽子】小游戏-Made-With-CreateJs.md","hash":"a38350a6edead98f0efa9bd3b558d89d10eaaad7","modified":1477476836000},{"_id":"source/_posts/兼容多种模块规范.md","hash":"eee193772373b0bce2103947f3c77b07e4fcbaf6","modified":1517741862000},{"_id":"source/_posts/包与NPM.md","hash":"3b17067a944a6ff95dfefbf204559e0de6dd3fc6","modified":1481170060000},{"_id":"source/_posts/开启新世界的大门！-灬ºωº灬.md","hash":"803f8e57376a362bc2349f3910ca59481730ce53","modified":1477032176000},{"_id":"source/_posts/解决gem-install-SSL-证书错误.md","hash":"26408ece8c4557f7e44785d9e1292ed0b2d869b0","modified":1481164828000},{"_id":"source/_posts/解决国内Ruby-Gem-Install-失败问题.md","hash":"88f7096c0e52942579a0229039d5273e5da9d3e7","modified":1481164814000},{"_id":"source/tags/index.md","hash":"e6f9827430022582d655f94a083f2c5488de88ac","modified":1477555730000},{"_id":"source/categories/index.md","hash":"73883c5ec527229483f10ae8edf84761c66db414","modified":1477555804000},{"_id":"source/friends/index.md","hash":"9e33bbbe3d59497ebaf1f0962a8ad393a10ef362","modified":1477555828000},{"_id":"source/images/QQ截图20160413163537.png","hash":"3e8658757fb9c787486cad9ce09dd9154b833882","modified":1477039294000},{"_id":"source/images/QQ截图20160413165101.png","hash":"fe19d2e29ae859668e49730de905c95b90e0ebcc","modified":1477039538000},{"_id":"source/images/QQ截图20160413165633.png","hash":"8b77ececb43abf120469e15a3d899527e15d05dd","modified":1477039606000},{"_id":"source/images/QQ截图20161021165145.png","hash":"8eb1f673410159fb04f21fe0e4bb93c9b5b16e26","modified":1477039920000},{"_id":"source/images/QQ截图20160708183414.png","hash":"dee6d07b0d2b58b17629bdf01ef32981b8d78937","modified":1477045100000},{"_id":"source/images/QQ截图20161229154152.png","hash":"74fe29ea0835488cea2d5b94b887da31aa44925b","modified":1482997316000},{"_id":"source/images/QQ截图20161229154809.png","hash":"0c3b9bb7f84421bfa6ec55c2e73dfdd32b8ccf2b","modified":1482997692000},{"_id":"source/images/QQ截图20161229160034.png","hash":"f73a6273910ca46d7526c93cb429d7767f678ae9","modified":1482998438000},{"_id":"themes/indigo_card/.git/HEAD","hash":"da237e0de55301608e7c572e119ab5c4e43c0e85","modified":1477486604000},{"_id":"themes/indigo_card/.git/config","hash":"10bc2a37a8fb3284cc9a5f394aaafbad0c1cd36b","modified":1477486604000},{"_id":"themes/indigo_card/.git/index","hash":"43f5af1e0193070962653324262a463868e77f98","modified":1534858655976},{"_id":"themes/indigo_card/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1477486594000},{"_id":"themes/indigo_card/.git/packed-refs","hash":"d95a5a48310fef462eb3b038e71789a29c53e1b1","modified":1477486604000},{"_id":"themes/indigo_card/layout/archive.ejs","hash":"efe67a14cb974c66af5c20eec1f2b62dcd95a953","modified":1477486604000},{"_id":"themes/indigo_card/layout/categories.ejs","hash":"bbf2f9e187e46110957b549298e0d783f3ea8196","modified":1477486604000},{"_id":"themes/indigo_card/layout/category.ejs","hash":"0baad4f84ce4f53653d14e6cc6d62f4e5504ec6d","modified":1477486604000},{"_id":"themes/indigo_card/layout/index.ejs","hash":"b63122a1f2d4e4f1091bfa0c625cb6e6f34b74d8","modified":1477486604000},{"_id":"themes/indigo_card/layout/layout.ejs","hash":"c76a867cbcb7c30dcfeee113d54369f1500cd7f7","modified":1477486604000},{"_id":"themes/indigo_card/layout/friends.ejs","hash":"8535248fd2da3d17a1a03ca50e628432f09711fa","modified":1477560238000},{"_id":"themes/indigo_card/layout/post.ejs","hash":"c56db89a03a152e9ae63eea3b9034bbeb8b676a3","modified":1477486604000},{"_id":"themes/indigo_card/layout/tag.ejs","hash":"38f04bf938b281bcd9f44a77e193c6874e52f540","modified":1477486604000},{"_id":"themes/indigo_card/layout/tags.ejs","hash":"610f8bba91a4adc57a2ee4a63ff16db9c067e547","modified":1477486604000},{"_id":"themes/indigo_card/layout/page.ejs","hash":"13af5d305dcdd633e2215ec560859143dcc89765","modified":1477486604000},{"_id":"themes/indigo_card/screenshots/hexo-theme-search.png","hash":"ffa0b5e1ed0f4eea7a1e57f6779c78052df03b5c","modified":1477486604000},{"_id":"source/images/QQ截图20161027161847.png","hash":"29e5fff96d27d9607654db9a9dbac6dfc8c52f53","modified":1477557736000},{"_id":"source/images/QQ截图20161228122836.png","hash":"9f64fce516c7c1815881f3cfb2a056e94e8f505f","modified":1482899320000},{"_id":"themes/indigo_card/screenshots/hexo-theme-pad.png","hash":"08e41f140682fbd9a78999de79823ed59b1d2232","modified":1477486604000},{"_id":"themes/indigo_card/screenshots/hexo-theme-phone.png","hash":"1404b4fd664a8a552eed8ab46c0fb3b281c4f007","modified":1477486604000},{"_id":"source/images/QQ截图20160413155659.png","hash":"8551bf93e86587928f042d5c85cbfb8a321d3674","modified":1477034350000},{"_id":"source/images/QQ截图20161027164200.jpg","hash":"348885b7daa77dc4d957846d7f22ac3590473e80","modified":1482904156000},{"_id":"themes/indigo_card/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1477486594000},{"_id":"themes/indigo_card/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1477486594000},{"_id":"themes/indigo_card/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1477486594000},{"_id":"themes/indigo_card/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1477486594000},{"_id":"themes/indigo_card/.git/hooks/pre-push.sample","hash":"b4ad74c989616b7395dc6c9fce9871bb1e86dfb5","modified":1477486594000},{"_id":"themes/indigo_card/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1477486594000},{"_id":"themes/indigo_card/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1477486594000},{"_id":"themes/indigo_card/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1477486594000},{"_id":"themes/indigo_card/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1477486594000},{"_id":"themes/indigo_card/.git/logs/HEAD","hash":"52ce744e29a21a09c5d0d6b7f0c68c5d066a954a","modified":1477486604000},{"_id":"themes/indigo_card/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1477486594000},{"_id":"source/favicon.ico","hash":"6b285021d853c29da85b5d9c5faa628016fc9bc1","modified":1477038418000},{"_id":"themes/indigo_card/layout/_partial/after-footer.ejs","hash":"7afdde6be47fed7170444f93bdd62dde72c90fe3","modified":1477486604000},{"_id":"themes/indigo_card/layout/_partial/archive.ejs","hash":"a2d9f3c12e6ef46792d2009844eaf464754d60bd","modified":1477486604000},{"_id":"themes/indigo_card/layout/_partial/cnzz.ejs","hash":"dbee64698919aeaeb0923c44b3f8c5402c7b8fed","modified":1477486604000},{"_id":"themes/indigo_card/layout/_partial/footer.ejs","hash":"337e3004b99aed3dd98a83465fe75bc5ea3e219e","modified":1477486604000},{"_id":"themes/indigo_card/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1477486604000},{"_id":"themes/indigo_card/layout/_partial/head.ejs","hash":"654cfb61eb6779d7d4d2dd5b31330fb251fa273b","modified":1477486604000},{"_id":"themes/indigo_card/layout/_partial/header.ejs","hash":"4ce86504a6731f22113edb0457b3a3867c6afe5b","modified":1477486604000},{"_id":"themes/indigo_card/layout/_partial/index-item.ejs","hash":"a574c9e56a95dbb8f0955f20240786f8425a6e0d","modified":1477486604000},{"_id":"themes/indigo_card/layout/_partial/loading.ejs","hash":"8b3e037dd5f3d4564012689c5cd6f63caf73df0f","modified":1477486604000},{"_id":"themes/indigo_card/layout/_partial/mathjax.ejs","hash":"b82771c359969ddf3b384ab4aacdb1bacbb53377","modified":1477486604000},{"_id":"themes/indigo_card/layout/_partial/paginator.ejs","hash":"13952250463f70d1c1bbbfdd7f4ee8160dd6d99b","modified":1477486604000},{"_id":"themes/indigo_card/layout/_partial/menu.ejs","hash":"986e9f9f97dfce4ce89ecdaa1739bea79d350fc9","modified":1489373312000},{"_id":"themes/indigo_card/layout/_partial/post.ejs","hash":"72b8f693589db968dfb3180d92468d86baf5ea91","modified":1477486604000},{"_id":"themes/indigo_card/layout/_partial/script.ejs","hash":"b97fb6ee93b66a645cbddf8f14e85a03373952d1","modified":1477486604000},{"_id":"themes/indigo_card/layout/_partial/search.ejs","hash":"5b8d9b22a189ea0da4d2b04f409d68408712e36c","modified":1477486604000},{"_id":"themes/indigo_card/layout/_partial/tags-bar.ejs","hash":"ae8056f5e21c159657fbebb139f0c582ef6f9d0d","modified":1477486604000},{"_id":"themes/indigo_card/screenshots/hexo-theme-archive.png","hash":"36fd8e55e6672aa6afbd7f88b68a532c819f4473","modified":1477486604000},{"_id":"themes/indigo_card/source/css/style.less","hash":"385167527ed00d5f3eaeeae6ad3b5807fb6049b7","modified":1477486604000},{"_id":"themes/indigo_card/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1476954604000},{"_id":"themes/indigo_card/screenshots/hexo-theme-pc.png","hash":"5898394b7664bf87ec1422fe7c21e7e76fb37185","modified":1477486604000},{"_id":"themes/indigo_card/source/img/alipay.jpg","hash":"6054d9ed2ca7cd1f645b729e05632134467d4daa","modified":1477486604000},{"_id":"themes/indigo_card/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1476954604000},{"_id":"themes/indigo_card/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1476954604000},{"_id":"themes/indigo_card/source/img/wechat.jpg","hash":"ef069cc9e80c7553fd60589b0727bbbf8c6de372","modified":1477486604000},{"_id":"themes/indigo_card/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1476954604000},{"_id":"themes/indigo_card/source/js/search.js","hash":"7b16dcdd20041944894b5419539e66ead5403c2e","modified":1477486604000},{"_id":"themes/indigo_card/source/img/logo.jpg","hash":"f25dc3a067225bfe33c160b3ef00b28ad93cb66a","modified":1477030040000},{"_id":"themes/indigo_card/source/js/main.js","hash":"4012b8b431e4515c560899160ddf7bc0d4a76783","modified":1481171678000},{"_id":"source/images/QQ截图20161229151926.png","hash":"249f317d407c528cd29e9d95a987e5726fa72420","modified":1482996092000},{"_id":"themes/indigo_card/.git/objects/pack/pack-26ae6bbc050a1958a22b76553c5689554ab07779.idx","hash":"5f4092b38a9f9fb81573cf6468ebdaa6a72d802f","modified":1477486602000},{"_id":"themes/indigo_card/.git/refs/heads/card","hash":"dc11ae483003242d4d52d5cd04d6c8033edbd314","modified":1477486604000},{"_id":"themes/indigo_card/layout/_partial/post/category.ejs","hash":"c08e44cbd7315dec7afb6054b04d3c7b82c3bde8","modified":1477486604000},{"_id":"themes/indigo_card/layout/_partial/post/comment.ejs","hash":"4d25f0bf9d7dba72908a5819f17b9edcd7361d6c","modified":1477486604000},{"_id":"themes/indigo_card/layout/_partial/post/date.ejs","hash":"f9a8a0d99b39eec351c4effb2ad8508c8d2395ab","modified":1477486604000},{"_id":"themes/indigo_card/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1477486604000},{"_id":"themes/indigo_card/layout/_partial/post/head-meta.ejs","hash":"f137c126672769e9571be2bb0a70ea8dda644b0e","modified":1477486604000},{"_id":"themes/indigo_card/layout/_partial/post/nav.ejs","hash":"03719097851575a2c1bb95774058b224f6402a1f","modified":1477486604000},{"_id":"themes/indigo_card/layout/_partial/post/reward.ejs","hash":"e73dc0bb5be57e9b7d44a2e9eedc67a18672158b","modified":1477486604000},{"_id":"themes/indigo_card/layout/_partial/post/share.ejs","hash":"5728be1589a7533b10806982abe7ddb9bce23aa9","modified":1477486604000},{"_id":"themes/indigo_card/layout/_partial/post/tag.ejs","hash":"412894001b1ac6e63012b26b1109a0856651c076","modified":1477486604000},{"_id":"themes/indigo_card/layout/_partial/post/title.ejs","hash":"eaad7af7888bddd7095243a43ff38f55ad8c494a","modified":1477486604000},{"_id":"themes/indigo_card/source/css/_partial/article.less","hash":"c19c0b38384a137b422cbf7b4ce73616d57861d2","modified":1477486604000},{"_id":"themes/indigo_card/source/css/_partial/gotop.less","hash":"bad63006b3bd4849bf53ad38482af0d9971061d3","modified":1477486604000},{"_id":"themes/indigo_card/source/css/_partial/header.less","hash":"a852b8b88fb1af3b8a1b435b6ed676a15ea648fa","modified":1477486604000},{"_id":"themes/indigo_card/source/css/_partial/highlight.less","hash":"070374ccfc8de9c75f7888c9a25a1e9daa006ec8","modified":1477486604000},{"_id":"themes/indigo_card/source/css/_partial/archives.less","hash":"b34fd9b692341ff3c9f683a47ac47562a0f9272f","modified":1477559040000},{"_id":"themes/indigo_card/source/css/_partial/loading.less","hash":"0361039b2abdeb1b41e504fa437df962cda055d2","modified":1477486604000},{"_id":"themes/indigo_card/source/css/_partial/reward.less","hash":"5de05e9c3728c453780cfacf55ef7182e53e58d2","modified":1477486604000},{"_id":"themes/indigo_card/source/css/_partial/roboto.less","hash":"3e457942995da8840e7662fa6cb551a7e12ea294","modified":1477486604000},{"_id":"themes/indigo_card/source/css/_partial/search.less","hash":"01bb8da651c5123ab862660b4fd79235464e31c0","modified":1477486604000},{"_id":"themes/indigo_card/source/css/_partial/share.less","hash":"bd8dbf7bbcef963164b32df62a2ed4ab4ab1046f","modified":1477486604000},{"_id":"themes/indigo_card/source/css/_partial/postlist.less","hash":"b0dca1bbe09d764368fe27821ad756faadcc7461","modified":1477541818000},{"_id":"themes/indigo_card/source/css/_partial/layout.less","hash":"630499e6ecfb3052b58776538210281ac6c2d39d","modified":1477556388000},{"_id":"themes/indigo_card/source/css/_partial/tags.less","hash":"73df00653e78b0a7f5f1c021f8c288a5eb38212c","modified":1477486604000},{"_id":"themes/indigo_card/source/css/_partial/variable.less","hash":"9e23170f3ec1d20e7a0d2420780edd43ffc9f029","modified":1477487392000},{"_id":"themes/indigo_card/source/css/_partial/waves.less","hash":"a8b41b0b0c8ff2f6cf95f7f9784611dd8c212ffe","modified":1477486604000},{"_id":"themes/indigo_card/source/css/_partial/fontawesome.less","hash":"ffafe7c70131ce66d497c23fb455abd9aa367496","modified":1477486604000},{"_id":"themes/indigo_card/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1477486604000},{"_id":"themes/indigo_card/.git/logs/refs/heads/card","hash":"52ce744e29a21a09c5d0d6b7f0c68c5d066a954a","modified":1477486604000},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1477486604000},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1477486604000},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1477486604000},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1477486604000},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1477486604000},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1477486604000},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1477486604000},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1477486604000},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1477486604000},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1477486604000},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1477486604000},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1477486604000},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1477486604000},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1477486604000},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1477486604000},{"_id":"themes/indigo_card/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1477486604000},{"_id":"themes/indigo_card/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1477486604000},{"_id":"themes/indigo_card/source/css/fonts/fontawesome/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1477486604000},{"_id":"themes/indigo_card/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1477486604000},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1477486604000},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1477486604000},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1477486604000},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1477486604000},{"_id":"themes/indigo_card/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1477486604000},{"_id":"themes/indigo_card/.git/logs/refs/remotes/origin/HEAD","hash":"80cd96ad82793ca7d7424dc5ce6d641a6f94614f","modified":1477486604000},{"_id":"themes/indigo_card/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1477486604000},{"_id":"themes/indigo_card/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1477486604000},{"_id":"source/images/808279392447213144-576x1024.jpg","hash":"fd0c18cddaad18679786c005cb4312882f2ee156","modified":1477044464000},{"_id":"themes/indigo_card/.git/objects/pack/pack-26ae6bbc050a1958a22b76553c5689554ab07779.pack","hash":"d795edef12cd010c9b121b53fac0656678809095","modified":1477486602000},{"_id":"public/atom.xml","hash":"10e8402b2b0d51d5d57de7ab20c033547d0294d0","modified":1534997685618},{"_id":"public/content.json","hash":"ff502809d5c554d3c06fbd90bf18bd25057e7502","modified":1534997685774},{"_id":"public/friends/index.html","hash":"8f1436c12e88cb0d25ce4df7024b46651606025e","modified":1534997685804},{"_id":"public/2016/12/08/兼容多种模块规范/index.html","hash":"fd26638081b46bf267f744f1cc2a449ce9bb5534","modified":1534997685819},{"_id":"public/2016/10/21/开启新世界的大门！-灬ºωº灬/index.html","hash":"40b19b46d4667fd1539229868ab98012728ba547","modified":1534997685819},{"_id":"public/archives/page/2/index.html","hash":"f255d30ed3feef17df731f20ee4f3a0d5aec7665","modified":1534997685819},{"_id":"public/archives/2016/10/index.html","hash":"962effbd6664414b04a8725c265d973ba207a8e3","modified":1534997685819},{"_id":"public/archives/2016/12/index.html","hash":"876284f623e0cd9dd0692ef77a99b9fa2fc42a09","modified":1534997685819},{"_id":"public/archives/2017/index.html","hash":"c9d0ec0c61be290c475e3e000c3bd26694572f9f","modified":1534997685819},{"_id":"public/archives/2017/01/index.html","hash":"bfa2afa17918ae9bcebade3d1d6c5eef011b67a5","modified":1534997685820},{"_id":"public/categories/环境搭建/index.html","hash":"c500b127d82f0a2b6e3c9399b2dfc377501f0cf6","modified":1534997685820},{"_id":"public/categories/mywork/index.html","hash":"8e2cd8dc414635195d14e44f00f8434e7f72fb10","modified":1534997685820},{"_id":"public/categories/mongodb/index.html","hash":"9e984f10aae33973165ff81ce8f626f5fb3ce22e","modified":1534997685820},{"_id":"public/categories/Javascript/index.html","hash":"da07e0a27cde1ae413c675b600ecb9d47bd6d012","modified":1534997685820},{"_id":"public/categories/JavaScript/index.html","hash":"9d544d450260de8fa4fb2a78dd95adc8ce1d8b2b","modified":1534997685820},{"_id":"public/categories/nodeJs/index.html","hash":"ae1f50dcb4b9329d82bed203e4f4e477d0b25a92","modified":1534997685820},{"_id":"public/page/2/index.html","hash":"9a7d17d986d4898bf56457c90c31aab706996efe","modified":1534997685820},{"_id":"public/tags/环境搭建/index.html","hash":"d03b57652add23f9b3614acf437142dd1cef2825","modified":1534997685820},{"_id":"public/tags/mywork/index.html","hash":"a864184d2eddfd1c18877c83218927afaa75f8ce","modified":1534997685820},{"_id":"public/tags/mongodb/index.html","hash":"8642ce92259e62fa923a723f81db9c3086b19e79","modified":1534997685820},{"_id":"public/tags/Web移动端/index.html","hash":"208e90c04a3b3c3f4e588f75c20ed52603239c03","modified":1534997685820},{"_id":"public/tags/Javascript/index.html","hash":"703a58819cf10c5d45815bf4c54a367e7b8a6856","modified":1534997685820},{"_id":"public/tags/canvas/index.html","hash":"edcf10d336aa60f15aabfa3f98c964dcc08d7518","modified":1534997685820},{"_id":"public/tags/h5game/index.html","hash":"7b1a2364a4f9ffb7a5ffff0dcfa7328b18aca3da","modified":1534997685820},{"_id":"public/tags/JavaScript/index.html","hash":"d0265bee56d71067be0b7f3301a7d4667b421cac","modified":1534997685820},{"_id":"public/tags/nodeJs/index.html","hash":"afb9ae487a731180f6278c938ad64cb97ff4fcd0","modified":1534997685820},{"_id":"public/tags/Ruby/index.html","hash":"5a3187b206f725ef94362c7ddaaad57285af6e38","modified":1534997685820},{"_id":"public/tags/index.html","hash":"96e2f86b818e13c4d664b14a234157a88be1cdde","modified":1534997685821},{"_id":"public/categories/index.html","hash":"eded34d23d36e72f7cdcf3915d68e5a6dfd6aea8","modified":1534997685821},{"_id":"public/2017/01/18/【Web移动端】web移动端软键盘状态/index.html","hash":"aa7f86fa3019b88a6027b4981d915e70375fb86e","modified":1534997685821},{"_id":"public/2016/12/29/【Web移动端】web移动端调试大法/index.html","hash":"f5efa63e3e33974814d63d8f48dda5806279814c","modified":1534997685821},{"_id":"public/2016/12/28/MongoDB如何开启认证权限功能/index.html","hash":"f0eac9db8e982927994b3b1b6217bb523ceaf78a","modified":1534997685821},{"_id":"public/2016/12/28/MongoDB添加到window服务，随服务自启动/index.html","hash":"b27f4fc53f9be031fb5a579f017a9c23dcbd6029","modified":1534997685821},{"_id":"public/2016/12/08/包与NPM/index.html","hash":"c3681a6a1e44075be32d0f31ebdb000c558ffd38","modified":1534997685821},{"_id":"public/2016/10/21/Materialize-UI-风格-WIKI-模板页/index.html","hash":"91c7fd61c34aec388d0c1d142475603b3f89c5e2","modified":1534997685821},{"_id":"public/2016/10/21/【接粽子】小游戏-Made-With-CreateJs/index.html","hash":"756aa681412414f69a3ba2f019ef9f36858a82c7","modified":1534997685821},{"_id":"public/2016/10/21/解决gem-install-SSL-证书错误/index.html","hash":"265203b48d5f43fefcb159823f3b16e53a474a04","modified":1534997685821},{"_id":"public/2016/10/21/解决国内Ruby-Gem-Install-失败问题/index.html","hash":"7539150a6ede1131becf10b3891df2255f15e384","modified":1534997685821},{"_id":"public/archives/index.html","hash":"e026b4b85e75167ed01057000caed74d08ca6ba4","modified":1534997685821},{"_id":"public/archives/2016/index.html","hash":"2beebe0ba2cce5f2d5b23d76a249daab552609ec","modified":1534997685821},{"_id":"public/index.html","hash":"015b773501d84340df8a6d7e75cb407288016719","modified":1534997685821},{"_id":"public/archives/2018/index.html","hash":"7aa387fe51d68ab5810166d2bc2941ff49179277","modified":1534997685839},{"_id":"public/archives/2018/08/index.html","hash":"32619980291215ce90d6c08e3d96aaca717ea7b3","modified":1534997685839},{"_id":"public/tags/linux/index.html","hash":"1fbda09fad8eb73d7e21af5f2d2ba268f35ed3e3","modified":1534997685840},{"_id":"public/2018/08/23/mac-使用tree命令/index.html","hash":"9789633aebc0d195a40417144a8af931ab8f333f","modified":1534997685840},{"_id":"public/CNAME","hash":"7548adc9068517aa422418eaa2dbe99216f2422c","modified":1534997685848},{"_id":"public/images/QQ截图20160413163537.png","hash":"3e8658757fb9c787486cad9ce09dd9154b833882","modified":1534997685848},{"_id":"public/images/QQ截图20160413165101.png","hash":"fe19d2e29ae859668e49730de905c95b90e0ebcc","modified":1534997685848},{"_id":"public/images/QQ截图20160413165633.png","hash":"8b77ececb43abf120469e15a3d899527e15d05dd","modified":1534997685848},{"_id":"public/images/QQ截图20161021165145.png","hash":"8eb1f673410159fb04f21fe0e4bb93c9b5b16e26","modified":1534997685848},{"_id":"public/images/QQ截图20161229154152.png","hash":"74fe29ea0835488cea2d5b94b887da31aa44925b","modified":1534997685848},{"_id":"public/images/QQ截图20160708183414.png","hash":"dee6d07b0d2b58b17629bdf01ef32981b8d78937","modified":1534997685848},{"_id":"public/images/QQ截图20161229154809.png","hash":"0c3b9bb7f84421bfa6ec55c2e73dfdd32b8ccf2b","modified":1534997685849},{"_id":"public/images/QQ截图20161229160034.png","hash":"f73a6273910ca46d7526c93cb429d7767f678ae9","modified":1534997685849},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1534997685849},{"_id":"public/img/alipay.jpg","hash":"6054d9ed2ca7cd1f645b729e05632134467d4daa","modified":1534997685849},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1534997685849},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1534997685849},{"_id":"public/img/wechat.jpg","hash":"ef069cc9e80c7553fd60589b0727bbbf8c6de372","modified":1534997685849},{"_id":"public/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1534997685849},{"_id":"public/img/logo.jpg","hash":"f25dc3a067225bfe33c160b3ef00b28ad93cb66a","modified":1534997685849},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1534997685849},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1534997685850},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1534997685850},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1534997685850},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1534997685850},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1534997685850},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1534997685850},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1534997685850},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1534997685851},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1534997685851},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1534997685851},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1534997685851},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1534997685851},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1534997685851},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1534997685851},{"_id":"public/images/QQ截图20161027161847.png","hash":"29e5fff96d27d9607654db9a9dbac6dfc8c52f53","modified":1534997685879},{"_id":"public/images/QQ截图20161228122836.png","hash":"9f64fce516c7c1815881f3cfb2a056e94e8f505f","modified":1534997685879},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1534997685880},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1534997685880},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1534997685880},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1534997685880},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1534997685880},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1534997685880},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1534997685880},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1534997685881},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1534997685881},{"_id":"public/js/search.js","hash":"b8ef146e6e503e37fbb2c2f88352be0579631bc6","modified":1534997685895},{"_id":"public/images/QQ截图20160413155659.png","hash":"8551bf93e86587928f042d5c85cbfb8a321d3674","modified":1534997685895},{"_id":"public/images/QQ截图20161027164200.jpg","hash":"348885b7daa77dc4d957846d7f22ac3590473e80","modified":1534997685895},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1534997685896},{"_id":"public/js/main.js","hash":"491bc4e7caba9404309398d0571d7f99d9581137","modified":1534997685898},{"_id":"public/images/QQ截图20161229151926.png","hash":"249f317d407c528cd29e9d95a987e5726fa72420","modified":1534997685898},{"_id":"public/favicon.ico","hash":"6b285021d853c29da85b5d9c5faa628016fc9bc1","modified":1534997685901},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1534997685903},{"_id":"public/images/808279392447213144-576x1024.jpg","hash":"fd0c18cddaad18679786c005cb4312882f2ee156","modified":1534997685966},{"_id":"public/css/style.css","hash":"d8039abca57408e5068379f8e9a32c3914adbca6","modified":1534997686169}],"Category":[{"name":"vue","_id":"cjl61zlx300044jv3f9pwkoi4"},{"name":"环境搭建","_id":"cjl61zlx9000a4jv3l8zxhn2n"},{"name":"mywork","_id":"cjl61zlxf000g4jv3403t485w"},{"name":"mongodb","_id":"cjl61zlxi000l4jv3xfrw5hfj"},{"name":"Javascript","_id":"cjl61zlxq000z4jv3bhwiuira"},{"name":"JavaScript","_id":"cjl61zlxr00154jv3zk0onki0"},{"name":"nodeJs","_id":"cjl61zlxt001a4jv33e90eysc"}],"Data":[],"Page":[{"title":"Tags","layout":"tags","noDate":true,"comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\nlayout: tags\nnoDate: true\ncomments: false\n---\n","date":"2018-08-21T13:36:30.015Z","updated":"2016-10-27T08:08:50.000Z","path":"tags/index.html","_id":"cjl61zlx000014jv3g8l1ch33","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","layout":"categories","noDate":true,"comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\nlayout: categories\nnoDate: true\ncomments: false\n---\n","date":"2018-08-21T13:36:30.018Z","updated":"2016-10-27T08:10:04.000Z","path":"categories/index.html","_id":"cjl61zlx200034jv3w2519cle","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Friends","layout":"friends","noDate":true,"comments":0,"_content":"","source":"friends/index.md","raw":"---\ntitle: Friends\nlayout: friends\nnoDate: true\ncomments: false\n---\n","date":"2018-08-21T13:36:30.016Z","updated":"2016-10-27T08:10:28.000Z","path":"friends/index.html","_id":"cjl61zlx600074jv3orbcvnfv","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"初了解vue&vuex 这很接地气","date":"2017-05-22T07:35:33.000Z","_content":"\n在某个深夜，我失眠到了凌晨3点，没想别的什么，而是被这类代码占据，恨不得立刻爬起来打开电脑，洒脱的码上上万条语句，这......肯定是老大在我睡梦中督促着我要好好工作。\n\n好了言归正传。\n\n网络上对于[vuex](https://vuex.vuejs.org/zh-cn/)这套__状态管理模式__已经有不少介绍的文章了。包括小伙伴们也有写相关的分享文，对这套体系简单剖析过一遍。然而在一开始接触的时候我还是绕了不少弯子。至于为什么说接地气，因为我才接触vue和vuex三天的样子。而且我理论知识不稳固，肯定探讨不出什么高深的学术性的东西，此文只是大概介绍一下我在运用时候遇到的一些坑吧。\n# [Vue](https://cn.vuejs.org/)\n这个运用的融会贯通的人大有人在，我一个才用了三天的人就不详细说了。在这之前我一直用的angular v1.x（之后都称呼ng v1.x），之前有小哥问我为什么不用vue，当时我说了感觉vue有些不伦不类，像是ng和react的结合体。嗯，我有时候很脑残，这些话都当我没说过。\n\n很多人觉得vue和ng有很相似的地方。是不是呢，当然我没去研究ng v2.x+的框架，从ng v1.x的角度上来看，两个框架差异还是相当大的。\n\nng像是一个工厂，在ng-app内，按照不同的功能来划分体系，模块和模块之间也能通过ng的规则联系在一起。虽然也有组件化的体系，通过scope来独立区域，但是组件和组件之前有提供信息传递的方法，就像工厂里面的传送带一样，任何一个区域都可以相互传递信息（反正在我脑子里记不住那些概念，但是对于ng大概就是这么理解的）。vue则更像是一个公寓大楼。component是一间间的房间，相互独立，可以像积木一样，一层层堆积拼接。但是并没有和ng那样相对比较完善的信息传递机制。\n\n所以之前小易有问我ng v1.x有木有什么状态管理的架构。这之后我才知道的，ng v1.x应该是不需要额外的去搭建一个状态管理模式。","source":"_drafts/初了解vue-vuex-这很接地气.md","raw":"---\ntitle: 初了解vue&vuex 这很接地气\ndate: 2017-05-22 15:35:33\ntags: [vue]\ncategories: [vue]\n---\n\n在某个深夜，我失眠到了凌晨3点，没想别的什么，而是被这类代码占据，恨不得立刻爬起来打开电脑，洒脱的码上上万条语句，这......肯定是老大在我睡梦中督促着我要好好工作。\n\n好了言归正传。\n\n网络上对于[vuex](https://vuex.vuejs.org/zh-cn/)这套__状态管理模式__已经有不少介绍的文章了。包括小伙伴们也有写相关的分享文，对这套体系简单剖析过一遍。然而在一开始接触的时候我还是绕了不少弯子。至于为什么说接地气，因为我才接触vue和vuex三天的样子。而且我理论知识不稳固，肯定探讨不出什么高深的学术性的东西，此文只是大概介绍一下我在运用时候遇到的一些坑吧。\n# [Vue](https://cn.vuejs.org/)\n这个运用的融会贯通的人大有人在，我一个才用了三天的人就不详细说了。在这之前我一直用的angular v1.x（之后都称呼ng v1.x），之前有小哥问我为什么不用vue，当时我说了感觉vue有些不伦不类，像是ng和react的结合体。嗯，我有时候很脑残，这些话都当我没说过。\n\n很多人觉得vue和ng有很相似的地方。是不是呢，当然我没去研究ng v2.x+的框架，从ng v1.x的角度上来看，两个框架差异还是相当大的。\n\nng像是一个工厂，在ng-app内，按照不同的功能来划分体系，模块和模块之间也能通过ng的规则联系在一起。虽然也有组件化的体系，通过scope来独立区域，但是组件和组件之前有提供信息传递的方法，就像工厂里面的传送带一样，任何一个区域都可以相互传递信息（反正在我脑子里记不住那些概念，但是对于ng大概就是这么理解的）。vue则更像是一个公寓大楼。component是一间间的房间，相互独立，可以像积木一样，一层层堆积拼接。但是并没有和ng那样相对比较完善的信息传递机制。\n\n所以之前小易有问我ng v1.x有木有什么状态管理的架构。这之后我才知道的，ng v1.x应该是不需要额外的去搭建一个状态管理模式。","slug":"初了解vue-vuex-这很接地气","published":0,"updated":"2018-08-23T03:58:07.422Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl61zlww00004jv3lhql2f55","content":"<p>在某个深夜，我失眠到了凌晨3点，没想别的什么，而是被这类代码占据，恨不得立刻爬起来打开电脑，洒脱的码上上万条语句，这……肯定是老大在我睡梦中督促着我要好好工作。</p>\n<p>好了言归正传。</p>\n<p>网络上对于<a href=\"https://vuex.vuejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">vuex</a>这套<strong>状态管理模式</strong>已经有不少介绍的文章了。包括小伙伴们也有写相关的分享文，对这套体系简单剖析过一遍。然而在一开始接触的时候我还是绕了不少弯子。至于为什么说接地气，因为我才接触vue和vuex三天的样子。而且我理论知识不稳固，肯定探讨不出什么高深的学术性的东西，此文只是大概介绍一下我在运用时候遇到的一些坑吧。</p>\n<h1 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a><a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">Vue</a></h1><p>这个运用的融会贯通的人大有人在，我一个才用了三天的人就不详细说了。在这之前我一直用的angular v1.x（之后都称呼ng v1.x），之前有小哥问我为什么不用vue，当时我说了感觉vue有些不伦不类，像是ng和react的结合体。嗯，我有时候很脑残，这些话都当我没说过。</p>\n<p>很多人觉得vue和ng有很相似的地方。是不是呢，当然我没去研究ng v2.x+的框架，从ng v1.x的角度上来看，两个框架差异还是相当大的。</p>\n<p>ng像是一个工厂，在ng-app内，按照不同的功能来划分体系，模块和模块之间也能通过ng的规则联系在一起。虽然也有组件化的体系，通过scope来独立区域，但是组件和组件之前有提供信息传递的方法，就像工厂里面的传送带一样，任何一个区域都可以相互传递信息（反正在我脑子里记不住那些概念，但是对于ng大概就是这么理解的）。vue则更像是一个公寓大楼。component是一间间的房间，相互独立，可以像积木一样，一层层堆积拼接。但是并没有和ng那样相对比较完善的信息传递机制。</p>\n<p>所以之前小易有问我ng v1.x有木有什么状态管理的架构。这之后我才知道的，ng v1.x应该是不需要额外的去搭建一个状态管理模式。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在某个深夜，我失眠到了凌晨3点，没想别的什么，而是被这类代码占据，恨不得立刻爬起来打开电脑，洒脱的码上上万条语句，这……肯定是老大在我睡梦中督促着我要好好工作。</p>\n<p>好了言归正传。</p>\n<p>网络上对于<a href=\"https://vuex.vuejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">vuex</a>这套<strong>状态管理模式</strong>已经有不少介绍的文章了。包括小伙伴们也有写相关的分享文，对这套体系简单剖析过一遍。然而在一开始接触的时候我还是绕了不少弯子。至于为什么说接地气，因为我才接触vue和vuex三天的样子。而且我理论知识不稳固，肯定探讨不出什么高深的学术性的东西，此文只是大概介绍一下我在运用时候遇到的一些坑吧。</p>\n<h1 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a><a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">Vue</a></h1><p>这个运用的融会贯通的人大有人在，我一个才用了三天的人就不详细说了。在这之前我一直用的angular v1.x（之后都称呼ng v1.x），之前有小哥问我为什么不用vue，当时我说了感觉vue有些不伦不类，像是ng和react的结合体。嗯，我有时候很脑残，这些话都当我没说过。</p>\n<p>很多人觉得vue和ng有很相似的地方。是不是呢，当然我没去研究ng v2.x+的框架，从ng v1.x的角度上来看，两个框架差异还是相当大的。</p>\n<p>ng像是一个工厂，在ng-app内，按照不同的功能来划分体系，模块和模块之间也能通过ng的规则联系在一起。虽然也有组件化的体系，通过scope来独立区域，但是组件和组件之前有提供信息传递的方法，就像工厂里面的传送带一样，任何一个区域都可以相互传递信息（反正在我脑子里记不住那些概念，但是对于ng大概就是这么理解的）。vue则更像是一个公寓大楼。component是一间间的房间，相互独立，可以像积木一样，一层层堆积拼接。但是并没有和ng那样相对比较完善的信息传递机制。</p>\n<p>所以之前小易有问我ng v1.x有木有什么状态管理的架构。这之后我才知道的，ng v1.x应该是不需要额外的去搭建一个状态管理模式。</p>\n"},{"title":"mac 使用tree命令","date":"2018-08-23T03:59:10.000Z","_content":"\n开发的时候想要生成树状的目录结构，Linux下有个tree命令可以直接打印出树状的目录结构，可以了解一下，但是mac下默认是木有tree命令的。\n网上搜了一下，mark一下：\n\n使用find命令模拟出tree命令的效果，如显示当前目录的 tree 的命令：\n\n```\n$ find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'\n```\n\n还可以写一个别名来快速执行该命令，运行如下命令，将上面这个命令写到~/.bash_profile里，以后直接运行tree命令就更方便了:\n\n```\nalias tree=\"find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'\"\n```　　\n\n也可以使用 homebrew 安装 tree 命令行：\n```\n$ brew install tree\n```\n这样就在你的mac上安装了 tree 命令行了。\n\n \n\ntree命令行参数（只实用与安装了tree命令行工具）：\n\n- -a 显示所有文件和目录。\n- -A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。\n- -C 在文件和目录清单加上色彩，便于区分各种类型。\n- -d 显示目录名称而非内容。\n- -D 列出文件或目录的更改时间。\n- -f 在每个文件或目录之前，显示完整的相对路径名称。\n- -F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上\"*\",\"/\",\"=\",\"@\",\"|\"号。\n- -g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。\n- -i 不以阶梯状列出文件或目录名称。\n- -I 不显示符合范本样式的文件或目录名称。\n- -l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。\n- -n 不在文件和目录清单加上色彩。\n- -N 直接列出文件和目录名称，包括控制字符。\n- -p 列出权限标示。\n- -P 只显示符合范本样式的文件或目录名称。\n- -q 用\"?\"号取代控制字符，列出文件和目录名称。\n- -s 列出文件或目录大小。\n- -t 用文件和目录的更改时间排序。\n- -u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。\n- -x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。","source":"_posts/mac-使用tree命令.md","raw":"---\ntitle: mac 使用tree命令\ndate: 2018-08-23 11:59:10\ntags: [环境搭建,linux]\ncategories: [环境搭建]\n---\n\n开发的时候想要生成树状的目录结构，Linux下有个tree命令可以直接打印出树状的目录结构，可以了解一下，但是mac下默认是木有tree命令的。\n网上搜了一下，mark一下：\n\n使用find命令模拟出tree命令的效果，如显示当前目录的 tree 的命令：\n\n```\n$ find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'\n```\n\n还可以写一个别名来快速执行该命令，运行如下命令，将上面这个命令写到~/.bash_profile里，以后直接运行tree命令就更方便了:\n\n```\nalias tree=\"find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'\"\n```　　\n\n也可以使用 homebrew 安装 tree 命令行：\n```\n$ brew install tree\n```\n这样就在你的mac上安装了 tree 命令行了。\n\n \n\ntree命令行参数（只实用与安装了tree命令行工具）：\n\n- -a 显示所有文件和目录。\n- -A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。\n- -C 在文件和目录清单加上色彩，便于区分各种类型。\n- -d 显示目录名称而非内容。\n- -D 列出文件或目录的更改时间。\n- -f 在每个文件或目录之前，显示完整的相对路径名称。\n- -F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上\"*\",\"/\",\"=\",\"@\",\"|\"号。\n- -g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。\n- -i 不以阶梯状列出文件或目录名称。\n- -I 不显示符合范本样式的文件或目录名称。\n- -l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。\n- -n 不在文件和目录清单加上色彩。\n- -N 直接列出文件和目录名称，包括控制字符。\n- -p 列出权限标示。\n- -P 只显示符合范本样式的文件或目录名称。\n- -q 用\"?\"号取代控制字符，列出文件和目录名称。\n- -s 列出文件或目录大小。\n- -t 用文件和目录的更改时间排序。\n- -u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。\n- -x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。","slug":"mac-使用tree命令","published":1,"updated":"2018-08-23T04:00:10.872Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl61zlx100024jv3k9ytjjzb","content":"<p>开发的时候想要生成树状的目录结构，Linux下有个tree命令可以直接打印出树状的目录结构，可以了解一下，但是mac下默认是木有tree命令的。<br>网上搜了一下，mark一下：</p>\n<p>使用find命令模拟出tree命令的效果，如显示当前目录的 tree 的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos;</span><br></pre></td></tr></table></figure>\n<p>还可以写一个别名来快速执行该命令，运行如下命令，将上面这个命令写到~/.bash_profile里，以后直接运行tree命令就更方便了:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">alias tree=&quot;find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos;&quot;</span><br><span class=\"line\">```　　</span><br><span class=\"line\"></span><br><span class=\"line\">也可以使用 homebrew 安装 tree 命令行：</span><br></pre></td></tr></table></figure>\n<p>$ brew install tree<br><code>`</code><br>这样就在你的mac上安装了 tree 命令行了。</p>\n<p>tree命令行参数（只实用与安装了tree命令行工具）：</p>\n<ul>\n<li>-a 显示所有文件和目录。</li>\n<li>-A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。</li>\n<li>-C 在文件和目录清单加上色彩，便于区分各种类型。</li>\n<li>-d 显示目录名称而非内容。</li>\n<li>-D 列出文件或目录的更改时间。</li>\n<li>-f 在每个文件或目录之前，显示完整的相对路径名称。</li>\n<li>-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上”*”,”/“,”=”,”@”,”|”号。</li>\n<li>-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。</li>\n<li>-i 不以阶梯状列出文件或目录名称。</li>\n<li>-I 不显示符合范本样式的文件或目录名称。</li>\n<li>-l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。</li>\n<li>-n 不在文件和目录清单加上色彩。</li>\n<li>-N 直接列出文件和目录名称，包括控制字符。</li>\n<li>-p 列出权限标示。</li>\n<li>-P 只显示符合范本样式的文件或目录名称。</li>\n<li>-q 用”?”号取代控制字符，列出文件和目录名称。</li>\n<li>-s 列出文件或目录大小。</li>\n<li>-t 用文件和目录的更改时间排序。</li>\n<li>-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。</li>\n<li>-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>开发的时候想要生成树状的目录结构，Linux下有个tree命令可以直接打印出树状的目录结构，可以了解一下，但是mac下默认是木有tree命令的。<br>网上搜了一下，mark一下：</p>\n<p>使用find命令模拟出tree命令的效果，如显示当前目录的 tree 的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos;</span><br></pre></td></tr></table></figure>\n<p>还可以写一个别名来快速执行该命令，运行如下命令，将上面这个命令写到~/.bash_profile里，以后直接运行tree命令就更方便了:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">alias tree=&quot;find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos;&quot;</span><br><span class=\"line\">```　　</span><br><span class=\"line\"></span><br><span class=\"line\">也可以使用 homebrew 安装 tree 命令行：</span><br></pre></td></tr></table></figure>\n<p>$ brew install tree<br><code>`</code><br>这样就在你的mac上安装了 tree 命令行了。</p>\n<p>tree命令行参数（只实用与安装了tree命令行工具）：</p>\n<ul>\n<li>-a 显示所有文件和目录。</li>\n<li>-A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。</li>\n<li>-C 在文件和目录清单加上色彩，便于区分各种类型。</li>\n<li>-d 显示目录名称而非内容。</li>\n<li>-D 列出文件或目录的更改时间。</li>\n<li>-f 在每个文件或目录之前，显示完整的相对路径名称。</li>\n<li>-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上”*”,”/“,”=”,”@”,”|”号。</li>\n<li>-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。</li>\n<li>-i 不以阶梯状列出文件或目录名称。</li>\n<li>-I 不显示符合范本样式的文件或目录名称。</li>\n<li>-l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。</li>\n<li>-n 不在文件和目录清单加上色彩。</li>\n<li>-N 直接列出文件和目录名称，包括控制字符。</li>\n<li>-p 列出权限标示。</li>\n<li>-P 只显示符合范本样式的文件或目录名称。</li>\n<li>-q 用”?”号取代控制字符，列出文件和目录名称。</li>\n<li>-s 列出文件或目录大小。</li>\n<li>-t 用文件和目录的更改时间排序。</li>\n<li>-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。</li>\n<li>-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。</li>\n</ul>\n"},{"title":"Materialize UI 风格 WIKI 模板页","date":"2016-10-21T10:16:56.000Z","_content":"\n# 简介\n[Materialize](http://materializecss.com/) 是基于Material Design的UI框架。\n\n使用Materialize框架制作了一个WIKI文档的模板页面。\n\n![](/images/QQ截图20160708183414.png)\n\n# 实现功能\n* 动态生成左侧栏导航\n* 生成面包屑（这个一直没找到很好的控制方法，肯定是我蠢！）\n* 【伪】templates加载（其实是想仿照做一个路由加载指定模块的功能）\n\n# 源码\ngithub:  https://github.com/MJPiero/wiki-materialize\n\n","source":"_posts/Materialize-UI-风格-WIKI-模板页.md","raw":"---\ntitle: Materialize UI 风格 WIKI 模板页\ntags: [mywork]\ncategories: [mywork]\ndate: 2016-10-21 18:16:56\n---\n\n# 简介\n[Materialize](http://materializecss.com/) 是基于Material Design的UI框架。\n\n使用Materialize框架制作了一个WIKI文档的模板页面。\n\n![](/images/QQ截图20160708183414.png)\n\n# 实现功能\n* 动态生成左侧栏导航\n* 生成面包屑（这个一直没找到很好的控制方法，肯定是我蠢！）\n* 【伪】templates加载（其实是想仿照做一个路由加载指定模块的功能）\n\n# 源码\ngithub:  https://github.com/MJPiero/wiki-materialize\n\n","slug":"Materialize-UI-风格-WIKI-模板页","published":1,"updated":"2016-10-26T10:13:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl61zlx500064jv3zqygzbbz","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p><a href=\"http://materializecss.com/\" target=\"_blank\" rel=\"noopener\">Materialize</a> 是基于Material Design的UI框架。</p>\n<p>使用Materialize框架制作了一个WIKI文档的模板页面。</p>\n<p><img src=\"/images/QQ截图20160708183414.png\" alt=\"\"></p>\n<h1 id=\"实现功能\"><a href=\"#实现功能\" class=\"headerlink\" title=\"实现功能\"></a>实现功能</h1><ul>\n<li>动态生成左侧栏导航</li>\n<li>生成面包屑（这个一直没找到很好的控制方法，肯定是我蠢！）</li>\n<li>【伪】templates加载（其实是想仿照做一个路由加载指定模块的功能）</li>\n</ul>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><p>github:  <a href=\"https://github.com/MJPiero/wiki-materialize\" target=\"_blank\" rel=\"noopener\">https://github.com/MJPiero/wiki-materialize</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p><a href=\"http://materializecss.com/\" target=\"_blank\" rel=\"noopener\">Materialize</a> 是基于Material Design的UI框架。</p>\n<p>使用Materialize框架制作了一个WIKI文档的模板页面。</p>\n<p><img src=\"/images/QQ截图20160708183414.png\" alt=\"\"></p>\n<h1 id=\"实现功能\"><a href=\"#实现功能\" class=\"headerlink\" title=\"实现功能\"></a>实现功能</h1><ul>\n<li>动态生成左侧栏导航</li>\n<li>生成面包屑（这个一直没找到很好的控制方法，肯定是我蠢！）</li>\n<li>【伪】templates加载（其实是想仿照做一个路由加载指定模块的功能）</li>\n</ul>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><p>github:  <a href=\"https://github.com/MJPiero/wiki-materialize\" target=\"_blank\" rel=\"noopener\">https://github.com/MJPiero/wiki-materialize</a></p>\n"},{"title":"MongoDB如何开启认证权限功能","date":"2016-12-28T06:04:52.000Z","_content":"MongoDB预设不会开启认证权限功能（Authentication），所以任何人都可以随意连接到MongoDB的数据库。于是我们要去创建一个管理员的账号，并为其添加权限。\n# 创建新用户\n在开启MongoDB服务的情况下。执行`mongod`或则`mongod --dbpath <path to data directory>` 进入MongoDB服务。\n进入服务之后，执行：\n```\nuse admin\ndb.addUser(\"账户名称\", \"密码\")\n// 如果希望此账号只有读取的权限，则修改为\n// db.addUser(\"账户名称\", \"密码\", true)\n```\n执行完成之后，先停止MongoDB服务，在执行下面指令重新开启MongoDB服务：\n```\nmongod --auth\n```\n# 进入库\n启动完成之后，在连接上MongoDB Shell，在其中执行以下命令才可进入到admin库中：\n```\nuse admin \ndb.auth(\"账户名称\", \"密码\")\n```\n","source":"_posts/MongoDB如何开启认证权限功能.md","raw":"---\ntitle: MongoDB如何开启认证权限功能\ndate: 2016-12-28 14:04:52\ntags: [mongodb]\ncategories: [mongodb]\n---\nMongoDB预设不会开启认证权限功能（Authentication），所以任何人都可以随意连接到MongoDB的数据库。于是我们要去创建一个管理员的账号，并为其添加权限。\n# 创建新用户\n在开启MongoDB服务的情况下。执行`mongod`或则`mongod --dbpath <path to data directory>` 进入MongoDB服务。\n进入服务之后，执行：\n```\nuse admin\ndb.addUser(\"账户名称\", \"密码\")\n// 如果希望此账号只有读取的权限，则修改为\n// db.addUser(\"账户名称\", \"密码\", true)\n```\n执行完成之后，先停止MongoDB服务，在执行下面指令重新开启MongoDB服务：\n```\nmongod --auth\n```\n# 进入库\n启动完成之后，在连接上MongoDB Shell，在其中执行以下命令才可进入到admin库中：\n```\nuse admin \ndb.auth(\"账户名称\", \"密码\")\n```\n","slug":"MongoDB如何开启认证权限功能","published":1,"updated":"2016-12-28T06:24:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl61zlx700084jv36h7qycj9","content":"<p>MongoDB预设不会开启认证权限功能（Authentication），所以任何人都可以随意连接到MongoDB的数据库。于是我们要去创建一个管理员的账号，并为其添加权限。</p>\n<h1 id=\"创建新用户\"><a href=\"#创建新用户\" class=\"headerlink\" title=\"创建新用户\"></a>创建新用户</h1><p>在开启MongoDB服务的情况下。执行<code>mongod</code>或则<code>mongod --dbpath &lt;path to data directory&gt;</code> 进入MongoDB服务。<br>进入服务之后，执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use admin</span><br><span class=\"line\">db.addUser(&quot;账户名称&quot;, &quot;密码&quot;)</span><br><span class=\"line\">// 如果希望此账号只有读取的权限，则修改为</span><br><span class=\"line\">// db.addUser(&quot;账户名称&quot;, &quot;密码&quot;, true)</span><br></pre></td></tr></table></figure></p>\n<p>执行完成之后，先停止MongoDB服务，在执行下面指令重新开启MongoDB服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mongod --auth</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"进入库\"><a href=\"#进入库\" class=\"headerlink\" title=\"进入库\"></a>进入库</h1><p>启动完成之后，在连接上MongoDB Shell，在其中执行以下命令才可进入到admin库中：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use admin </span><br><span class=\"line\">db.auth(&quot;账户名称&quot;, &quot;密码&quot;)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>MongoDB预设不会开启认证权限功能（Authentication），所以任何人都可以随意连接到MongoDB的数据库。于是我们要去创建一个管理员的账号，并为其添加权限。</p>\n<h1 id=\"创建新用户\"><a href=\"#创建新用户\" class=\"headerlink\" title=\"创建新用户\"></a>创建新用户</h1><p>在开启MongoDB服务的情况下。执行<code>mongod</code>或则<code>mongod --dbpath &lt;path to data directory&gt;</code> 进入MongoDB服务。<br>进入服务之后，执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use admin</span><br><span class=\"line\">db.addUser(&quot;账户名称&quot;, &quot;密码&quot;)</span><br><span class=\"line\">// 如果希望此账号只有读取的权限，则修改为</span><br><span class=\"line\">// db.addUser(&quot;账户名称&quot;, &quot;密码&quot;, true)</span><br></pre></td></tr></table></figure></p>\n<p>执行完成之后，先停止MongoDB服务，在执行下面指令重新开启MongoDB服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mongod --auth</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"进入库\"><a href=\"#进入库\" class=\"headerlink\" title=\"进入库\"></a>进入库</h1><p>启动完成之后，在连接上MongoDB Shell，在其中执行以下命令才可进入到admin库中：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use admin </span><br><span class=\"line\">db.auth(&quot;账户名称&quot;, &quot;密码&quot;)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"MongoDB添加到window服务，随系统自启动","date":"2016-12-28T03:38:01.000Z","_content":"最近在window上安转MongoDB，记录一下遇到的一些的问题。\n# windows上安装MongoDB\n首先去官网下载Windows安装包：https://www.mongodb.org/downloads\n安装路径这里假设是安装在 `D:/soft/mongodb/`。\n安装好之后，我们可以随便在一个目录下，比如在 `D:/` 根目录下创建一个目录 `D:\\mongodb\\`，进入该目录，新建data和logs两个目录。\n然后打开控制台命令窗口（CMD），输入`D:\\soft\\mongodb\\bin` 进入到安装目录下。\n再执行：`mongod --dbpath d:/mongodb/data`，开启MongoDB服务，并将运行目录指向之前创建好的 `D:\\mongodb\\data` 下。\n打开浏览器，进入：`http://127.0.0.1:27017`（window服务默认端口27017），这时你会看到以下提示语：\n```\nYou are trying to access MongoDB on the native driver port. For http diagnostic access, add 1000 to the port number\n```\n这说明MongoDB服务已经启动了。\n# 添加MongoDB服务到windows本地服务中\n上面的方法要保证MongoDB服务运行，必须每次都要重复输入命令才能开启。为了方便在windows上开启MongoDB服务，我们需要将MongoDB服务到windows本地服务中，并且设置随系统启动开启。\n继续回到CMD中，在安装目录中（D:\\soft\\mongodb\\bin）执行：\n```\nmongod.exe --logpath d:/soft/mongodb/logs/mongodb.log --logappend --dbpath d:/soft/mongodb/data --directoryperdb --serviceName MongoDB -install --auth\n```\n> 此处注意 \"--auth\" 是将服务开启权限认证，这样别人需要账户和密码才能去访问你的数据库。\n> 如果要开启认证，需要在前期运行时要在MongoDB服务中设置好账户密码。\n> 详细方法可参考：[MongoDB如何开启认证权限功能](http://www.mjpiero.cc/2016/12/28/MongoDB%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E8%AE%A4%E8%AF%81%E6%9D%83%E9%99%90%E5%8A%9F%E8%83%BD/)\n> 如果不需要，或则选择后期再设置，可以不使用。\n\n上面执行完毕之后，会在windows服务下创建一个名为MongoDB的服务。\n执行 `net start MongoDB` 便开启MongoDB服务了。\n可以在windows的服务窗口中看见MongoDB的服务状态。\n![](/images/QQ截图20161228122836.png)\n# 删除MongoDB服务\n如果要删除MongoDB服务，首先先停止当前的MongoDB服务，这个可以去服务窗口停止。\n然后在CMD中执行：`sc delete MongoDB`\n这样之前安装的服务就会被删除。\n# 安装时遇到的一些问题\n在安装时可能遇到的一些问题：\n## Windows不能在本地计算机启动MongoDB，错误代码 100\n__解决办法：__ MongoDB安装目录\\data\\将此文件夹下的mongod.lock、storage.bson删除\n## 连接数据库时发生错误 failed to execute listdatabases command\n__解决办法：__ 在安装服务的时候开启权限认证，确定一下账户密码是否有误。\n如果是在添加服务的时候使用了\"--auth\"命令，则需要进入MongoDB服务中重新添加新的账户和密码。\n详细方法可参考：[MongoDB如何开启认证权限功能](http://www.mjpiero.cc/2016/12/28/MongoDB%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E8%AE%A4%E8%AF%81%E6%9D%83%E9%99%90%E5%8A%9F%E8%83%BD/)","source":"_posts/MongoDB添加到window服务，随服务自启动.md","raw":"---\ntitle: MongoDB添加到window服务，随系统自启动\ndate: 2016-12-28 11:38:01\ntags: [mongodb, 环境搭建]\ncategories: [mongodb]\n---\n最近在window上安转MongoDB，记录一下遇到的一些的问题。\n# windows上安装MongoDB\n首先去官网下载Windows安装包：https://www.mongodb.org/downloads\n安装路径这里假设是安装在 `D:/soft/mongodb/`。\n安装好之后，我们可以随便在一个目录下，比如在 `D:/` 根目录下创建一个目录 `D:\\mongodb\\`，进入该目录，新建data和logs两个目录。\n然后打开控制台命令窗口（CMD），输入`D:\\soft\\mongodb\\bin` 进入到安装目录下。\n再执行：`mongod --dbpath d:/mongodb/data`，开启MongoDB服务，并将运行目录指向之前创建好的 `D:\\mongodb\\data` 下。\n打开浏览器，进入：`http://127.0.0.1:27017`（window服务默认端口27017），这时你会看到以下提示语：\n```\nYou are trying to access MongoDB on the native driver port. For http diagnostic access, add 1000 to the port number\n```\n这说明MongoDB服务已经启动了。\n# 添加MongoDB服务到windows本地服务中\n上面的方法要保证MongoDB服务运行，必须每次都要重复输入命令才能开启。为了方便在windows上开启MongoDB服务，我们需要将MongoDB服务到windows本地服务中，并且设置随系统启动开启。\n继续回到CMD中，在安装目录中（D:\\soft\\mongodb\\bin）执行：\n```\nmongod.exe --logpath d:/soft/mongodb/logs/mongodb.log --logappend --dbpath d:/soft/mongodb/data --directoryperdb --serviceName MongoDB -install --auth\n```\n> 此处注意 \"--auth\" 是将服务开启权限认证，这样别人需要账户和密码才能去访问你的数据库。\n> 如果要开启认证，需要在前期运行时要在MongoDB服务中设置好账户密码。\n> 详细方法可参考：[MongoDB如何开启认证权限功能](http://www.mjpiero.cc/2016/12/28/MongoDB%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E8%AE%A4%E8%AF%81%E6%9D%83%E9%99%90%E5%8A%9F%E8%83%BD/)\n> 如果不需要，或则选择后期再设置，可以不使用。\n\n上面执行完毕之后，会在windows服务下创建一个名为MongoDB的服务。\n执行 `net start MongoDB` 便开启MongoDB服务了。\n可以在windows的服务窗口中看见MongoDB的服务状态。\n![](/images/QQ截图20161228122836.png)\n# 删除MongoDB服务\n如果要删除MongoDB服务，首先先停止当前的MongoDB服务，这个可以去服务窗口停止。\n然后在CMD中执行：`sc delete MongoDB`\n这样之前安装的服务就会被删除。\n# 安装时遇到的一些问题\n在安装时可能遇到的一些问题：\n## Windows不能在本地计算机启动MongoDB，错误代码 100\n__解决办法：__ MongoDB安装目录\\data\\将此文件夹下的mongod.lock、storage.bson删除\n## 连接数据库时发生错误 failed to execute listdatabases command\n__解决办法：__ 在安装服务的时候开启权限认证，确定一下账户密码是否有误。\n如果是在添加服务的时候使用了\"--auth\"命令，则需要进入MongoDB服务中重新添加新的账户和密码。\n详细方法可参考：[MongoDB如何开启认证权限功能](http://www.mjpiero.cc/2016/12/28/MongoDB%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E8%AE%A4%E8%AF%81%E6%9D%83%E9%99%90%E5%8A%9F%E8%83%BD/)","slug":"MongoDB添加到window服务，随服务自启动","published":1,"updated":"2017-03-13T02:21:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl61zlx800094jv30gcmxjpj","content":"<p>最近在window上安转MongoDB，记录一下遇到的一些的问题。</p>\n<h1 id=\"windows上安装MongoDB\"><a href=\"#windows上安装MongoDB\" class=\"headerlink\" title=\"windows上安装MongoDB\"></a>windows上安装MongoDB</h1><p>首先去官网下载Windows安装包：<a href=\"https://www.mongodb.org/downloads\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.org/downloads</a><br>安装路径这里假设是安装在 <code>D:/soft/mongodb/</code>。<br>安装好之后，我们可以随便在一个目录下，比如在 <code>D:/</code> 根目录下创建一个目录 <code>D:\\mongodb\\</code>，进入该目录，新建data和logs两个目录。<br>然后打开控制台命令窗口（CMD），输入<code>D:\\soft\\mongodb\\bin</code> 进入到安装目录下。<br>再执行：<code>mongod --dbpath d:/mongodb/data</code>，开启MongoDB服务，并将运行目录指向之前创建好的 <code>D:\\mongodb\\data</code> 下。<br>打开浏览器，进入：<code>http://127.0.0.1:27017</code>（window服务默认端口27017），这时你会看到以下提示语：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">You are trying to access MongoDB on the native driver port. For http diagnostic access, add 1000 to the port number</span><br></pre></td></tr></table></figure></p>\n<p>这说明MongoDB服务已经启动了。</p>\n<h1 id=\"添加MongoDB服务到windows本地服务中\"><a href=\"#添加MongoDB服务到windows本地服务中\" class=\"headerlink\" title=\"添加MongoDB服务到windows本地服务中\"></a>添加MongoDB服务到windows本地服务中</h1><p>上面的方法要保证MongoDB服务运行，必须每次都要重复输入命令才能开启。为了方便在windows上开启MongoDB服务，我们需要将MongoDB服务到windows本地服务中，并且设置随系统启动开启。<br>继续回到CMD中，在安装目录中（D:\\soft\\mongodb\\bin）执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mongod.exe --logpath d:/soft/mongodb/logs/mongodb.log --logappend --dbpath d:/soft/mongodb/data --directoryperdb --serviceName MongoDB -install --auth</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>此处注意 “–auth” 是将服务开启权限认证，这样别人需要账户和密码才能去访问你的数据库。<br>如果要开启认证，需要在前期运行时要在MongoDB服务中设置好账户密码。<br>详细方法可参考：<a href=\"http://www.mjpiero.cc/2016/12/28/MongoDB%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E8%AE%A4%E8%AF%81%E6%9D%83%E9%99%90%E5%8A%9F%E8%83%BD/\">MongoDB如何开启认证权限功能</a><br>如果不需要，或则选择后期再设置，可以不使用。</p>\n</blockquote>\n<p>上面执行完毕之后，会在windows服务下创建一个名为MongoDB的服务。<br>执行 <code>net start MongoDB</code> 便开启MongoDB服务了。<br>可以在windows的服务窗口中看见MongoDB的服务状态。<br><img src=\"/images/QQ截图20161228122836.png\" alt=\"\"></p>\n<h1 id=\"删除MongoDB服务\"><a href=\"#删除MongoDB服务\" class=\"headerlink\" title=\"删除MongoDB服务\"></a>删除MongoDB服务</h1><p>如果要删除MongoDB服务，首先先停止当前的MongoDB服务，这个可以去服务窗口停止。<br>然后在CMD中执行：<code>sc delete MongoDB</code><br>这样之前安装的服务就会被删除。</p>\n<h1 id=\"安装时遇到的一些问题\"><a href=\"#安装时遇到的一些问题\" class=\"headerlink\" title=\"安装时遇到的一些问题\"></a>安装时遇到的一些问题</h1><p>在安装时可能遇到的一些问题：</p>\n<h2 id=\"Windows不能在本地计算机启动MongoDB，错误代码-100\"><a href=\"#Windows不能在本地计算机启动MongoDB，错误代码-100\" class=\"headerlink\" title=\"Windows不能在本地计算机启动MongoDB，错误代码 100\"></a>Windows不能在本地计算机启动MongoDB，错误代码 100</h2><p><strong>解决办法：</strong> MongoDB安装目录\\data\\将此文件夹下的mongod.lock、storage.bson删除</p>\n<h2 id=\"连接数据库时发生错误-failed-to-execute-listdatabases-command\"><a href=\"#连接数据库时发生错误-failed-to-execute-listdatabases-command\" class=\"headerlink\" title=\"连接数据库时发生错误 failed to execute listdatabases command\"></a>连接数据库时发生错误 failed to execute listdatabases command</h2><p><strong>解决办法：</strong> 在安装服务的时候开启权限认证，确定一下账户密码是否有误。<br>如果是在添加服务的时候使用了”–auth”命令，则需要进入MongoDB服务中重新添加新的账户和密码。<br>详细方法可参考：<a href=\"http://www.mjpiero.cc/2016/12/28/MongoDB%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E8%AE%A4%E8%AF%81%E6%9D%83%E9%99%90%E5%8A%9F%E8%83%BD/\">MongoDB如何开启认证权限功能</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在window上安转MongoDB，记录一下遇到的一些的问题。</p>\n<h1 id=\"windows上安装MongoDB\"><a href=\"#windows上安装MongoDB\" class=\"headerlink\" title=\"windows上安装MongoDB\"></a>windows上安装MongoDB</h1><p>首先去官网下载Windows安装包：<a href=\"https://www.mongodb.org/downloads\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.org/downloads</a><br>安装路径这里假设是安装在 <code>D:/soft/mongodb/</code>。<br>安装好之后，我们可以随便在一个目录下，比如在 <code>D:/</code> 根目录下创建一个目录 <code>D:\\mongodb\\</code>，进入该目录，新建data和logs两个目录。<br>然后打开控制台命令窗口（CMD），输入<code>D:\\soft\\mongodb\\bin</code> 进入到安装目录下。<br>再执行：<code>mongod --dbpath d:/mongodb/data</code>，开启MongoDB服务，并将运行目录指向之前创建好的 <code>D:\\mongodb\\data</code> 下。<br>打开浏览器，进入：<code>http://127.0.0.1:27017</code>（window服务默认端口27017），这时你会看到以下提示语：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">You are trying to access MongoDB on the native driver port. For http diagnostic access, add 1000 to the port number</span><br></pre></td></tr></table></figure></p>\n<p>这说明MongoDB服务已经启动了。</p>\n<h1 id=\"添加MongoDB服务到windows本地服务中\"><a href=\"#添加MongoDB服务到windows本地服务中\" class=\"headerlink\" title=\"添加MongoDB服务到windows本地服务中\"></a>添加MongoDB服务到windows本地服务中</h1><p>上面的方法要保证MongoDB服务运行，必须每次都要重复输入命令才能开启。为了方便在windows上开启MongoDB服务，我们需要将MongoDB服务到windows本地服务中，并且设置随系统启动开启。<br>继续回到CMD中，在安装目录中（D:\\soft\\mongodb\\bin）执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mongod.exe --logpath d:/soft/mongodb/logs/mongodb.log --logappend --dbpath d:/soft/mongodb/data --directoryperdb --serviceName MongoDB -install --auth</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>此处注意 “–auth” 是将服务开启权限认证，这样别人需要账户和密码才能去访问你的数据库。<br>如果要开启认证，需要在前期运行时要在MongoDB服务中设置好账户密码。<br>详细方法可参考：<a href=\"http://www.mjpiero.cc/2016/12/28/MongoDB%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E8%AE%A4%E8%AF%81%E6%9D%83%E9%99%90%E5%8A%9F%E8%83%BD/\">MongoDB如何开启认证权限功能</a><br>如果不需要，或则选择后期再设置，可以不使用。</p>\n</blockquote>\n<p>上面执行完毕之后，会在windows服务下创建一个名为MongoDB的服务。<br>执行 <code>net start MongoDB</code> 便开启MongoDB服务了。<br>可以在windows的服务窗口中看见MongoDB的服务状态。<br><img src=\"/images/QQ截图20161228122836.png\" alt=\"\"></p>\n<h1 id=\"删除MongoDB服务\"><a href=\"#删除MongoDB服务\" class=\"headerlink\" title=\"删除MongoDB服务\"></a>删除MongoDB服务</h1><p>如果要删除MongoDB服务，首先先停止当前的MongoDB服务，这个可以去服务窗口停止。<br>然后在CMD中执行：<code>sc delete MongoDB</code><br>这样之前安装的服务就会被删除。</p>\n<h1 id=\"安装时遇到的一些问题\"><a href=\"#安装时遇到的一些问题\" class=\"headerlink\" title=\"安装时遇到的一些问题\"></a>安装时遇到的一些问题</h1><p>在安装时可能遇到的一些问题：</p>\n<h2 id=\"Windows不能在本地计算机启动MongoDB，错误代码-100\"><a href=\"#Windows不能在本地计算机启动MongoDB，错误代码-100\" class=\"headerlink\" title=\"Windows不能在本地计算机启动MongoDB，错误代码 100\"></a>Windows不能在本地计算机启动MongoDB，错误代码 100</h2><p><strong>解决办法：</strong> MongoDB安装目录\\data\\将此文件夹下的mongod.lock、storage.bson删除</p>\n<h2 id=\"连接数据库时发生错误-failed-to-execute-listdatabases-command\"><a href=\"#连接数据库时发生错误-failed-to-execute-listdatabases-command\" class=\"headerlink\" title=\"连接数据库时发生错误 failed to execute listdatabases command\"></a>连接数据库时发生错误 failed to execute listdatabases command</h2><p><strong>解决办法：</strong> 在安装服务的时候开启权限认证，确定一下账户密码是否有误。<br>如果是在添加服务的时候使用了”–auth”命令，则需要进入MongoDB服务中重新添加新的账户和密码。<br>详细方法可参考：<a href=\"http://www.mjpiero.cc/2016/12/28/MongoDB%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E8%AE%A4%E8%AF%81%E6%9D%83%E9%99%90%E5%8A%9F%E8%83%BD/\">MongoDB如何开启认证权限功能</a></p>\n"},{"title":"【Web移动端】web移动端调试大法","date":"2016-12-29T07:02:38.000Z","_content":"在做移动端web开发的时候，头痛遇到移动端调试的问题，虽然现在很多PC浏览器的开发工具都自带移动端调试功能，但是显然和真机测试还是有一定差距，因为移动端不同的设备会出现不同的问题，在PC模拟器上显示正常的换到真机上测试就是会出问题。\n在这里整理一些常见的移动端调试方法。\n\n__先从一般的页面调试方法开始。__\n# console方式\n这个是最常见的一种调试方法，通过console在浏览器控制台打印出每步所需的回调数据。\n详细可以参考[Web API接口](https://developer.mozilla.org/zh-CN/docs/Web/API/Console)\n# 浏览器自带的移动端模拟器调试\n这个现在也比较常见了。最常用的是chrome的模拟器，当然现在流行的浏览器基本上都有开发者的模式，也都携有移动端的模拟器。比如火狐浏览器、360浏览器等。\n基本上浏览器开启开发者模式的方法都统一了，在windows环境下按`F12`进入开发者攻击界面，mac环境则是下按`option+command+i`。\n![](/images/QQ截图20161229151926.png)\n# UC浏览器测试\nUC浏览器提供了开发版方便开发者们连接测试。详见：[UC浏览器开发者版](http://plus.uc.cn/document/webapp/doc5.html)\n# 第三方平台在线模拟器调试\n第三方开发的平台比较方便，功能也相当强大，对于一些需要完善测试的，其实使用第三方的平台还是比较方便的。\n这里我就推荐几个比较有名的第三方平台：\n- [BrowserStack](https://www.browserstack.com/)\n- [Keynote](http://www.keynote.com/)\n- [BrowserShots](http://browsershots.org/)\n- [Browsera](http://www.browsera.com/)\n- [Ghostlab](http://www.vanamco.com/ghostlab/)\n等等...\n\n__下面介绍一些我比较喜欢的一些远程调试工具。__\n# Weinre\n之前微信开发工具中的远程调试也是基于这个开发的。\n安装方法很简单快捷。\n安装 Weinre：\n```\nnpm install -g weinre\n```\n安装完成之后，输入指令启动：\n```\nweinre --httpPort 8081 --boundHost -all-\n```\n显示如下则启动成功。\n![](/images/QQ截图20161229154152.png)\n此时我们访问地址：`http://localhost:8081/` 会显示下图：\n![](/images/QQ截图20161229154809.png)\n在页面中也有提供几种方案，在你的项目中添加对应的js。例如：`<script src=\"http://192.168.55.23:8081/target/target-script-min.js#anonymous\"></script>`\n随后便可以通过PC访问`http://192.168.55.23:8081/client/#anonymous`就可以看到手机上访问的项目页面了。\n![](/images/QQ截图20161229160034.png)\n# 代理应用\n这类代理应用实际上是用于抓包的，但是比起Weinre是基于开发者自身开发测试的。如果我们想要去获取其他网站的一些资源，例如http请求，或则一些js源码等。这时候使用代理工具比较合适。\nmac下常使用的是[Charles](https://www.charlesproxy.com/),windows环境下可以用[Fiddler](http://www.telerik.com/fiddler)\n默认开启的是8888端口。在手机上设置一个网络代理即可，这个不多详细介绍了。\n# [BrowserSync](https://browsersync.io/)\n这是一个很强大的多终端测试工具，它可以跨设备同步操作行为，还可以监听你的文件，在文件修改时自动刷新所有设备中页面。\n[BrowserSync官方网站](https://browsersync.io/)\n也可以通过npm全局安装\n```\nnpm install -g browser-sync\n```\n随后进入项目根目录下\n```\nbrowser-sync start --files \"*.*\"\n// 意思为监听当前目录下所有改动\n```\n终端中若显示如下，则启动成功：\n![](http://7xoxxe.com1.z0.glb.clouddn.com/bs.png)\n终端中显示默认访问地址：`http://localhost:3001` 则可直接进入到控制台界面。\n之后和weinre类似，也是添加一段js在自己的项目底下。\nBrowserSync还可以和gulp以及webpack搭配使用，详细的可以看官方文档。\n# 真机测试\n真机测试是一概而论的说法。由于像ios系统本身就提供了一些对前端十分友好的开发者工具。\n例如，Safari浏览器自带的开发者工具，或则xcode也有测试的方法，这里我局限性比较高，有这方面条件的是可以去搜罗一下相关的方法。\n再者，PhoneGap也是有调试工具的，只不过需要安装它测试app。\n这也是一种方法，不过个人还是偏爱Weinre或则BrowserSync的测试工具。\n\n以上。是我整理的一些移动端测试的方法。欢迎补充~","source":"_posts/【Web移动端】web移动端调试大法.md","raw":"---\ntitle: 【Web移动端】web移动端调试大法\ndate: 2016-12-29 15:02:38\ntags: [环境搭建,Web移动端]\ncategories: [环境搭建]\n---\n在做移动端web开发的时候，头痛遇到移动端调试的问题，虽然现在很多PC浏览器的开发工具都自带移动端调试功能，但是显然和真机测试还是有一定差距，因为移动端不同的设备会出现不同的问题，在PC模拟器上显示正常的换到真机上测试就是会出问题。\n在这里整理一些常见的移动端调试方法。\n\n__先从一般的页面调试方法开始。__\n# console方式\n这个是最常见的一种调试方法，通过console在浏览器控制台打印出每步所需的回调数据。\n详细可以参考[Web API接口](https://developer.mozilla.org/zh-CN/docs/Web/API/Console)\n# 浏览器自带的移动端模拟器调试\n这个现在也比较常见了。最常用的是chrome的模拟器，当然现在流行的浏览器基本上都有开发者的模式，也都携有移动端的模拟器。比如火狐浏览器、360浏览器等。\n基本上浏览器开启开发者模式的方法都统一了，在windows环境下按`F12`进入开发者攻击界面，mac环境则是下按`option+command+i`。\n![](/images/QQ截图20161229151926.png)\n# UC浏览器测试\nUC浏览器提供了开发版方便开发者们连接测试。详见：[UC浏览器开发者版](http://plus.uc.cn/document/webapp/doc5.html)\n# 第三方平台在线模拟器调试\n第三方开发的平台比较方便，功能也相当强大，对于一些需要完善测试的，其实使用第三方的平台还是比较方便的。\n这里我就推荐几个比较有名的第三方平台：\n- [BrowserStack](https://www.browserstack.com/)\n- [Keynote](http://www.keynote.com/)\n- [BrowserShots](http://browsershots.org/)\n- [Browsera](http://www.browsera.com/)\n- [Ghostlab](http://www.vanamco.com/ghostlab/)\n等等...\n\n__下面介绍一些我比较喜欢的一些远程调试工具。__\n# Weinre\n之前微信开发工具中的远程调试也是基于这个开发的。\n安装方法很简单快捷。\n安装 Weinre：\n```\nnpm install -g weinre\n```\n安装完成之后，输入指令启动：\n```\nweinre --httpPort 8081 --boundHost -all-\n```\n显示如下则启动成功。\n![](/images/QQ截图20161229154152.png)\n此时我们访问地址：`http://localhost:8081/` 会显示下图：\n![](/images/QQ截图20161229154809.png)\n在页面中也有提供几种方案，在你的项目中添加对应的js。例如：`<script src=\"http://192.168.55.23:8081/target/target-script-min.js#anonymous\"></script>`\n随后便可以通过PC访问`http://192.168.55.23:8081/client/#anonymous`就可以看到手机上访问的项目页面了。\n![](/images/QQ截图20161229160034.png)\n# 代理应用\n这类代理应用实际上是用于抓包的，但是比起Weinre是基于开发者自身开发测试的。如果我们想要去获取其他网站的一些资源，例如http请求，或则一些js源码等。这时候使用代理工具比较合适。\nmac下常使用的是[Charles](https://www.charlesproxy.com/),windows环境下可以用[Fiddler](http://www.telerik.com/fiddler)\n默认开启的是8888端口。在手机上设置一个网络代理即可，这个不多详细介绍了。\n# [BrowserSync](https://browsersync.io/)\n这是一个很强大的多终端测试工具，它可以跨设备同步操作行为，还可以监听你的文件，在文件修改时自动刷新所有设备中页面。\n[BrowserSync官方网站](https://browsersync.io/)\n也可以通过npm全局安装\n```\nnpm install -g browser-sync\n```\n随后进入项目根目录下\n```\nbrowser-sync start --files \"*.*\"\n// 意思为监听当前目录下所有改动\n```\n终端中若显示如下，则启动成功：\n![](http://7xoxxe.com1.z0.glb.clouddn.com/bs.png)\n终端中显示默认访问地址：`http://localhost:3001` 则可直接进入到控制台界面。\n之后和weinre类似，也是添加一段js在自己的项目底下。\nBrowserSync还可以和gulp以及webpack搭配使用，详细的可以看官方文档。\n# 真机测试\n真机测试是一概而论的说法。由于像ios系统本身就提供了一些对前端十分友好的开发者工具。\n例如，Safari浏览器自带的开发者工具，或则xcode也有测试的方法，这里我局限性比较高，有这方面条件的是可以去搜罗一下相关的方法。\n再者，PhoneGap也是有调试工具的，只不过需要安装它测试app。\n这也是一种方法，不过个人还是偏爱Weinre或则BrowserSync的测试工具。\n\n以上。是我整理的一些移动端测试的方法。欢迎补充~","slug":"【Web移动端】web移动端调试大法","published":1,"updated":"2017-01-18T10:25:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl61zlxa000d4jv3weur3ahj","content":"<p>在做移动端web开发的时候，头痛遇到移动端调试的问题，虽然现在很多PC浏览器的开发工具都自带移动端调试功能，但是显然和真机测试还是有一定差距，因为移动端不同的设备会出现不同的问题，在PC模拟器上显示正常的换到真机上测试就是会出问题。<br>在这里整理一些常见的移动端调试方法。</p>\n<p><strong>先从一般的页面调试方法开始。</strong></p>\n<h1 id=\"console方式\"><a href=\"#console方式\" class=\"headerlink\" title=\"console方式\"></a>console方式</h1><p>这个是最常见的一种调试方法，通过console在浏览器控制台打印出每步所需的回调数据。<br>详细可以参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Console\" target=\"_blank\" rel=\"noopener\">Web API接口</a></p>\n<h1 id=\"浏览器自带的移动端模拟器调试\"><a href=\"#浏览器自带的移动端模拟器调试\" class=\"headerlink\" title=\"浏览器自带的移动端模拟器调试\"></a>浏览器自带的移动端模拟器调试</h1><p>这个现在也比较常见了。最常用的是chrome的模拟器，当然现在流行的浏览器基本上都有开发者的模式，也都携有移动端的模拟器。比如火狐浏览器、360浏览器等。<br>基本上浏览器开启开发者模式的方法都统一了，在windows环境下按<code>F12</code>进入开发者攻击界面，mac环境则是下按<code>option+command+i</code>。<br><img src=\"/images/QQ截图20161229151926.png\" alt=\"\"></p>\n<h1 id=\"UC浏览器测试\"><a href=\"#UC浏览器测试\" class=\"headerlink\" title=\"UC浏览器测试\"></a>UC浏览器测试</h1><p>UC浏览器提供了开发版方便开发者们连接测试。详见：<a href=\"http://plus.uc.cn/document/webapp/doc5.html\" target=\"_blank\" rel=\"noopener\">UC浏览器开发者版</a></p>\n<h1 id=\"第三方平台在线模拟器调试\"><a href=\"#第三方平台在线模拟器调试\" class=\"headerlink\" title=\"第三方平台在线模拟器调试\"></a>第三方平台在线模拟器调试</h1><p>第三方开发的平台比较方便，功能也相当强大，对于一些需要完善测试的，其实使用第三方的平台还是比较方便的。<br>这里我就推荐几个比较有名的第三方平台：</p>\n<ul>\n<li><a href=\"https://www.browserstack.com/\" target=\"_blank\" rel=\"noopener\">BrowserStack</a></li>\n<li><a href=\"http://www.keynote.com/\" target=\"_blank\" rel=\"noopener\">Keynote</a></li>\n<li><a href=\"http://browsershots.org/\" target=\"_blank\" rel=\"noopener\">BrowserShots</a></li>\n<li><a href=\"http://www.browsera.com/\" target=\"_blank\" rel=\"noopener\">Browsera</a></li>\n<li><a href=\"http://www.vanamco.com/ghostlab/\" target=\"_blank\" rel=\"noopener\">Ghostlab</a><br>等等…</li>\n</ul>\n<p><strong>下面介绍一些我比较喜欢的一些远程调试工具。</strong></p>\n<h1 id=\"Weinre\"><a href=\"#Weinre\" class=\"headerlink\" title=\"Weinre\"></a>Weinre</h1><p>之前微信开发工具中的远程调试也是基于这个开发的。<br>安装方法很简单快捷。<br>安装 Weinre：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g weinre</span><br></pre></td></tr></table></figure></p>\n<p>安装完成之后，输入指令启动：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">weinre --httpPort 8081 --boundHost -all-</span><br></pre></td></tr></table></figure></p>\n<p>显示如下则启动成功。<br><img src=\"/images/QQ截图20161229154152.png\" alt=\"\"><br>此时我们访问地址：<code>http://localhost:8081/</code> 会显示下图：<br><img src=\"/images/QQ截图20161229154809.png\" alt=\"\"><br>在页面中也有提供几种方案，在你的项目中添加对应的js。例如：<code>&lt;script src=&quot;http://192.168.55.23:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;</code><br>随后便可以通过PC访问<code>http://192.168.55.23:8081/client/#anonymous</code>就可以看到手机上访问的项目页面了。<br><img src=\"/images/QQ截图20161229160034.png\" alt=\"\"></p>\n<h1 id=\"代理应用\"><a href=\"#代理应用\" class=\"headerlink\" title=\"代理应用\"></a>代理应用</h1><p>这类代理应用实际上是用于抓包的，但是比起Weinre是基于开发者自身开发测试的。如果我们想要去获取其他网站的一些资源，例如http请求，或则一些js源码等。这时候使用代理工具比较合适。<br>mac下常使用的是<a href=\"https://www.charlesproxy.com/\" target=\"_blank\" rel=\"noopener\">Charles</a>,windows环境下可以用<a href=\"http://www.telerik.com/fiddler\" target=\"_blank\" rel=\"noopener\">Fiddler</a><br>默认开启的是8888端口。在手机上设置一个网络代理即可，这个不多详细介绍了。</p>\n<h1 id=\"BrowserSync\"><a href=\"#BrowserSync\" class=\"headerlink\" title=\"BrowserSync\"></a><a href=\"https://browsersync.io/\" target=\"_blank\" rel=\"noopener\">BrowserSync</a></h1><p>这是一个很强大的多终端测试工具，它可以跨设备同步操作行为，还可以监听你的文件，在文件修改时自动刷新所有设备中页面。<br><a href=\"https://browsersync.io/\" target=\"_blank\" rel=\"noopener\">BrowserSync官方网站</a><br>也可以通过npm全局安装<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g browser-sync</span><br></pre></td></tr></table></figure></p>\n<p>随后进入项目根目录下<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">browser-sync start --files &quot;*.*&quot;</span><br><span class=\"line\">// 意思为监听当前目录下所有改动</span><br></pre></td></tr></table></figure></p>\n<p>终端中若显示如下，则启动成功：<br><img src=\"http://7xoxxe.com1.z0.glb.clouddn.com/bs.png\" alt=\"\"><br>终端中显示默认访问地址：<code>http://localhost:3001</code> 则可直接进入到控制台界面。<br>之后和weinre类似，也是添加一段js在自己的项目底下。<br>BrowserSync还可以和gulp以及webpack搭配使用，详细的可以看官方文档。</p>\n<h1 id=\"真机测试\"><a href=\"#真机测试\" class=\"headerlink\" title=\"真机测试\"></a>真机测试</h1><p>真机测试是一概而论的说法。由于像ios系统本身就提供了一些对前端十分友好的开发者工具。<br>例如，Safari浏览器自带的开发者工具，或则xcode也有测试的方法，这里我局限性比较高，有这方面条件的是可以去搜罗一下相关的方法。<br>再者，PhoneGap也是有调试工具的，只不过需要安装它测试app。<br>这也是一种方法，不过个人还是偏爱Weinre或则BrowserSync的测试工具。</p>\n<p>以上。是我整理的一些移动端测试的方法。欢迎补充~</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在做移动端web开发的时候，头痛遇到移动端调试的问题，虽然现在很多PC浏览器的开发工具都自带移动端调试功能，但是显然和真机测试还是有一定差距，因为移动端不同的设备会出现不同的问题，在PC模拟器上显示正常的换到真机上测试就是会出问题。<br>在这里整理一些常见的移动端调试方法。</p>\n<p><strong>先从一般的页面调试方法开始。</strong></p>\n<h1 id=\"console方式\"><a href=\"#console方式\" class=\"headerlink\" title=\"console方式\"></a>console方式</h1><p>这个是最常见的一种调试方法，通过console在浏览器控制台打印出每步所需的回调数据。<br>详细可以参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Console\" target=\"_blank\" rel=\"noopener\">Web API接口</a></p>\n<h1 id=\"浏览器自带的移动端模拟器调试\"><a href=\"#浏览器自带的移动端模拟器调试\" class=\"headerlink\" title=\"浏览器自带的移动端模拟器调试\"></a>浏览器自带的移动端模拟器调试</h1><p>这个现在也比较常见了。最常用的是chrome的模拟器，当然现在流行的浏览器基本上都有开发者的模式，也都携有移动端的模拟器。比如火狐浏览器、360浏览器等。<br>基本上浏览器开启开发者模式的方法都统一了，在windows环境下按<code>F12</code>进入开发者攻击界面，mac环境则是下按<code>option+command+i</code>。<br><img src=\"/images/QQ截图20161229151926.png\" alt=\"\"></p>\n<h1 id=\"UC浏览器测试\"><a href=\"#UC浏览器测试\" class=\"headerlink\" title=\"UC浏览器测试\"></a>UC浏览器测试</h1><p>UC浏览器提供了开发版方便开发者们连接测试。详见：<a href=\"http://plus.uc.cn/document/webapp/doc5.html\" target=\"_blank\" rel=\"noopener\">UC浏览器开发者版</a></p>\n<h1 id=\"第三方平台在线模拟器调试\"><a href=\"#第三方平台在线模拟器调试\" class=\"headerlink\" title=\"第三方平台在线模拟器调试\"></a>第三方平台在线模拟器调试</h1><p>第三方开发的平台比较方便，功能也相当强大，对于一些需要完善测试的，其实使用第三方的平台还是比较方便的。<br>这里我就推荐几个比较有名的第三方平台：</p>\n<ul>\n<li><a href=\"https://www.browserstack.com/\" target=\"_blank\" rel=\"noopener\">BrowserStack</a></li>\n<li><a href=\"http://www.keynote.com/\" target=\"_blank\" rel=\"noopener\">Keynote</a></li>\n<li><a href=\"http://browsershots.org/\" target=\"_blank\" rel=\"noopener\">BrowserShots</a></li>\n<li><a href=\"http://www.browsera.com/\" target=\"_blank\" rel=\"noopener\">Browsera</a></li>\n<li><a href=\"http://www.vanamco.com/ghostlab/\" target=\"_blank\" rel=\"noopener\">Ghostlab</a><br>等等…</li>\n</ul>\n<p><strong>下面介绍一些我比较喜欢的一些远程调试工具。</strong></p>\n<h1 id=\"Weinre\"><a href=\"#Weinre\" class=\"headerlink\" title=\"Weinre\"></a>Weinre</h1><p>之前微信开发工具中的远程调试也是基于这个开发的。<br>安装方法很简单快捷。<br>安装 Weinre：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g weinre</span><br></pre></td></tr></table></figure></p>\n<p>安装完成之后，输入指令启动：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">weinre --httpPort 8081 --boundHost -all-</span><br></pre></td></tr></table></figure></p>\n<p>显示如下则启动成功。<br><img src=\"/images/QQ截图20161229154152.png\" alt=\"\"><br>此时我们访问地址：<code>http://localhost:8081/</code> 会显示下图：<br><img src=\"/images/QQ截图20161229154809.png\" alt=\"\"><br>在页面中也有提供几种方案，在你的项目中添加对应的js。例如：<code>&lt;script src=&quot;http://192.168.55.23:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;</code><br>随后便可以通过PC访问<code>http://192.168.55.23:8081/client/#anonymous</code>就可以看到手机上访问的项目页面了。<br><img src=\"/images/QQ截图20161229160034.png\" alt=\"\"></p>\n<h1 id=\"代理应用\"><a href=\"#代理应用\" class=\"headerlink\" title=\"代理应用\"></a>代理应用</h1><p>这类代理应用实际上是用于抓包的，但是比起Weinre是基于开发者自身开发测试的。如果我们想要去获取其他网站的一些资源，例如http请求，或则一些js源码等。这时候使用代理工具比较合适。<br>mac下常使用的是<a href=\"https://www.charlesproxy.com/\" target=\"_blank\" rel=\"noopener\">Charles</a>,windows环境下可以用<a href=\"http://www.telerik.com/fiddler\" target=\"_blank\" rel=\"noopener\">Fiddler</a><br>默认开启的是8888端口。在手机上设置一个网络代理即可，这个不多详细介绍了。</p>\n<h1 id=\"BrowserSync\"><a href=\"#BrowserSync\" class=\"headerlink\" title=\"BrowserSync\"></a><a href=\"https://browsersync.io/\" target=\"_blank\" rel=\"noopener\">BrowserSync</a></h1><p>这是一个很强大的多终端测试工具，它可以跨设备同步操作行为，还可以监听你的文件，在文件修改时自动刷新所有设备中页面。<br><a href=\"https://browsersync.io/\" target=\"_blank\" rel=\"noopener\">BrowserSync官方网站</a><br>也可以通过npm全局安装<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g browser-sync</span><br></pre></td></tr></table></figure></p>\n<p>随后进入项目根目录下<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">browser-sync start --files &quot;*.*&quot;</span><br><span class=\"line\">// 意思为监听当前目录下所有改动</span><br></pre></td></tr></table></figure></p>\n<p>终端中若显示如下，则启动成功：<br><img src=\"http://7xoxxe.com1.z0.glb.clouddn.com/bs.png\" alt=\"\"><br>终端中显示默认访问地址：<code>http://localhost:3001</code> 则可直接进入到控制台界面。<br>之后和weinre类似，也是添加一段js在自己的项目底下。<br>BrowserSync还可以和gulp以及webpack搭配使用，详细的可以看官方文档。</p>\n<h1 id=\"真机测试\"><a href=\"#真机测试\" class=\"headerlink\" title=\"真机测试\"></a>真机测试</h1><p>真机测试是一概而论的说法。由于像ios系统本身就提供了一些对前端十分友好的开发者工具。<br>例如，Safari浏览器自带的开发者工具，或则xcode也有测试的方法，这里我局限性比较高，有这方面条件的是可以去搜罗一下相关的方法。<br>再者，PhoneGap也是有调试工具的，只不过需要安装它测试app。<br>这也是一种方法，不过个人还是偏爱Weinre或则BrowserSync的测试工具。</p>\n<p>以上。是我整理的一些移动端测试的方法。欢迎补充~</p>\n"},{"title":"【Web移动端】web移动端软键盘状态","date":"2017-01-18T10:10:54.000Z","_content":"如今各种移动端设备盛行，虽然现在移动端开发已经非常通用和成熟，但是在开发过程中，还是经常遇到各种神奇的问题，在这里对于移动端web开发遇到的一些问题进行一一整理。\n对于移动端设备上的软键盘，在某些时候，会成为页面的一部分，并且不同型号的设备的软键盘对于Html布局的实现也有些不同。\n比如ios设备对于从下方推出键盘的时候，如果输入控件在页面推出之后，在键盘的高度的上方的话，则键盘是以一个浮层的方式弹出，并且将那个触发的控件推到键盘的上方。如果那个控件在页面底部，如果推出的键盘会覆盖该控件，系统会将整个页面向上推，直到将那个控件推到键盘上方为止。而android的实现的不同，有部分的android的实现和ios一样，有些android的机型的实现却不同，如果发现触发的input控件比键盘的高度底的时候，会自动将整个document的高度增加，增加到这个控件的高度超过键盘的高度为止。\n随后，在判断软键盘是否打开关闭的状态时，因为这两种展现方法的不同，我大概搜罗出可能的解决办法（没有测试全部机型）：\n# 软键盘打开，整个页面向上滑动\n这种在ios系统里面比较常见，这类的基本上可以通过js的blur的方式来获取事件。\n```\n$(\".input-content input\").on(\"blur\",function(){\n\t//键盘关闭事件 \n})\n```\n# 软键盘覆盖元素\n这种情况在ios和android中都有出现，这类的设备，可以通过检测窗口变化来识别\n```\nvar wHeight = window.innerHeight;//获取初始可视窗口高度  \nwindow.addEventListener('resize', function(){//监测窗口大小的变化事件  \n  var hh = window.innerHeight;//当前可视窗口高度  \n  var viewTop = $(window).scrollTop();//可视窗口高度顶部距离网页顶部的距离  \n  if(wHeight > hh){\n  \t//可以作为虚拟键盘弹出事件  \n  }else{\n  \t//可以作为虚拟键盘关闭事件  \n  }  \n  wHeight = hh;  \n});\n```\n# 通用方法\n```\nvar flag = false;\nvar wHeight = window.innerHeight;\nwindow.addEventListener('resize', function(){\n    var hh = window.innerHeight; \n    var viewTop = $(window).scrollTop();\n    if(wHeight > hh){\n        flag = false;\n    }else{\n        if(!flag){\n            alert($(\".input-content input\").val());\n            flag = true;\n        }else{\n            return;\n        }\n    }  \n    wHeight = hh;  \n});\n$(\".input-content input\").on(\"blur\",function(){\n    if(!flag){\n        alert($(\".input-content input\").val());\n        flag = true;\n    }else{\n        return;\n    }\n}).on(\"focus\", function(){\n    flag = false;\n});\n```","source":"_posts/【Web移动端】web移动端软键盘状态.md","raw":"---\ntitle: 【Web移动端】web移动端软键盘状态\ndate: 2017-01-18 18:10:54\ntags: [Web移动端,Javascript]\ncategories: [Javascript]\n---\n如今各种移动端设备盛行，虽然现在移动端开发已经非常通用和成熟，但是在开发过程中，还是经常遇到各种神奇的问题，在这里对于移动端web开发遇到的一些问题进行一一整理。\n对于移动端设备上的软键盘，在某些时候，会成为页面的一部分，并且不同型号的设备的软键盘对于Html布局的实现也有些不同。\n比如ios设备对于从下方推出键盘的时候，如果输入控件在页面推出之后，在键盘的高度的上方的话，则键盘是以一个浮层的方式弹出，并且将那个触发的控件推到键盘的上方。如果那个控件在页面底部，如果推出的键盘会覆盖该控件，系统会将整个页面向上推，直到将那个控件推到键盘上方为止。而android的实现的不同，有部分的android的实现和ios一样，有些android的机型的实现却不同，如果发现触发的input控件比键盘的高度底的时候，会自动将整个document的高度增加，增加到这个控件的高度超过键盘的高度为止。\n随后，在判断软键盘是否打开关闭的状态时，因为这两种展现方法的不同，我大概搜罗出可能的解决办法（没有测试全部机型）：\n# 软键盘打开，整个页面向上滑动\n这种在ios系统里面比较常见，这类的基本上可以通过js的blur的方式来获取事件。\n```\n$(\".input-content input\").on(\"blur\",function(){\n\t//键盘关闭事件 \n})\n```\n# 软键盘覆盖元素\n这种情况在ios和android中都有出现，这类的设备，可以通过检测窗口变化来识别\n```\nvar wHeight = window.innerHeight;//获取初始可视窗口高度  \nwindow.addEventListener('resize', function(){//监测窗口大小的变化事件  \n  var hh = window.innerHeight;//当前可视窗口高度  \n  var viewTop = $(window).scrollTop();//可视窗口高度顶部距离网页顶部的距离  \n  if(wHeight > hh){\n  \t//可以作为虚拟键盘弹出事件  \n  }else{\n  \t//可以作为虚拟键盘关闭事件  \n  }  \n  wHeight = hh;  \n});\n```\n# 通用方法\n```\nvar flag = false;\nvar wHeight = window.innerHeight;\nwindow.addEventListener('resize', function(){\n    var hh = window.innerHeight; \n    var viewTop = $(window).scrollTop();\n    if(wHeight > hh){\n        flag = false;\n    }else{\n        if(!flag){\n            alert($(\".input-content input\").val());\n            flag = true;\n        }else{\n            return;\n        }\n    }  \n    wHeight = hh;  \n});\n$(\".input-content input\").on(\"blur\",function(){\n    if(!flag){\n        alert($(\".input-content input\").val());\n        flag = true;\n    }else{\n        return;\n    }\n}).on(\"focus\", function(){\n    flag = false;\n});\n```","slug":"【Web移动端】web移动端软键盘状态","published":1,"updated":"2017-01-18T10:47:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl61zlxc000e4jv315lx2mxd","content":"<p>如今各种移动端设备盛行，虽然现在移动端开发已经非常通用和成熟，但是在开发过程中，还是经常遇到各种神奇的问题，在这里对于移动端web开发遇到的一些问题进行一一整理。<br>对于移动端设备上的软键盘，在某些时候，会成为页面的一部分，并且不同型号的设备的软键盘对于Html布局的实现也有些不同。<br>比如ios设备对于从下方推出键盘的时候，如果输入控件在页面推出之后，在键盘的高度的上方的话，则键盘是以一个浮层的方式弹出，并且将那个触发的控件推到键盘的上方。如果那个控件在页面底部，如果推出的键盘会覆盖该控件，系统会将整个页面向上推，直到将那个控件推到键盘上方为止。而android的实现的不同，有部分的android的实现和ios一样，有些android的机型的实现却不同，如果发现触发的input控件比键盘的高度底的时候，会自动将整个document的高度增加，增加到这个控件的高度超过键盘的高度为止。<br>随后，在判断软键盘是否打开关闭的状态时，因为这两种展现方法的不同，我大概搜罗出可能的解决办法（没有测试全部机型）：</p>\n<h1 id=\"软键盘打开，整个页面向上滑动\"><a href=\"#软键盘打开，整个页面向上滑动\" class=\"headerlink\" title=\"软键盘打开，整个页面向上滑动\"></a>软键盘打开，整个页面向上滑动</h1><p>这种在ios系统里面比较常见，这类的基本上可以通过js的blur的方式来获取事件。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(&quot;.input-content input&quot;).on(&quot;blur&quot;,function()&#123;</span><br><span class=\"line\">\t//键盘关闭事件 </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"软键盘覆盖元素\"><a href=\"#软键盘覆盖元素\" class=\"headerlink\" title=\"软键盘覆盖元素\"></a>软键盘覆盖元素</h1><p>这种情况在ios和android中都有出现，这类的设备，可以通过检测窗口变化来识别<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var wHeight = window.innerHeight;//获取初始可视窗口高度  </span><br><span class=\"line\">window.addEventListener(&apos;resize&apos;, function()&#123;//监测窗口大小的变化事件  </span><br><span class=\"line\">  var hh = window.innerHeight;//当前可视窗口高度  </span><br><span class=\"line\">  var viewTop = $(window).scrollTop();//可视窗口高度顶部距离网页顶部的距离  </span><br><span class=\"line\">  if(wHeight &gt; hh)&#123;</span><br><span class=\"line\">  \t//可以作为虚拟键盘弹出事件  </span><br><span class=\"line\">  &#125;else&#123;</span><br><span class=\"line\">  \t//可以作为虚拟键盘关闭事件  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  wHeight = hh;  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"通用方法\"><a href=\"#通用方法\" class=\"headerlink\" title=\"通用方法\"></a>通用方法</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var flag = false;</span><br><span class=\"line\">var wHeight = window.innerHeight;</span><br><span class=\"line\">window.addEventListener(&apos;resize&apos;, function()&#123;</span><br><span class=\"line\">    var hh = window.innerHeight; </span><br><span class=\"line\">    var viewTop = $(window).scrollTop();</span><br><span class=\"line\">    if(wHeight &gt; hh)&#123;</span><br><span class=\"line\">        flag = false;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        if(!flag)&#123;</span><br><span class=\"line\">            alert($(&quot;.input-content input&quot;).val());</span><br><span class=\"line\">            flag = true;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    wHeight = hh;  </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(&quot;.input-content input&quot;).on(&quot;blur&quot;,function()&#123;</span><br><span class=\"line\">    if(!flag)&#123;</span><br><span class=\"line\">        alert($(&quot;.input-content input&quot;).val());</span><br><span class=\"line\">        flag = true;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).on(&quot;focus&quot;, function()&#123;</span><br><span class=\"line\">    flag = false;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>如今各种移动端设备盛行，虽然现在移动端开发已经非常通用和成熟，但是在开发过程中，还是经常遇到各种神奇的问题，在这里对于移动端web开发遇到的一些问题进行一一整理。<br>对于移动端设备上的软键盘，在某些时候，会成为页面的一部分，并且不同型号的设备的软键盘对于Html布局的实现也有些不同。<br>比如ios设备对于从下方推出键盘的时候，如果输入控件在页面推出之后，在键盘的高度的上方的话，则键盘是以一个浮层的方式弹出，并且将那个触发的控件推到键盘的上方。如果那个控件在页面底部，如果推出的键盘会覆盖该控件，系统会将整个页面向上推，直到将那个控件推到键盘上方为止。而android的实现的不同，有部分的android的实现和ios一样，有些android的机型的实现却不同，如果发现触发的input控件比键盘的高度底的时候，会自动将整个document的高度增加，增加到这个控件的高度超过键盘的高度为止。<br>随后，在判断软键盘是否打开关闭的状态时，因为这两种展现方法的不同，我大概搜罗出可能的解决办法（没有测试全部机型）：</p>\n<h1 id=\"软键盘打开，整个页面向上滑动\"><a href=\"#软键盘打开，整个页面向上滑动\" class=\"headerlink\" title=\"软键盘打开，整个页面向上滑动\"></a>软键盘打开，整个页面向上滑动</h1><p>这种在ios系统里面比较常见，这类的基本上可以通过js的blur的方式来获取事件。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(&quot;.input-content input&quot;).on(&quot;blur&quot;,function()&#123;</span><br><span class=\"line\">\t//键盘关闭事件 </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"软键盘覆盖元素\"><a href=\"#软键盘覆盖元素\" class=\"headerlink\" title=\"软键盘覆盖元素\"></a>软键盘覆盖元素</h1><p>这种情况在ios和android中都有出现，这类的设备，可以通过检测窗口变化来识别<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var wHeight = window.innerHeight;//获取初始可视窗口高度  </span><br><span class=\"line\">window.addEventListener(&apos;resize&apos;, function()&#123;//监测窗口大小的变化事件  </span><br><span class=\"line\">  var hh = window.innerHeight;//当前可视窗口高度  </span><br><span class=\"line\">  var viewTop = $(window).scrollTop();//可视窗口高度顶部距离网页顶部的距离  </span><br><span class=\"line\">  if(wHeight &gt; hh)&#123;</span><br><span class=\"line\">  \t//可以作为虚拟键盘弹出事件  </span><br><span class=\"line\">  &#125;else&#123;</span><br><span class=\"line\">  \t//可以作为虚拟键盘关闭事件  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  wHeight = hh;  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"通用方法\"><a href=\"#通用方法\" class=\"headerlink\" title=\"通用方法\"></a>通用方法</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var flag = false;</span><br><span class=\"line\">var wHeight = window.innerHeight;</span><br><span class=\"line\">window.addEventListener(&apos;resize&apos;, function()&#123;</span><br><span class=\"line\">    var hh = window.innerHeight; </span><br><span class=\"line\">    var viewTop = $(window).scrollTop();</span><br><span class=\"line\">    if(wHeight &gt; hh)&#123;</span><br><span class=\"line\">        flag = false;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        if(!flag)&#123;</span><br><span class=\"line\">            alert($(&quot;.input-content input&quot;).val());</span><br><span class=\"line\">            flag = true;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    wHeight = hh;  </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(&quot;.input-content input&quot;).on(&quot;blur&quot;,function()&#123;</span><br><span class=\"line\">    if(!flag)&#123;</span><br><span class=\"line\">        alert($(&quot;.input-content input&quot;).val());</span><br><span class=\"line\">        flag = true;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).on(&quot;focus&quot;, function()&#123;</span><br><span class=\"line\">    flag = false;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>"},{"title":"【接粽子】小游戏 Made With CreateJs","date":"2016-10-21T08:55:05.000Z","_content":"\n# 简介\n制作的一款类似于接金币一类的小游戏。公司为了在端午节做宣传用的。\n\n一款好的游戏离不开好的设计，在此先给亲爱的设计妹纸点个赞~ (❁'▽'❁)\n\n游戏效果如下：\n\n![](/images/808279392447213144-576x1024.jpg)\n\n第一次尝试用createJs框架去搭建H5游戏，确实比起以前自己用canvas写的要方面很多，也流畅了不少。\n# Demo\n在微信上发布的游戏，请用微信扫码查看：\n\n![](http://pan.baidu.com/share/qrcode?w=150&amp;h=150&amp;url=http://v.mob.com/wechat/catchzongzi/index.php)\n# 源码\ngithub：https://github.com/MJPiero/catchzongzi\n\n另外也在github上分享了源码。说实话本人对于我写的不算满意，因为…… 用了太多愚蠢的方法，不过当时时间有点赶，就没有花太多时间去优化。也希望大家能提出更好的优化方法来。大家一起学习一起奋进嘞嘿！！！！","source":"_posts/【接粽子】小游戏-Made-With-CreateJs.md","raw":"---\ntitle: 【接粽子】小游戏 Made With CreateJs\ntags: [mywork, canvas, h5game]\ncategories: [mywork]\ndate: 2016-10-21 16:55:05\n---\n\n# 简介\n制作的一款类似于接金币一类的小游戏。公司为了在端午节做宣传用的。\n\n一款好的游戏离不开好的设计，在此先给亲爱的设计妹纸点个赞~ (❁'▽'❁)\n\n游戏效果如下：\n\n![](/images/808279392447213144-576x1024.jpg)\n\n第一次尝试用createJs框架去搭建H5游戏，确实比起以前自己用canvas写的要方面很多，也流畅了不少。\n# Demo\n在微信上发布的游戏，请用微信扫码查看：\n\n![](http://pan.baidu.com/share/qrcode?w=150&amp;h=150&amp;url=http://v.mob.com/wechat/catchzongzi/index.php)\n# 源码\ngithub：https://github.com/MJPiero/catchzongzi\n\n另外也在github上分享了源码。说实话本人对于我写的不算满意，因为…… 用了太多愚蠢的方法，不过当时时间有点赶，就没有花太多时间去优化。也希望大家能提出更好的优化方法来。大家一起学习一起奋进嘞嘿！！！！","slug":"【接粽子】小游戏-Made-With-CreateJs","published":1,"updated":"2016-10-26T10:13:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl61zlxf000i4jv30psb6ce7","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>制作的一款类似于接金币一类的小游戏。公司为了在端午节做宣传用的。</p>\n<p>一款好的游戏离不开好的设计，在此先给亲爱的设计妹纸点个赞~ (❁’▽’❁)</p>\n<p>游戏效果如下：</p>\n<p><img src=\"/images/808279392447213144-576x1024.jpg\" alt=\"\"></p>\n<p>第一次尝试用createJs框架去搭建H5游戏，确实比起以前自己用canvas写的要方面很多，也流畅了不少。</p>\n<h1 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h1><p>在微信上发布的游戏，请用微信扫码查看：</p>\n<p><img src=\"http://pan.baidu.com/share/qrcode?w=150&amp;h=150&amp;url=http://v.mob.com/wechat/catchzongzi/index.php\" alt=\"\"></p>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><p>github：<a href=\"https://github.com/MJPiero/catchzongzi\" target=\"_blank\" rel=\"noopener\">https://github.com/MJPiero/catchzongzi</a></p>\n<p>另外也在github上分享了源码。说实话本人对于我写的不算满意，因为…… 用了太多愚蠢的方法，不过当时时间有点赶，就没有花太多时间去优化。也希望大家能提出更好的优化方法来。大家一起学习一起奋进嘞嘿！！！！</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>制作的一款类似于接金币一类的小游戏。公司为了在端午节做宣传用的。</p>\n<p>一款好的游戏离不开好的设计，在此先给亲爱的设计妹纸点个赞~ (❁’▽’❁)</p>\n<p>游戏效果如下：</p>\n<p><img src=\"/images/808279392447213144-576x1024.jpg\" alt=\"\"></p>\n<p>第一次尝试用createJs框架去搭建H5游戏，确实比起以前自己用canvas写的要方面很多，也流畅了不少。</p>\n<h1 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h1><p>在微信上发布的游戏，请用微信扫码查看：</p>\n<p><img src=\"http://pan.baidu.com/share/qrcode?w=150&amp;h=150&amp;url=http://v.mob.com/wechat/catchzongzi/index.php\" alt=\"\"></p>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><p>github：<a href=\"https://github.com/MJPiero/catchzongzi\" target=\"_blank\" rel=\"noopener\">https://github.com/MJPiero/catchzongzi</a></p>\n<p>另外也在github上分享了源码。说实话本人对于我写的不算满意，因为…… 用了太多愚蠢的方法，不过当时时间有点赶，就没有花太多时间去优化。也希望大家能提出更好的优化方法来。大家一起学习一起奋进嘞嘿！！！！</p>\n"},{"title":"兼容多种模块规范","date":"2016-12-08T04:13:38.000Z","_content":"\n我们通常需要将类库代码包装在一个闭包内，为了能兼容Node、AMD、CMD以及一些常见的浏览器环境中，我们可以使用如下的方法去包装。\n```\n;(function (name, definition) {\n\n// 检测上下文环境是否为AMD或CMD\nif (typeof define === \"function\" && ( define.amd || define.cmd ) ) {\n\n\tdefine(definition);\n\n// 检测上下文环境是否为Node\n} else if ( typeof module !== 'undefined' && module.exports ) {\n\n\tmodule.exports = definition();\n\n} else {\n\t// 将模块的执行结果在window变量中，在浏览器中this指向window对象\n\tthis[name] = definition();\n}\n})('hello', function () {\n\tvar hello = function () {};\n\treturn hello;\n});\n```","source":"_posts/兼容多种模块规范.md","raw":"---\ntitle: 兼容多种模块规范\ndate: 2016-12-08 12:13:38\ntags: [JavaScript]\ncategories: [JavaScript]\n---\n\n我们通常需要将类库代码包装在一个闭包内，为了能兼容Node、AMD、CMD以及一些常见的浏览器环境中，我们可以使用如下的方法去包装。\n```\n;(function (name, definition) {\n\n// 检测上下文环境是否为AMD或CMD\nif (typeof define === \"function\" && ( define.amd || define.cmd ) ) {\n\n\tdefine(definition);\n\n// 检测上下文环境是否为Node\n} else if ( typeof module !== 'undefined' && module.exports ) {\n\n\tmodule.exports = definition();\n\n} else {\n\t// 将模块的执行结果在window变量中，在浏览器中this指向window对象\n\tthis[name] = definition();\n}\n})('hello', function () {\n\tvar hello = function () {};\n\treturn hello;\n});\n```","slug":"兼容多种模块规范","published":1,"updated":"2018-02-04T10:57:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl61zlxh000j4jv37nffux22","content":"<p>我们通常需要将类库代码包装在一个闭包内，为了能兼容Node、AMD、CMD以及一些常见的浏览器环境中，我们可以使用如下的方法去包装。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">;(function (name, definition) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">// 检测上下文环境是否为AMD或CMD</span><br><span class=\"line\">if (typeof define === &quot;function&quot; &amp;&amp; ( define.amd || define.cmd ) ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdefine(definition);</span><br><span class=\"line\"></span><br><span class=\"line\">// 检测上下文环境是否为Node</span><br><span class=\"line\">&#125; else if ( typeof module !== &apos;undefined&apos; &amp;&amp; module.exports ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmodule.exports = definition();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">\t// 将模块的执行结果在window变量中，在浏览器中this指向window对象</span><br><span class=\"line\">\tthis[name] = definition();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)(&apos;hello&apos;, function () &#123;</span><br><span class=\"line\">\tvar hello = function () &#123;&#125;;</span><br><span class=\"line\">\treturn hello;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>我们通常需要将类库代码包装在一个闭包内，为了能兼容Node、AMD、CMD以及一些常见的浏览器环境中，我们可以使用如下的方法去包装。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">;(function (name, definition) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">// 检测上下文环境是否为AMD或CMD</span><br><span class=\"line\">if (typeof define === &quot;function&quot; &amp;&amp; ( define.amd || define.cmd ) ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdefine(definition);</span><br><span class=\"line\"></span><br><span class=\"line\">// 检测上下文环境是否为Node</span><br><span class=\"line\">&#125; else if ( typeof module !== &apos;undefined&apos; &amp;&amp; module.exports ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmodule.exports = definition();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">\t// 将模块的执行结果在window变量中，在浏览器中this指向window对象</span><br><span class=\"line\">\tthis[name] = definition();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)(&apos;hello&apos;, function () &#123;</span><br><span class=\"line\">\tvar hello = function () &#123;&#125;;</span><br><span class=\"line\">\treturn hello;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n"},{"title":"包与NPM","date":"2016-12-08T02:39:20.000Z","_content":"\n在说到NPM之前，应该先提及CommonJS的包规范。\n\nCommonJS包规范定义很简单，它是由包结构和包描述文件两个部分组成。\n\n# 包结构\n\n包结构是用于组织包中的各种文件。完全符合CommonJS规范的包目录应该包含如下文件。\n\n* package.json ———— 包描述文件。\n* bin ———— 用于存放可执行二进制文件的目录。\n* lib ———— 用于存放js代码的目录。\n* doc ———— 用于存放文档的目录。\n* test ———— 用于存放单元测试用例的代码。\n\n# 包描述文件\n\n包描述文件用于表达非代码相关的信息，它是一个JSON格式的文件（package.json），位于根目录下。\n\n这里我们就只介绍 NPM 的 package.json 文件定义了哪些必需的字段：\n\n* name ———— 项目名称。\n* version ———— 版本。在 http://semver.org/ 上有详细的定义，通常为 major.minor.revision 格式。\n* author ———— 作者。\n* description ———— 项目简介。\n* keywords ———— 关键词数组。用于NPM中做分类搜索的。\n* repository ———— 托管源代码的位置列表。示例：`{ \"type\": \"git\", \"url\": \"https://package/path\" }`\n* license ———— 当前包所使用的许可证列表。示例：`[{ \"type\": \"GPLv2\", \"url\": \"http://www.example.com/licenses/gpl.html\", }]`\n* engines ———— 指明该项目所需要的nodejs版本。\n* bugs ———— 返回bug的网页地址或则邮箱地址。\n* contributors ———— 贡献者列表。\n* scripts ———— 指定了运行脚本命令的npm命令行缩写。可以自行写好运行脚本。\n* dependencies ———— 指定了项目运行所依赖的模块。`npm install XX --save`\n* devDependencies ———— 指定项目开发所需要的模块。`npm install XX --save-dev`\n> * __波浪号（tilde）+指定版本：__比如~1.2.2，表示安装1.2.x的最新版本（不低于1.2.2），但是不安装1.3.x，也就是说安装时不改变大版本号和次要版本号。\n> * __插入号（caret）+指定版本：__比如ˆ1.2.2，表示安装1.x.x的最新版本（不低于1.2.2），但是不安装2.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。\n> * __latest：__安装最新版本。\n* peerDependencies ———— 用来供插件指定其所需要的主工具的版本（从npm 3.0版开始，peerDependencies不再会默认安装了）。\n* bin ———— 用来指定各个内部命令对应的可执行文件的位置。\n* main ———— 指定加载的入口文件。\n* config ———— 用于向环境变量输出值。示例：`{ \"port\" : \"8080\" }`，则在`server.js`脚本就可以直接引用config里的值 `http.createServer(...).listen(process.env.npm_package_config_port)`\n\n下面是express项目的package.json文件，可以参考下：\n```\n{\n\t\"name\": \"express\",\n\t\"description\": \"Sinatra inspired web development framework\",\n\t\"version\": \"3.3.4\",\n\t\"author\": \"TJ Holowaychuk <tj@vision-media.ca>\",\n\t\"contributors\": [\n\t\t{\n\t\t\t\"name\": \"TJ Holowaychuk\",\n\t\t\t\"email\": \"tj@vision-media.ca\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Aaron Heckmann\",\n\t\t\t\"email\": \"aaron.heckmann+github@gmail.com\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Ciaran Jessup\",\n\t\t\t\"email\": \"ciaranj@gmail.com\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Guillermo Rauch\",\n\t\t\t\"email\": \"rauchg@gmail.com\"\n\t\t}\n\t],\n\t\"dependencies\": {\n\t\t\"connect\": \"2.8.4\",\n\t\t\"commander\": \"1.2.0\",\n\t\t\"range-parser\": \"0.0.4\",\n\t\t\"mkdirp\": \"0.3.5\",\n\t\t\"cookie\": \"0.1.0\",\n\t\t\"buffer-crc32\": \"0.2.1\",\n\t\t\"fresh\": \"0.1.0\",\n\t\t\"methods\": \"0.0.1\",\n\t\t\"send\": \"0.1.3\",\n\t\t\"cookie-signature\": \"1.0.1\",\n\t\t\"debug\": \"*\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ejs\": \"*\",\n\t\t\"mocha\": \"*\",\n\t\t\"jade\": \"0.30.0\",\n\t\t\"hjs\": \"*\",\n\t\t\"stylus\": \"*\",\n\t\t\"should\": \"*\",\n\t\t\"connect-redis\": \"*\",\n\t\t\"marked\": \"*\",\n\t\t\"supertest\": \"0.6.0\"\n\t},\n\t\"keywords\": [\n\t\t\"express\",\n\t\t\"framework\",\n\t\t\"sinatra\",\n\t\t\"web\",\n\t\t\"rest\",\n\t\t\"restful\",\n\t\t\"router\",\n\t\t\"app\",\n\t\t\"api\"\n\t],\n\t\"repository\": \"git://github.com/visionmedia/express\",\n\t\"main\": \"index\",\n\t\"bin\": {\n\t\t\"express\": \"./bin/express\"\n\t},\n\t\"scripts\": {\n\t\t\"prepublish\": \"npm prune\",\n\t\t\"test\": \"make test\"\n\t},\n\t\"engines\": {\n\t\"node\": \"*\"\n\t}\n}\n```\n> __参考文献：__\n> - 《深入浅出Node.js》朴灵\n> - [http://javascript.ruanyifeng.com/nodejs/packagejson.html](http://javascript.ruanyifeng.com/nodejs/packagejson.html)","source":"_posts/包与NPM.md","raw":"---\ntitle: 包与NPM\ntags: [nodeJs]\ncategories: [nodeJs]\ndate: 2016-12-08 10:39:20\n---\n\n在说到NPM之前，应该先提及CommonJS的包规范。\n\nCommonJS包规范定义很简单，它是由包结构和包描述文件两个部分组成。\n\n# 包结构\n\n包结构是用于组织包中的各种文件。完全符合CommonJS规范的包目录应该包含如下文件。\n\n* package.json ———— 包描述文件。\n* bin ———— 用于存放可执行二进制文件的目录。\n* lib ———— 用于存放js代码的目录。\n* doc ———— 用于存放文档的目录。\n* test ———— 用于存放单元测试用例的代码。\n\n# 包描述文件\n\n包描述文件用于表达非代码相关的信息，它是一个JSON格式的文件（package.json），位于根目录下。\n\n这里我们就只介绍 NPM 的 package.json 文件定义了哪些必需的字段：\n\n* name ———— 项目名称。\n* version ———— 版本。在 http://semver.org/ 上有详细的定义，通常为 major.minor.revision 格式。\n* author ———— 作者。\n* description ———— 项目简介。\n* keywords ———— 关键词数组。用于NPM中做分类搜索的。\n* repository ———— 托管源代码的位置列表。示例：`{ \"type\": \"git\", \"url\": \"https://package/path\" }`\n* license ———— 当前包所使用的许可证列表。示例：`[{ \"type\": \"GPLv2\", \"url\": \"http://www.example.com/licenses/gpl.html\", }]`\n* engines ———— 指明该项目所需要的nodejs版本。\n* bugs ———— 返回bug的网页地址或则邮箱地址。\n* contributors ———— 贡献者列表。\n* scripts ———— 指定了运行脚本命令的npm命令行缩写。可以自行写好运行脚本。\n* dependencies ———— 指定了项目运行所依赖的模块。`npm install XX --save`\n* devDependencies ———— 指定项目开发所需要的模块。`npm install XX --save-dev`\n> * __波浪号（tilde）+指定版本：__比如~1.2.2，表示安装1.2.x的最新版本（不低于1.2.2），但是不安装1.3.x，也就是说安装时不改变大版本号和次要版本号。\n> * __插入号（caret）+指定版本：__比如ˆ1.2.2，表示安装1.x.x的最新版本（不低于1.2.2），但是不安装2.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。\n> * __latest：__安装最新版本。\n* peerDependencies ———— 用来供插件指定其所需要的主工具的版本（从npm 3.0版开始，peerDependencies不再会默认安装了）。\n* bin ———— 用来指定各个内部命令对应的可执行文件的位置。\n* main ———— 指定加载的入口文件。\n* config ———— 用于向环境变量输出值。示例：`{ \"port\" : \"8080\" }`，则在`server.js`脚本就可以直接引用config里的值 `http.createServer(...).listen(process.env.npm_package_config_port)`\n\n下面是express项目的package.json文件，可以参考下：\n```\n{\n\t\"name\": \"express\",\n\t\"description\": \"Sinatra inspired web development framework\",\n\t\"version\": \"3.3.4\",\n\t\"author\": \"TJ Holowaychuk <tj@vision-media.ca>\",\n\t\"contributors\": [\n\t\t{\n\t\t\t\"name\": \"TJ Holowaychuk\",\n\t\t\t\"email\": \"tj@vision-media.ca\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Aaron Heckmann\",\n\t\t\t\"email\": \"aaron.heckmann+github@gmail.com\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Ciaran Jessup\",\n\t\t\t\"email\": \"ciaranj@gmail.com\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Guillermo Rauch\",\n\t\t\t\"email\": \"rauchg@gmail.com\"\n\t\t}\n\t],\n\t\"dependencies\": {\n\t\t\"connect\": \"2.8.4\",\n\t\t\"commander\": \"1.2.0\",\n\t\t\"range-parser\": \"0.0.4\",\n\t\t\"mkdirp\": \"0.3.5\",\n\t\t\"cookie\": \"0.1.0\",\n\t\t\"buffer-crc32\": \"0.2.1\",\n\t\t\"fresh\": \"0.1.0\",\n\t\t\"methods\": \"0.0.1\",\n\t\t\"send\": \"0.1.3\",\n\t\t\"cookie-signature\": \"1.0.1\",\n\t\t\"debug\": \"*\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ejs\": \"*\",\n\t\t\"mocha\": \"*\",\n\t\t\"jade\": \"0.30.0\",\n\t\t\"hjs\": \"*\",\n\t\t\"stylus\": \"*\",\n\t\t\"should\": \"*\",\n\t\t\"connect-redis\": \"*\",\n\t\t\"marked\": \"*\",\n\t\t\"supertest\": \"0.6.0\"\n\t},\n\t\"keywords\": [\n\t\t\"express\",\n\t\t\"framework\",\n\t\t\"sinatra\",\n\t\t\"web\",\n\t\t\"rest\",\n\t\t\"restful\",\n\t\t\"router\",\n\t\t\"app\",\n\t\t\"api\"\n\t],\n\t\"repository\": \"git://github.com/visionmedia/express\",\n\t\"main\": \"index\",\n\t\"bin\": {\n\t\t\"express\": \"./bin/express\"\n\t},\n\t\"scripts\": {\n\t\t\"prepublish\": \"npm prune\",\n\t\t\"test\": \"make test\"\n\t},\n\t\"engines\": {\n\t\"node\": \"*\"\n\t}\n}\n```\n> __参考文献：__\n> - 《深入浅出Node.js》朴灵\n> - [http://javascript.ruanyifeng.com/nodejs/packagejson.html](http://javascript.ruanyifeng.com/nodejs/packagejson.html)","slug":"包与NPM","published":1,"updated":"2016-12-08T04:07:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl61zlxj000n4jv3g2tlx9be","content":"<p>在说到NPM之前，应该先提及CommonJS的包规范。</p>\n<p>CommonJS包规范定义很简单，它是由包结构和包描述文件两个部分组成。</p>\n<h1 id=\"包结构\"><a href=\"#包结构\" class=\"headerlink\" title=\"包结构\"></a>包结构</h1><p>包结构是用于组织包中的各种文件。完全符合CommonJS规范的包目录应该包含如下文件。</p>\n<ul>\n<li>package.json ———— 包描述文件。</li>\n<li>bin ———— 用于存放可执行二进制文件的目录。</li>\n<li>lib ———— 用于存放js代码的目录。</li>\n<li>doc ———— 用于存放文档的目录。</li>\n<li>test ———— 用于存放单元测试用例的代码。</li>\n</ul>\n<h1 id=\"包描述文件\"><a href=\"#包描述文件\" class=\"headerlink\" title=\"包描述文件\"></a>包描述文件</h1><p>包描述文件用于表达非代码相关的信息，它是一个JSON格式的文件（package.json），位于根目录下。</p>\n<p>这里我们就只介绍 NPM 的 package.json 文件定义了哪些必需的字段：</p>\n<ul>\n<li>name ———— 项目名称。</li>\n<li>version ———— 版本。在 <a href=\"http://semver.org/\" target=\"_blank\" rel=\"noopener\">http://semver.org/</a> 上有详细的定义，通常为 major.minor.revision 格式。</li>\n<li>author ———— 作者。</li>\n<li>description ———— 项目简介。</li>\n<li>keywords ———— 关键词数组。用于NPM中做分类搜索的。</li>\n<li>repository ———— 托管源代码的位置列表。示例：<code>{ &quot;type&quot;: &quot;git&quot;, &quot;url&quot;: &quot;https://package/path&quot; }</code></li>\n<li>license ———— 当前包所使用的许可证列表。示例：<code>[{ &quot;type&quot;: &quot;GPLv2&quot;, &quot;url&quot;: &quot;http://www.example.com/licenses/gpl.html&quot;, }]</code></li>\n<li>engines ———— 指明该项目所需要的nodejs版本。</li>\n<li>bugs ———— 返回bug的网页地址或则邮箱地址。</li>\n<li>contributors ———— 贡献者列表。</li>\n<li>scripts ———— 指定了运行脚本命令的npm命令行缩写。可以自行写好运行脚本。</li>\n<li>dependencies ———— 指定了项目运行所依赖的模块。<code>npm install XX --save</code></li>\n<li>devDependencies ———— 指定项目开发所需要的模块。<code>npm install XX --save-dev</code><blockquote>\n<ul>\n<li><strong>波浪号（tilde）+指定版本：</strong>比如~1.2.2，表示安装1.2.x的最新版本（不低于1.2.2），但是不安装1.3.x，也就是说安装时不改变大版本号和次要版本号。</li>\n<li><strong>插入号（caret）+指定版本：</strong>比如ˆ1.2.2，表示安装1.x.x的最新版本（不低于1.2.2），但是不安装2.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。</li>\n<li><strong>latest：</strong>安装最新版本。</li>\n</ul>\n</blockquote>\n</li>\n<li>peerDependencies ———— 用来供插件指定其所需要的主工具的版本（从npm 3.0版开始，peerDependencies不再会默认安装了）。</li>\n<li>bin ———— 用来指定各个内部命令对应的可执行文件的位置。</li>\n<li>main ———— 指定加载的入口文件。</li>\n<li>config ———— 用于向环境变量输出值。示例：<code>{ &quot;port&quot; : &quot;8080&quot; }</code>，则在<code>server.js</code>脚本就可以直接引用config里的值 <code>http.createServer(...).listen(process.env.npm_package_config_port)</code></li>\n</ul>\n<p>下面是express项目的package.json文件，可以参考下：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;name&quot;: &quot;express&quot;,</span><br><span class=\"line\">\t&quot;description&quot;: &quot;Sinatra inspired web development framework&quot;,</span><br><span class=\"line\">\t&quot;version&quot;: &quot;3.3.4&quot;,</span><br><span class=\"line\">\t&quot;author&quot;: &quot;TJ Holowaychuk &lt;tj@vision-media.ca&gt;&quot;,</span><br><span class=\"line\">\t&quot;contributors&quot;: [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;name&quot;: &quot;TJ Holowaychuk&quot;,</span><br><span class=\"line\">\t\t\t&quot;email&quot;: &quot;tj@vision-media.ca&quot;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;name&quot;: &quot;Aaron Heckmann&quot;,</span><br><span class=\"line\">\t\t\t&quot;email&quot;: &quot;aaron.heckmann+github@gmail.com&quot;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;name&quot;: &quot;Ciaran Jessup&quot;,</span><br><span class=\"line\">\t\t\t&quot;email&quot;: &quot;ciaranj@gmail.com&quot;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;name&quot;: &quot;Guillermo Rauch&quot;,</span><br><span class=\"line\">\t\t\t&quot;email&quot;: &quot;rauchg@gmail.com&quot;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t&quot;dependencies&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;connect&quot;: &quot;2.8.4&quot;,</span><br><span class=\"line\">\t\t&quot;commander&quot;: &quot;1.2.0&quot;,</span><br><span class=\"line\">\t\t&quot;range-parser&quot;: &quot;0.0.4&quot;,</span><br><span class=\"line\">\t\t&quot;mkdirp&quot;: &quot;0.3.5&quot;,</span><br><span class=\"line\">\t\t&quot;cookie&quot;: &quot;0.1.0&quot;,</span><br><span class=\"line\">\t\t&quot;buffer-crc32&quot;: &quot;0.2.1&quot;,</span><br><span class=\"line\">\t\t&quot;fresh&quot;: &quot;0.1.0&quot;,</span><br><span class=\"line\">\t\t&quot;methods&quot;: &quot;0.0.1&quot;,</span><br><span class=\"line\">\t\t&quot;send&quot;: &quot;0.1.3&quot;,</span><br><span class=\"line\">\t\t&quot;cookie-signature&quot;: &quot;1.0.1&quot;,</span><br><span class=\"line\">\t\t&quot;debug&quot;: &quot;*&quot;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;ejs&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;mocha&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;jade&quot;: &quot;0.30.0&quot;,</span><br><span class=\"line\">\t\t&quot;hjs&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;stylus&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;should&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;connect-redis&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;marked&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;supertest&quot;: &quot;0.6.0&quot;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;keywords&quot;: [</span><br><span class=\"line\">\t\t&quot;express&quot;,</span><br><span class=\"line\">\t\t&quot;framework&quot;,</span><br><span class=\"line\">\t\t&quot;sinatra&quot;,</span><br><span class=\"line\">\t\t&quot;web&quot;,</span><br><span class=\"line\">\t\t&quot;rest&quot;,</span><br><span class=\"line\">\t\t&quot;restful&quot;,</span><br><span class=\"line\">\t\t&quot;router&quot;,</span><br><span class=\"line\">\t\t&quot;app&quot;,</span><br><span class=\"line\">\t\t&quot;api&quot;</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t&quot;repository&quot;: &quot;git://github.com/visionmedia/express&quot;,</span><br><span class=\"line\">\t&quot;main&quot;: &quot;index&quot;,</span><br><span class=\"line\">\t&quot;bin&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;express&quot;: &quot;./bin/express&quot;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;scripts&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;prepublish&quot;: &quot;npm prune&quot;,</span><br><span class=\"line\">\t\t&quot;test&quot;: &quot;make test&quot;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;engines&quot;: &#123;</span><br><span class=\"line\">\t&quot;node&quot;: &quot;*&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong>参考文献：</strong></p>\n<ul>\n<li>《深入浅出Node.js》朴灵</li>\n<li><a href=\"http://javascript.ruanyifeng.com/nodejs/packagejson.html\" target=\"_blank\" rel=\"noopener\">http://javascript.ruanyifeng.com/nodejs/packagejson.html</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>在说到NPM之前，应该先提及CommonJS的包规范。</p>\n<p>CommonJS包规范定义很简单，它是由包结构和包描述文件两个部分组成。</p>\n<h1 id=\"包结构\"><a href=\"#包结构\" class=\"headerlink\" title=\"包结构\"></a>包结构</h1><p>包结构是用于组织包中的各种文件。完全符合CommonJS规范的包目录应该包含如下文件。</p>\n<ul>\n<li>package.json ———— 包描述文件。</li>\n<li>bin ———— 用于存放可执行二进制文件的目录。</li>\n<li>lib ———— 用于存放js代码的目录。</li>\n<li>doc ———— 用于存放文档的目录。</li>\n<li>test ———— 用于存放单元测试用例的代码。</li>\n</ul>\n<h1 id=\"包描述文件\"><a href=\"#包描述文件\" class=\"headerlink\" title=\"包描述文件\"></a>包描述文件</h1><p>包描述文件用于表达非代码相关的信息，它是一个JSON格式的文件（package.json），位于根目录下。</p>\n<p>这里我们就只介绍 NPM 的 package.json 文件定义了哪些必需的字段：</p>\n<ul>\n<li>name ———— 项目名称。</li>\n<li>version ———— 版本。在 <a href=\"http://semver.org/\" target=\"_blank\" rel=\"noopener\">http://semver.org/</a> 上有详细的定义，通常为 major.minor.revision 格式。</li>\n<li>author ———— 作者。</li>\n<li>description ———— 项目简介。</li>\n<li>keywords ———— 关键词数组。用于NPM中做分类搜索的。</li>\n<li>repository ———— 托管源代码的位置列表。示例：<code>{ &quot;type&quot;: &quot;git&quot;, &quot;url&quot;: &quot;https://package/path&quot; }</code></li>\n<li>license ———— 当前包所使用的许可证列表。示例：<code>[{ &quot;type&quot;: &quot;GPLv2&quot;, &quot;url&quot;: &quot;http://www.example.com/licenses/gpl.html&quot;, }]</code></li>\n<li>engines ———— 指明该项目所需要的nodejs版本。</li>\n<li>bugs ———— 返回bug的网页地址或则邮箱地址。</li>\n<li>contributors ———— 贡献者列表。</li>\n<li>scripts ———— 指定了运行脚本命令的npm命令行缩写。可以自行写好运行脚本。</li>\n<li>dependencies ———— 指定了项目运行所依赖的模块。<code>npm install XX --save</code></li>\n<li>devDependencies ———— 指定项目开发所需要的模块。<code>npm install XX --save-dev</code><blockquote>\n<ul>\n<li><strong>波浪号（tilde）+指定版本：</strong>比如~1.2.2，表示安装1.2.x的最新版本（不低于1.2.2），但是不安装1.3.x，也就是说安装时不改变大版本号和次要版本号。</li>\n<li><strong>插入号（caret）+指定版本：</strong>比如ˆ1.2.2，表示安装1.x.x的最新版本（不低于1.2.2），但是不安装2.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。</li>\n<li><strong>latest：</strong>安装最新版本。</li>\n</ul>\n</blockquote>\n</li>\n<li>peerDependencies ———— 用来供插件指定其所需要的主工具的版本（从npm 3.0版开始，peerDependencies不再会默认安装了）。</li>\n<li>bin ———— 用来指定各个内部命令对应的可执行文件的位置。</li>\n<li>main ———— 指定加载的入口文件。</li>\n<li>config ———— 用于向环境变量输出值。示例：<code>{ &quot;port&quot; : &quot;8080&quot; }</code>，则在<code>server.js</code>脚本就可以直接引用config里的值 <code>http.createServer(...).listen(process.env.npm_package_config_port)</code></li>\n</ul>\n<p>下面是express项目的package.json文件，可以参考下：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;name&quot;: &quot;express&quot;,</span><br><span class=\"line\">\t&quot;description&quot;: &quot;Sinatra inspired web development framework&quot;,</span><br><span class=\"line\">\t&quot;version&quot;: &quot;3.3.4&quot;,</span><br><span class=\"line\">\t&quot;author&quot;: &quot;TJ Holowaychuk &lt;tj@vision-media.ca&gt;&quot;,</span><br><span class=\"line\">\t&quot;contributors&quot;: [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;name&quot;: &quot;TJ Holowaychuk&quot;,</span><br><span class=\"line\">\t\t\t&quot;email&quot;: &quot;tj@vision-media.ca&quot;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;name&quot;: &quot;Aaron Heckmann&quot;,</span><br><span class=\"line\">\t\t\t&quot;email&quot;: &quot;aaron.heckmann+github@gmail.com&quot;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;name&quot;: &quot;Ciaran Jessup&quot;,</span><br><span class=\"line\">\t\t\t&quot;email&quot;: &quot;ciaranj@gmail.com&quot;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;name&quot;: &quot;Guillermo Rauch&quot;,</span><br><span class=\"line\">\t\t\t&quot;email&quot;: &quot;rauchg@gmail.com&quot;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t&quot;dependencies&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;connect&quot;: &quot;2.8.4&quot;,</span><br><span class=\"line\">\t\t&quot;commander&quot;: &quot;1.2.0&quot;,</span><br><span class=\"line\">\t\t&quot;range-parser&quot;: &quot;0.0.4&quot;,</span><br><span class=\"line\">\t\t&quot;mkdirp&quot;: &quot;0.3.5&quot;,</span><br><span class=\"line\">\t\t&quot;cookie&quot;: &quot;0.1.0&quot;,</span><br><span class=\"line\">\t\t&quot;buffer-crc32&quot;: &quot;0.2.1&quot;,</span><br><span class=\"line\">\t\t&quot;fresh&quot;: &quot;0.1.0&quot;,</span><br><span class=\"line\">\t\t&quot;methods&quot;: &quot;0.0.1&quot;,</span><br><span class=\"line\">\t\t&quot;send&quot;: &quot;0.1.3&quot;,</span><br><span class=\"line\">\t\t&quot;cookie-signature&quot;: &quot;1.0.1&quot;,</span><br><span class=\"line\">\t\t&quot;debug&quot;: &quot;*&quot;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;ejs&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;mocha&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;jade&quot;: &quot;0.30.0&quot;,</span><br><span class=\"line\">\t\t&quot;hjs&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;stylus&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;should&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;connect-redis&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;marked&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;supertest&quot;: &quot;0.6.0&quot;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;keywords&quot;: [</span><br><span class=\"line\">\t\t&quot;express&quot;,</span><br><span class=\"line\">\t\t&quot;framework&quot;,</span><br><span class=\"line\">\t\t&quot;sinatra&quot;,</span><br><span class=\"line\">\t\t&quot;web&quot;,</span><br><span class=\"line\">\t\t&quot;rest&quot;,</span><br><span class=\"line\">\t\t&quot;restful&quot;,</span><br><span class=\"line\">\t\t&quot;router&quot;,</span><br><span class=\"line\">\t\t&quot;app&quot;,</span><br><span class=\"line\">\t\t&quot;api&quot;</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t&quot;repository&quot;: &quot;git://github.com/visionmedia/express&quot;,</span><br><span class=\"line\">\t&quot;main&quot;: &quot;index&quot;,</span><br><span class=\"line\">\t&quot;bin&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;express&quot;: &quot;./bin/express&quot;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;scripts&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;prepublish&quot;: &quot;npm prune&quot;,</span><br><span class=\"line\">\t\t&quot;test&quot;: &quot;make test&quot;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;engines&quot;: &#123;</span><br><span class=\"line\">\t&quot;node&quot;: &quot;*&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong>参考文献：</strong></p>\n<ul>\n<li>《深入浅出Node.js》朴灵</li>\n<li><a href=\"http://javascript.ruanyifeng.com/nodejs/packagejson.html\" target=\"_blank\" rel=\"noopener\">http://javascript.ruanyifeng.com/nodejs/packagejson.html</a></li>\n</ul>\n</blockquote>\n"},{"title":"开启新世界的大门！(灬ºωº灬)","date":"2016-10-21T06:38:33.000Z","_content":"\n首先，欢迎你手残点进了此地！！！ξ( ✿＞◡❛)\n\n博主前端开发人员一枚，于今涉足行业将近2年，在之前干过漫画编辑做过网页设计，可谓上得了厅堂下得了厨房。然而水平有限，寻求志同道合人士共同学习进步。 (´∩ω∩｀)\n\n此博客内容仅仅是自己学习上的一些心得总结，并不一定是正确可取的，还希望发现BUG的小伙伴们积极指出错误！\n\n知错能改，善莫大焉。(⁰▿⁰) 还望大家文明交流，博主其实是玻璃心。(´▽`ʃ♡ƪ)","source":"_posts/开启新世界的大门！-灬ºωº灬.md","raw":"---\ntitle: 开启新世界的大门！(灬ºωº灬)\ntags: []\ncategories: []\ndate: 2016-10-21 14:38:33\n---\n\n首先，欢迎你手残点进了此地！！！ξ( ✿＞◡❛)\n\n博主前端开发人员一枚，于今涉足行业将近2年，在之前干过漫画编辑做过网页设计，可谓上得了厅堂下得了厨房。然而水平有限，寻求志同道合人士共同学习进步。 (´∩ω∩｀)\n\n此博客内容仅仅是自己学习上的一些心得总结，并不一定是正确可取的，还希望发现BUG的小伙伴们积极指出错误！\n\n知错能改，善莫大焉。(⁰▿⁰) 还望大家文明交流，博主其实是玻璃心。(´▽`ʃ♡ƪ)","slug":"开启新世界的大门！-灬ºωº灬","published":1,"updated":"2016-10-21T06:42:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl61zlxk000q4jv3sx51n5iz","content":"<p>首先，欢迎你手残点进了此地！！！ξ( ✿＞◡❛)</p>\n<p>博主前端开发人员一枚，于今涉足行业将近2年，在之前干过漫画编辑做过网页设计，可谓上得了厅堂下得了厨房。然而水平有限，寻求志同道合人士共同学习进步。 (´∩ω∩｀)</p>\n<p>此博客内容仅仅是自己学习上的一些心得总结，并不一定是正确可取的，还希望发现BUG的小伙伴们积极指出错误！</p>\n<p>知错能改，善莫大焉。(⁰▿⁰) 还望大家文明交流，博主其实是玻璃心。(´▽`ʃ♡ƪ)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先，欢迎你手残点进了此地！！！ξ( ✿＞◡❛)</p>\n<p>博主前端开发人员一枚，于今涉足行业将近2年，在之前干过漫画编辑做过网页设计，可谓上得了厅堂下得了厨房。然而水平有限，寻求志同道合人士共同学习进步。 (´∩ω∩｀)</p>\n<p>此博客内容仅仅是自己学习上的一些心得总结，并不一定是正确可取的，还希望发现BUG的小伙伴们积极指出错误！</p>\n<p>知错能改，善莫大焉。(⁰▿⁰) 还望大家文明交流，博主其实是玻璃心。(´▽`ʃ♡ƪ)</p>\n"},{"title":"解决gem install SSL 证书错误","date":"2016-10-21T08:40:10.000Z","_content":"\n这个问题我是在替换gem镜像路径的时候遇到的。\n\n详情见：[解决国内Ruby Gem Install 失败问题](http://blog2.pierrothall.com/2016/10/21/%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%86%85Ruby-Gem-Install-%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/)\n\n这个其实也折腾了我一个多小时在网上找解决办法。\n# 问题\n相信有部分的人在按照上面方法安装的时候出现了和我一样的问题：\n\n![](/images/QQ截图20160413163537.png)\n\n在网上搜索一圈之后，解释是：\n> ruby 没有包含 SSL 证书，所以 https 的链接被服务器拒绝。\n\n本来这个情况下，只要改用http路径就好了，偏偏淘宝已经停止基于HTTP协议的镜像服务了。\n\n于是我继续在网上搜了一圈，找到了如下的解决办法（来源：https://gist.github.com/fnichol/867550 ）:\n# 解决\n先下载证书 http://curl.haxx.se/ca/cacert.pem ，然后再环境变量里设置 SSL_CERT_FILE 这个环境变量，并指向 cacert.pem 文件。\n\n![](/images/QQ截图20160413165101.png)\n\n之后再在`cmd.exe`中输入命令：\n\n```\nset SSL_CERT_FILE=C:\\path\\to\\cacert.pem\n```\n之后再按照上面的方法来操作一遍~~~\n\n![](/images/QQ截图20160413165633.png)\n\nPerfect！！","source":"_posts/解决gem-install-SSL-证书错误.md","raw":"---\ntitle: 解决gem install SSL 证书错误\ntags: [环境搭建, Ruby]\ncategories: [环境搭建]\ndate: 2016-10-21 16:40:10\n---\n\n这个问题我是在替换gem镜像路径的时候遇到的。\n\n详情见：[解决国内Ruby Gem Install 失败问题](http://blog2.pierrothall.com/2016/10/21/%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%86%85Ruby-Gem-Install-%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/)\n\n这个其实也折腾了我一个多小时在网上找解决办法。\n# 问题\n相信有部分的人在按照上面方法安装的时候出现了和我一样的问题：\n\n![](/images/QQ截图20160413163537.png)\n\n在网上搜索一圈之后，解释是：\n> ruby 没有包含 SSL 证书，所以 https 的链接被服务器拒绝。\n\n本来这个情况下，只要改用http路径就好了，偏偏淘宝已经停止基于HTTP协议的镜像服务了。\n\n于是我继续在网上搜了一圈，找到了如下的解决办法（来源：https://gist.github.com/fnichol/867550 ）:\n# 解决\n先下载证书 http://curl.haxx.se/ca/cacert.pem ，然后再环境变量里设置 SSL_CERT_FILE 这个环境变量，并指向 cacert.pem 文件。\n\n![](/images/QQ截图20160413165101.png)\n\n之后再在`cmd.exe`中输入命令：\n\n```\nset SSL_CERT_FILE=C:\\path\\to\\cacert.pem\n```\n之后再按照上面的方法来操作一遍~~~\n\n![](/images/QQ截图20160413165633.png)\n\nPerfect！！","slug":"解决gem-install-SSL-证书错误","published":1,"updated":"2016-12-08T02:40:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl61zlxm000v4jv3z15dv169","content":"<p>这个问题我是在替换gem镜像路径的时候遇到的。</p>\n<p>详情见：<a href=\"http://blog2.pierrothall.com/2016/10/21/%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%86%85Ruby-Gem-Install-%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/\" target=\"_blank\" rel=\"noopener\">解决国内Ruby Gem Install 失败问题</a></p>\n<p>这个其实也折腾了我一个多小时在网上找解决办法。</p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>相信有部分的人在按照上面方法安装的时候出现了和我一样的问题：</p>\n<p><img src=\"/images/QQ截图20160413163537.png\" alt=\"\"></p>\n<p>在网上搜索一圈之后，解释是：</p>\n<blockquote>\n<p>ruby 没有包含 SSL 证书，所以 https 的链接被服务器拒绝。</p>\n</blockquote>\n<p>本来这个情况下，只要改用http路径就好了，偏偏淘宝已经停止基于HTTP协议的镜像服务了。</p>\n<p>于是我继续在网上搜了一圈，找到了如下的解决办法（来源：<a href=\"https://gist.github.com/fnichol/867550\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/fnichol/867550</a> ）:</p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><p>先下载证书 <a href=\"http://curl.haxx.se/ca/cacert.pem\" target=\"_blank\" rel=\"noopener\">http://curl.haxx.se/ca/cacert.pem</a> ，然后再环境变量里设置 SSL_CERT_FILE 这个环境变量，并指向 cacert.pem 文件。</p>\n<p><img src=\"/images/QQ截图20160413165101.png\" alt=\"\"></p>\n<p>之后再在<code>cmd.exe</code>中输入命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">set SSL_CERT_FILE=C:\\path\\to\\cacert.pem</span><br></pre></td></tr></table></figure>\n<p>之后再按照上面的方法来操作一遍~~~</p>\n<p><img src=\"/images/QQ截图20160413165633.png\" alt=\"\"></p>\n<p>Perfect！！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这个问题我是在替换gem镜像路径的时候遇到的。</p>\n<p>详情见：<a href=\"http://blog2.pierrothall.com/2016/10/21/%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%86%85Ruby-Gem-Install-%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/\" target=\"_blank\" rel=\"noopener\">解决国内Ruby Gem Install 失败问题</a></p>\n<p>这个其实也折腾了我一个多小时在网上找解决办法。</p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>相信有部分的人在按照上面方法安装的时候出现了和我一样的问题：</p>\n<p><img src=\"/images/QQ截图20160413163537.png\" alt=\"\"></p>\n<p>在网上搜索一圈之后，解释是：</p>\n<blockquote>\n<p>ruby 没有包含 SSL 证书，所以 https 的链接被服务器拒绝。</p>\n</blockquote>\n<p>本来这个情况下，只要改用http路径就好了，偏偏淘宝已经停止基于HTTP协议的镜像服务了。</p>\n<p>于是我继续在网上搜了一圈，找到了如下的解决办法（来源：<a href=\"https://gist.github.com/fnichol/867550\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/fnichol/867550</a> ）:</p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><p>先下载证书 <a href=\"http://curl.haxx.se/ca/cacert.pem\" target=\"_blank\" rel=\"noopener\">http://curl.haxx.se/ca/cacert.pem</a> ，然后再环境变量里设置 SSL_CERT_FILE 这个环境变量，并指向 cacert.pem 文件。</p>\n<p><img src=\"/images/QQ截图20160413165101.png\" alt=\"\"></p>\n<p>之后再在<code>cmd.exe</code>中输入命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">set SSL_CERT_FILE=C:\\path\\to\\cacert.pem</span><br></pre></td></tr></table></figure>\n<p>之后再按照上面的方法来操作一遍~~~</p>\n<p><img src=\"/images/QQ截图20160413165633.png\" alt=\"\"></p>\n<p>Perfect！！</p>\n"},{"title":"解决国内Ruby Gem Install 失败问题","date":"2016-10-21T06:55:48.000Z","_content":"\n做一个国内的程序员真的是很辛苦很辛苦，各种被墙，科技还怎么进步捏。好在上有政策下有对策，国内大神还是很良心的给我们提供了很多不少解决方案。\n\n淘宝团队提供了国内可以快速访问的镜像地址，官方地址：https://ruby.taobao.org/\n\n官方有详细的替换的方法，这里我也按照我的流程过一遍。\n# 安装Ruby\n首先，我的系统是win7。\n\n在window上安装Ruby，可以通过下载RubyInstaller工具（ http://rubyinstaller.org/ ）快速安装：\n\n![](/images/QQ截图20160413155659.png)\n# 替换成taobao镜像\n之后 `win+R` 键打开运行窗口，输入cmd 快速打开命令行程序。\n```\n$ gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/\n$ gem sources -l\n*** CURRENT SOURCES ***\n\nhttps://ruby.taobao.org\n# 请确保只有 ruby.taobao.org\n$ gem install rails\n```\n以上是淘宝官方的方法。很简单，然而现实总是没这么顺利…\n\n和我一样安装遇到SSL证书错误的请看这里：[解决gem install SSL 证书错误](http://blog2.pierrothall.com/2016/10/21/%E8%A7%A3%E5%86%B3gem-install-SSL-%E8%AF%81%E4%B9%A6%E9%94%99%E8%AF%AF/)","source":"_posts/解决国内Ruby-Gem-Install-失败问题.md","raw":"---\ntitle: 解决国内Ruby Gem Install 失败问题\ntags: [Ruby, 环境搭建]\ncategories: [环境搭建]\ndate: 2016-10-21 14:55:48\n---\n\n做一个国内的程序员真的是很辛苦很辛苦，各种被墙，科技还怎么进步捏。好在上有政策下有对策，国内大神还是很良心的给我们提供了很多不少解决方案。\n\n淘宝团队提供了国内可以快速访问的镜像地址，官方地址：https://ruby.taobao.org/\n\n官方有详细的替换的方法，这里我也按照我的流程过一遍。\n# 安装Ruby\n首先，我的系统是win7。\n\n在window上安装Ruby，可以通过下载RubyInstaller工具（ http://rubyinstaller.org/ ）快速安装：\n\n![](/images/QQ截图20160413155659.png)\n# 替换成taobao镜像\n之后 `win+R` 键打开运行窗口，输入cmd 快速打开命令行程序。\n```\n$ gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/\n$ gem sources -l\n*** CURRENT SOURCES ***\n\nhttps://ruby.taobao.org\n# 请确保只有 ruby.taobao.org\n$ gem install rails\n```\n以上是淘宝官方的方法。很简单，然而现实总是没这么顺利…\n\n和我一样安装遇到SSL证书错误的请看这里：[解决gem install SSL 证书错误](http://blog2.pierrothall.com/2016/10/21/%E8%A7%A3%E5%86%B3gem-install-SSL-%E8%AF%81%E4%B9%A6%E9%94%99%E8%AF%AF/)","slug":"解决国内Ruby-Gem-Install-失败问题","published":1,"updated":"2016-12-08T02:40:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl61zlxp000y4jv3sv37expd","content":"<p>做一个国内的程序员真的是很辛苦很辛苦，各种被墙，科技还怎么进步捏。好在上有政策下有对策，国内大神还是很良心的给我们提供了很多不少解决方案。</p>\n<p>淘宝团队提供了国内可以快速访问的镜像地址，官方地址：<a href=\"https://ruby.taobao.org/\" target=\"_blank\" rel=\"noopener\">https://ruby.taobao.org/</a></p>\n<p>官方有详细的替换的方法，这里我也按照我的流程过一遍。</p>\n<h1 id=\"安装Ruby\"><a href=\"#安装Ruby\" class=\"headerlink\" title=\"安装Ruby\"></a>安装Ruby</h1><p>首先，我的系统是win7。</p>\n<p>在window上安装Ruby，可以通过下载RubyInstaller工具（ <a href=\"http://rubyinstaller.org/\" target=\"_blank\" rel=\"noopener\">http://rubyinstaller.org/</a> ）快速安装：</p>\n<p><img src=\"/images/QQ截图20160413155659.png\" alt=\"\"></p>\n<h1 id=\"替换成taobao镜像\"><a href=\"#替换成taobao镜像\" class=\"headerlink\" title=\"替换成taobao镜像\"></a>替换成taobao镜像</h1><p>之后 <code>win+R</code> 键打开运行窗口，输入cmd 快速打开命令行程序。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/</span><br><span class=\"line\">$ gem sources -l</span><br><span class=\"line\">*** CURRENT SOURCES ***</span><br><span class=\"line\"></span><br><span class=\"line\">https://ruby.taobao.org</span><br><span class=\"line\"># 请确保只有 ruby.taobao.org</span><br><span class=\"line\">$ gem install rails</span><br></pre></td></tr></table></figure></p>\n<p>以上是淘宝官方的方法。很简单，然而现实总是没这么顺利…</p>\n<p>和我一样安装遇到SSL证书错误的请看这里：<a href=\"http://blog2.pierrothall.com/2016/10/21/%E8%A7%A3%E5%86%B3gem-install-SSL-%E8%AF%81%E4%B9%A6%E9%94%99%E8%AF%AF/\" target=\"_blank\" rel=\"noopener\">解决gem install SSL 证书错误</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>做一个国内的程序员真的是很辛苦很辛苦，各种被墙，科技还怎么进步捏。好在上有政策下有对策，国内大神还是很良心的给我们提供了很多不少解决方案。</p>\n<p>淘宝团队提供了国内可以快速访问的镜像地址，官方地址：<a href=\"https://ruby.taobao.org/\" target=\"_blank\" rel=\"noopener\">https://ruby.taobao.org/</a></p>\n<p>官方有详细的替换的方法，这里我也按照我的流程过一遍。</p>\n<h1 id=\"安装Ruby\"><a href=\"#安装Ruby\" class=\"headerlink\" title=\"安装Ruby\"></a>安装Ruby</h1><p>首先，我的系统是win7。</p>\n<p>在window上安装Ruby，可以通过下载RubyInstaller工具（ <a href=\"http://rubyinstaller.org/\" target=\"_blank\" rel=\"noopener\">http://rubyinstaller.org/</a> ）快速安装：</p>\n<p><img src=\"/images/QQ截图20160413155659.png\" alt=\"\"></p>\n<h1 id=\"替换成taobao镜像\"><a href=\"#替换成taobao镜像\" class=\"headerlink\" title=\"替换成taobao镜像\"></a>替换成taobao镜像</h1><p>之后 <code>win+R</code> 键打开运行窗口，输入cmd 快速打开命令行程序。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/</span><br><span class=\"line\">$ gem sources -l</span><br><span class=\"line\">*** CURRENT SOURCES ***</span><br><span class=\"line\"></span><br><span class=\"line\">https://ruby.taobao.org</span><br><span class=\"line\"># 请确保只有 ruby.taobao.org</span><br><span class=\"line\">$ gem install rails</span><br></pre></td></tr></table></figure></p>\n<p>以上是淘宝官方的方法。很简单，然而现实总是没这么顺利…</p>\n<p>和我一样安装遇到SSL证书错误的请看这里：<a href=\"http://blog2.pierrothall.com/2016/10/21/%E8%A7%A3%E5%86%B3gem-install-SSL-%E8%AF%81%E4%B9%A6%E9%94%99%E8%AF%AF/\" target=\"_blank\" rel=\"noopener\">解决gem install SSL 证书错误</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjl61zlww00004jv3lhql2f55","category_id":"cjl61zlx300044jv3f9pwkoi4","_id":"cjl61zlxe000f4jv3ugqhn2nd"},{"post_id":"cjl61zlxa000d4jv3weur3ahj","category_id":"cjl61zlx9000a4jv3l8zxhn2n","_id":"cjl61zlxi000k4jv312c6qkw8"},{"post_id":"cjl61zlx100024jv3k9ytjjzb","category_id":"cjl61zlx9000a4jv3l8zxhn2n","_id":"cjl61zlxk000o4jv3r52kcdcj"},{"post_id":"cjl61zlxf000i4jv30psb6ce7","category_id":"cjl61zlxf000g4jv3403t485w","_id":"cjl61zlxl000r4jv380epwujj"},{"post_id":"cjl61zlx500064jv3zqygzbbz","category_id":"cjl61zlxf000g4jv3403t485w","_id":"cjl61zlxm000w4jv362u5cwiv"},{"post_id":"cjl61zlx700084jv36h7qycj9","category_id":"cjl61zlxi000l4jv3xfrw5hfj","_id":"cjl61zlxq00104jv37a8m68f8"},{"post_id":"cjl61zlxm000v4jv3z15dv169","category_id":"cjl61zlx9000a4jv3l8zxhn2n","_id":"cjl61zlxr00134jv3jrwq5lfr"},{"post_id":"cjl61zlx800094jv30gcmxjpj","category_id":"cjl61zlxi000l4jv3xfrw5hfj","_id":"cjl61zlxr00144jv3kt9s1hye"},{"post_id":"cjl61zlxp000y4jv3sv37expd","category_id":"cjl61zlx9000a4jv3l8zxhn2n","_id":"cjl61zlxs00174jv3cn9bnxx3"},{"post_id":"cjl61zlxc000e4jv315lx2mxd","category_id":"cjl61zlxq000z4jv3bhwiuira","_id":"cjl61zlxs00184jv3li3vxt72"},{"post_id":"cjl61zlxh000j4jv37nffux22","category_id":"cjl61zlxr00154jv3zk0onki0","_id":"cjl61zlxt001d4jv3yrmq389s"},{"post_id":"cjl61zlxj000n4jv3g2tlx9be","category_id":"cjl61zlxt001a4jv33e90eysc","_id":"cjl61zlxu001i4jv317damk1p"}],"PostTag":[{"post_id":"cjl61zlww00004jv3lhql2f55","tag_id":"cjl61zlx400054jv3ugurwqw4","_id":"cjl61zlxa000c4jv39o3g4ycs"},{"post_id":"cjl61zlx100024jv3k9ytjjzb","tag_id":"cjl61zlx9000b4jv32paz0abo","_id":"cjl61zlxk000p4jv3dy5utnrq"},{"post_id":"cjl61zlx100024jv3k9ytjjzb","tag_id":"cjl61zlxf000h4jv3iwtxlqbm","_id":"cjl61zlxl000s4jv3dc7y0nhv"},{"post_id":"cjl61zlx500064jv3zqygzbbz","tag_id":"cjl61zlxj000m4jv3rnsmlygn","_id":"cjl61zlxo000x4jv30w2hv7jd"},{"post_id":"cjl61zlx700084jv36h7qycj9","tag_id":"cjl61zlxl000u4jv395opntgv","_id":"cjl61zlxr00124jv3mqa363eg"},{"post_id":"cjl61zlx800094jv30gcmxjpj","tag_id":"cjl61zlxl000u4jv395opntgv","_id":"cjl61zlxt001b4jv379uuhabv"},{"post_id":"cjl61zlx800094jv30gcmxjpj","tag_id":"cjl61zlx9000b4jv32paz0abo","_id":"cjl61zlxt001c4jv3f1msb424"},{"post_id":"cjl61zlxa000d4jv3weur3ahj","tag_id":"cjl61zlx9000b4jv32paz0abo","_id":"cjl61zlxu001f4jv3jxf5vx3x"},{"post_id":"cjl61zlxa000d4jv3weur3ahj","tag_id":"cjl61zlxs00194jv3lw5dqw2n","_id":"cjl61zlxu001g4jv3nmsluhxo"},{"post_id":"cjl61zlxc000e4jv315lx2mxd","tag_id":"cjl61zlxs00194jv3lw5dqw2n","_id":"cjl61zlxv001k4jv39z8nxym0"},{"post_id":"cjl61zlxc000e4jv315lx2mxd","tag_id":"cjl61zlxu001h4jv3ib1q5wbq","_id":"cjl61zlxv001l4jv3ym5yaq02"},{"post_id":"cjl61zlxf000i4jv30psb6ce7","tag_id":"cjl61zlxj000m4jv3rnsmlygn","_id":"cjl61zlxx001p4jv3fs7izemw"},{"post_id":"cjl61zlxf000i4jv30psb6ce7","tag_id":"cjl61zlxv001m4jv3fnh19faf","_id":"cjl61zlxx001q4jv33ytxj0rl"},{"post_id":"cjl61zlxf000i4jv30psb6ce7","tag_id":"cjl61zlxw001n4jv3168nphxv","_id":"cjl61zlxx001s4jv3a8qh45wl"},{"post_id":"cjl61zlxh000j4jv37nffux22","tag_id":"cjl61zlxw001o4jv3f0awmw7p","_id":"cjl61zlxx001t4jv3iemwywxp"},{"post_id":"cjl61zlxj000n4jv3g2tlx9be","tag_id":"cjl61zlxx001r4jv3q6czq4kk","_id":"cjl61zlxy001v4jv3w8x3bvzt"},{"post_id":"cjl61zlxm000v4jv3z15dv169","tag_id":"cjl61zlx9000b4jv32paz0abo","_id":"cjl61zlxy001x4jv38hj1e3pp"},{"post_id":"cjl61zlxm000v4jv3z15dv169","tag_id":"cjl61zlxx001u4jv3svjf08jr","_id":"cjl61zlxz001y4jv3geaeuw6w"},{"post_id":"cjl61zlxp000y4jv3sv37expd","tag_id":"cjl61zlxx001u4jv3svjf08jr","_id":"cjl61zlxz001z4jv3f8j4uh7j"},{"post_id":"cjl61zlxp000y4jv3sv37expd","tag_id":"cjl61zlx9000b4jv32paz0abo","_id":"cjl61zlxz00204jv3nttu4m7g"}],"Tag":[{"name":"vue","_id":"cjl61zlx400054jv3ugurwqw4"},{"name":"环境搭建","_id":"cjl61zlx9000b4jv32paz0abo"},{"name":"linux","_id":"cjl61zlxf000h4jv3iwtxlqbm"},{"name":"mywork","_id":"cjl61zlxj000m4jv3rnsmlygn"},{"name":"mongodb","_id":"cjl61zlxl000u4jv395opntgv"},{"name":"Web移动端","_id":"cjl61zlxs00194jv3lw5dqw2n"},{"name":"Javascript","_id":"cjl61zlxu001h4jv3ib1q5wbq"},{"name":"canvas","_id":"cjl61zlxv001m4jv3fnh19faf"},{"name":"h5game","_id":"cjl61zlxw001n4jv3168nphxv"},{"name":"JavaScript","_id":"cjl61zlxw001o4jv3f0awmw7p"},{"name":"nodeJs","_id":"cjl61zlxx001r4jv3q6czq4kk"},{"name":"Ruby","_id":"cjl61zlxx001u4jv3svjf08jr"}]}}