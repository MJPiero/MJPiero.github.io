{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/QQ截图20160413163537.png","path":"images/QQ截图20160413163537.png","modified":1,"renderable":0},{"_id":"source/images/QQ截图20160413165101.png","path":"images/QQ截图20160413165101.png","modified":1,"renderable":0},{"_id":"source/images/QQ截图20160413165633.png","path":"images/QQ截图20160413165633.png","modified":1,"renderable":0},{"_id":"source/images/QQ截图20160708183414.png","path":"images/QQ截图20160708183414.png","modified":1,"renderable":0},{"_id":"source/images/QQ截图20161021165145.png","path":"images/QQ截图20161021165145.png","modified":1,"renderable":0},{"_id":"source/images/QQ截图20161229154152.png","path":"images/QQ截图20161229154152.png","modified":1,"renderable":0},{"_id":"source/images/QQ截图20161229154809.png","path":"images/QQ截图20161229154809.png","modified":1,"renderable":0},{"_id":"source/images/QQ截图20161229160034.png","path":"images/QQ截图20161229160034.png","modified":1,"renderable":0},{"_id":"source/images/WechatIMG42820.png","path":"images/WechatIMG42820.png","modified":1,"renderable":0},{"_id":"source/images/WechatIMG42821.png","path":"images/WechatIMG42821.png","modified":1,"renderable":0},{"_id":"source/images/WechatIMG42823.png","path":"images/WechatIMG42823.png","modified":1,"renderable":0},{"_id":"source/images/QQ截图20161027161847.png","path":"images/QQ截图20161027161847.png","modified":1,"renderable":0},{"_id":"source/images/QQ截图20161228122836.png","path":"images/QQ截图20161228122836.png","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/images/QQ截图20160413155659.png","path":"images/QQ截图20160413155659.png","modified":1,"renderable":0},{"_id":"source/images/QQ截图20161027164200.jpg","path":"images/QQ截图20161027164200.jpg","modified":1,"renderable":0},{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/wechat.jpg","path":"img/wechat.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/main.min.js","path":"js/main.min.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/search.min.js","path":"js/search.min.js","modified":1,"renderable":1},{"_id":"source/images/QQ截图20161229151926.png","path":"images/QQ截图20161229151926.png","modified":1,"renderable":0},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/images/808279392447213144-576x1024.jpg","path":"images/808279392447213144-576x1024.jpg","modified":1,"renderable":0},{"_id":"source/images/QQ20180727-183707.gif","path":"images/QQ20180727-183707.gif","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"eff6595901da43d0f6e592fba9df19b0312df550","modified":1535006736628},{"_id":"themes/indigo/.editorconfig","hash":"9b0445427777519defe360ea38c61729d847b3d3","modified":1535007868338},{"_id":"themes/indigo/LICENSE","hash":"24944bf7920108f5a4790e6071c32e9102760c37","modified":1535007868338},{"_id":"themes/indigo/README.md","hash":"4bf26d9b43bf24b8e0a1a0d058437a347972f5e6","modified":1535007868338},{"_id":"themes/indigo/_config.yml","hash":"2ea8d15fdc565dca09de63c3878342d1b1e967b7","modified":1535010163409},{"_id":"themes/indigo/package.json","hash":"c795e3100ae3655bfa8b39adcca7333a7925b47f","modified":1535007868350},{"_id":"source/_drafts/初了解vue-vuex-这很接地气.md","hash":"be61551d41f80e90c9d33e90a7e32bfeb03ac728","modified":1534996687422},{"_id":"source/_posts/Materialize-UI-风格-WIKI-模板页.md","hash":"b5072daa6b1e34589623d64bd98bce7771a426b9","modified":1477476812000},{"_id":"source/_posts/MongoDB如何开启认证权限功能.md","hash":"c6fc468f28b37197b620ab1d2d3147a27002095a","modified":1482906260000},{"_id":"source/_posts/MongoDB添加到window服务，随服务自启动.md","hash":"055b68c1bfc712f8f130901d06f1778bdc70b1a9","modified":1489371686000},{"_id":"source/_posts/mac-使用tree命令.md","hash":"992498f617e39f3962d8c69f5fffa6c7eaa85d40","modified":1535010254898},{"_id":"source/_posts/mainifest-json.md","hash":"e5b98a9233ce81b24a3bd49f954a93ff78074291","modified":1535010529879},{"_id":"source/_posts/【Web移动端】web移动端调试大法.md","hash":"8cd455f3529a2e6c46336ad1cfd21a556d229d65","modified":1484735116000},{"_id":"source/_posts/threeJS-学习笔记-材质.md","hash":"fd6a52edcd503408904ee17f9f1dc14b3cf9c2c9","modified":1535010597998},{"_id":"source/_posts/【Web移动端】web移动端软键盘状态.md","hash":"c0cb370dc722ed1c2f2d25304ec908b809267800","modified":1534998454676},{"_id":"source/_posts/【接粽子】小游戏-Made-With-CreateJs.md","hash":"a38350a6edead98f0efa9bd3b558d89d10eaaad7","modified":1477476836000},{"_id":"source/_posts/兼容多种模块规范.md","hash":"eee193772373b0bce2103947f3c77b07e4fcbaf6","modified":1517741862000},{"_id":"source/_posts/包与NPM.md","hash":"3b17067a944a6ff95dfefbf204559e0de6dd3fc6","modified":1481170060000},{"_id":"source/_posts/开启新世界的大门！-灬ºωº灬.md","hash":"803f8e57376a362bc2349f3910ca59481730ce53","modified":1477032176000},{"_id":"source/_posts/解决gem-install-SSL-证书错误.md","hash":"26408ece8c4557f7e44785d9e1292ed0b2d869b0","modified":1481164828000},{"_id":"source/_posts/解决国内Ruby-Gem-Install-失败问题.md","hash":"88f7096c0e52942579a0229039d5273e5da9d3e7","modified":1481164814000},{"_id":"source/categories/index.md","hash":"73883c5ec527229483f10ae8edf84761c66db414","modified":1477555804000},{"_id":"source/friends/index.md","hash":"9e33bbbe3d59497ebaf1f0962a8ad393a10ef362","modified":1477555828000},{"_id":"source/images/QQ截图20160413163537.png","hash":"3e8658757fb9c787486cad9ce09dd9154b833882","modified":1477039294000},{"_id":"source/images/QQ截图20160413165101.png","hash":"fe19d2e29ae859668e49730de905c95b90e0ebcc","modified":1477039538000},{"_id":"source/images/QQ截图20160413165633.png","hash":"8b77ececb43abf120469e15a3d899527e15d05dd","modified":1477039606000},{"_id":"source/images/QQ截图20160708183414.png","hash":"dee6d07b0d2b58b17629bdf01ef32981b8d78937","modified":1477045100000},{"_id":"source/images/QQ截图20161021165145.png","hash":"8eb1f673410159fb04f21fe0e4bb93c9b5b16e26","modified":1477039920000},{"_id":"source/images/QQ截图20161229154152.png","hash":"74fe29ea0835488cea2d5b94b887da31aa44925b","modified":1482997316000},{"_id":"source/images/QQ截图20161229154809.png","hash":"0c3b9bb7f84421bfa6ec55c2e73dfdd32b8ccf2b","modified":1482997692000},{"_id":"source/images/QQ截图20161229160034.png","hash":"f73a6273910ca46d7526c93cb429d7767f678ae9","modified":1482998438000},{"_id":"source/images/WechatIMG42820.png","hash":"0ff6786e1aaaecc92c2f4011c2c28982da4a66e9","modified":1534997832494},{"_id":"source/images/WechatIMG42821.png","hash":"49dc98b9a04270ff4987dbd3396e621a937b0039","modified":1534997857219},{"_id":"source/images/WechatIMG42823.png","hash":"ecc0936120e2bc29ff1e873102ecacf2a29c2479","modified":1534997864205},{"_id":"source/tags/index.md","hash":"e6f9827430022582d655f94a083f2c5488de88ac","modified":1477555730000},{"_id":"themes/indigo/.git/HEAD","hash":"da237e0de55301608e7c572e119ab5c4e43c0e85","modified":1535007868333},{"_id":"themes/indigo/.git/config","hash":"b3b0dd7cf10d9d1f6a8a8d80c2350b993b21fd8b","modified":1535007868335},{"_id":"themes/indigo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1535007850663},{"_id":"themes/indigo/.git/index","hash":"e6147d976f5058947b46b7b3b410504fb5a8c41d","modified":1535007868381},{"_id":"themes/indigo/.git/packed-refs","hash":"8d23deb22f1c0a29dd88b28c901be181fe9862dc","modified":1535007868332},{"_id":"themes/indigo/languages/en.yml","hash":"1957d2bfc3a4cef299f4f169b431e9b1128ba162","modified":1535007868339},{"_id":"themes/indigo/languages/ja.yml","hash":"74fd480874bf5e773ba7f9d2a94697cda979091f","modified":1535007868339},{"_id":"themes/indigo/languages/nl-NL","hash":"9085c04491f93066f2369911cc2175b59ae596ad","modified":1535007868339},{"_id":"themes/indigo/languages/zh-CN.yml","hash":"7dc6ae434dde390b6768d244132e23cc78c33817","modified":1535007868339},{"_id":"themes/indigo/languages/zh-TW.yml","hash":"6a9e820be66eb12ae746f2527e0dc1adf927c685","modified":1535007868339},{"_id":"themes/indigo/layout/archive.ejs","hash":"d039719e21f6a6fa2925b00aaa623a180a78c818","modified":1535007868348},{"_id":"themes/indigo/layout/categories.ejs","hash":"41783d2069d5080566a99e6312aa2113105f8b41","modified":1535007868348},{"_id":"themes/indigo/layout/category.ejs","hash":"7ea26a8a935886963eda82f41c7bd5270cf780d9","modified":1535007868348},{"_id":"themes/indigo/layout/index.ejs","hash":"39477807b98b2d2df78f3b82498a11e90be8222c","modified":1535007868348},{"_id":"themes/indigo/layout/layout.ejs","hash":"d52f43fa9572d70cae834e4887c8897b43744805","modified":1535007868349},{"_id":"themes/indigo/layout/page.ejs","hash":"afb98face24d39a21ebbbde6592a9afc98572aa4","modified":1535007868349},{"_id":"themes/indigo/layout/post.ejs","hash":"afbf8532dc8d148ca4dff2ca127a3382907cf2f5","modified":1535007868349},{"_id":"themes/indigo/layout/tag.ejs","hash":"36786a3de7f6cad58209603f7d84ba23addea174","modified":1535007868349},{"_id":"themes/indigo/layout/tags.ejs","hash":"20466446c41409d14a3d42ccaec24a65a045efef","modified":1535007868349},{"_id":"themes/indigo/scripts/plugins.js","hash":"e439d717513616bedeed37ba9b05117470809b21","modified":1535007868350},{"_id":"source/images/QQ截图20161027161847.png","hash":"29e5fff96d27d9607654db9a9dbac6dfc8c52f53","modified":1477557736000},{"_id":"source/images/QQ截图20161228122836.png","hash":"9f64fce516c7c1815881f3cfb2a056e94e8f505f","modified":1482899320000},{"_id":"source/favicon.ico","hash":"6b285021d853c29da85b5d9c5faa628016fc9bc1","modified":1477038418000},{"_id":"source/images/QQ截图20160413155659.png","hash":"8551bf93e86587928f042d5c85cbfb8a321d3674","modified":1477034350000},{"_id":"source/images/QQ截图20161027164200.jpg","hash":"348885b7daa77dc4d957846d7f22ac3590473e80","modified":1482904156000},{"_id":"themes/indigo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1535007850664},{"_id":"themes/indigo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1535007850663},{"_id":"themes/indigo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1535007850665},{"_id":"themes/indigo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1535007850665},{"_id":"themes/indigo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1535007850664},{"_id":"themes/indigo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1535007850665},{"_id":"themes/indigo/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1535007850664},{"_id":"themes/indigo/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1535007850664},{"_id":"themes/indigo/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1535007850664},{"_id":"themes/indigo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1535007850665},{"_id":"themes/indigo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1535007850663},{"_id":"themes/indigo/.git/logs/HEAD","hash":"03484c4d6db0cee068daea3442a3f4bcbe079d92","modified":1535007868334},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"9ac30b9439fab69973cf4722dbf2945a18fd3804","modified":1535007868340},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"e1a71a30a1c7a664ddf3ba3e7eb3a5b90bc4b33c","modified":1535007868340},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"55cd81ef9183426d6d99fd91550fce0a9cc92aa0","modified":1535007868340},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"02a95a88774cc50dbcc32242b6c8ac7e9d9028bb","modified":1535007868340},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"6156bf20791e46fc1c5872113276c1c1f5c13773","modified":1535007868340},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"ec7b3ec79bbbead9c7e43e2e6c6b5c8bef509410","modified":1535007868340},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"bc4cb19b20de55a0332647f4dca9684184383685","modified":1535007868341},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"d39afaad6b0dd2a3ae27e6db3e9a6cd6014622fa","modified":1535007868341},{"_id":"themes/indigo/layout/_partial/paginator.ejs","hash":"dc27242927890f130a64400596b9b7ad5fca8972","modified":1535007868341},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"a87d9b0485b3bf4cdfdad890e5974c43dbaa8240","modified":1535007868343},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"439d6315a1b16e32b77a68c3f0cb2961d581086a","modified":1535007868347},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"c2091c621b5480ef1e69d72027028cec8e929892","modified":1535007868347},{"_id":"themes/indigo/layout/_partial/tags-bar.ejs","hash":"19eff4876d31080a427644f7a43fe172d0c008c6","modified":1535007868348},{"_id":"themes/indigo/source/css/style.less","hash":"f22d4146e0bdb4485d33f20080c67ba05724afea","modified":1535007868378},{"_id":"themes/indigo/source/img/alipay.jpg","hash":"6054d9ed2ca7cd1f645b729e05632134467d4daa","modified":1535007868379},{"_id":"themes/indigo/source/img/avatar.jpg","hash":"f25dc3a067225bfe33c160b3ef00b28ad93cb66a","modified":1535009264593},{"_id":"themes/indigo/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1535007868379},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1535007868379},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1535007868379},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1535007868380},{"_id":"themes/indigo/source/img/wechat.jpg","hash":"ef069cc9e80c7553fd60589b0727bbbf8c6de372","modified":1535007868380},{"_id":"themes/indigo/source/js/main.js","hash":"300b2e963683ced162e28afcd24ffc970fc23ac2","modified":1535007868380},{"_id":"themes/indigo/source/js/main.min.js","hash":"8acf4480f8ab859423b8926b9b790c67b5a77276","modified":1535007868380},{"_id":"themes/indigo/source/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1535007868381},{"_id":"themes/indigo/source/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1535007868381},{"_id":"source/images/QQ截图20161229151926.png","hash":"249f317d407c528cd29e9d95a987e5726fa72420","modified":1482996092000},{"_id":"themes/indigo/.git/objects/pack/pack-b8d04c6e09114566e2614fa8f4dea3c1f5bb24b8.idx","hash":"bc27ce7e6985f304faf60d78bf4e2a0ae459d0f6","modified":1535007868319},{"_id":"themes/indigo/.git/refs/heads/card","hash":"484dfa35ff9eb7a589991d8ca81ef961cd2a4ea6","modified":1535007868334},{"_id":"themes/indigo/layout/_partial/plugins/baidu.ejs","hash":"e44d526029f122e9c2c74f3a647c35002c818cbe","modified":1535007868341},{"_id":"themes/indigo/layout/_partial/plugins/disqus.ejs","hash":"4a0c01e4195f685f9825fcd016d01249dbdd52ca","modified":1535007868341},{"_id":"themes/indigo/layout/_partial/plugins/dynamic-title.ejs","hash":"23c101d45911eb0846533aaa2d409c43aa5e899a","modified":1535007868342},{"_id":"themes/indigo/layout/_partial/plugins/gitment.ejs","hash":"5723d507eca4390e8e5d18c0770e7953b8c22f5a","modified":1535007868342},{"_id":"themes/indigo/layout/_partial/plugins/google-analytics.ejs","hash":"a947f4076b54b48d4df5baf2d5b3c39b632c7576","modified":1535007868342},{"_id":"themes/indigo/layout/_partial/plugins/mathjax.ejs","hash":"ea603a057196de53bd6afab1fddb93d11f27eb81","modified":1535007868342},{"_id":"themes/indigo/layout/_partial/plugins/hyper-comments.ejs","hash":"e5a83acc7c2e385b0c9abf428e86e8fdfd3a5202","modified":1535007868342},{"_id":"themes/indigo/layout/_partial/plugins/page-visit.ejs","hash":"2decb77bf3c1a064ea6ce1d4e78892c434d9c884","modified":1535007868342},{"_id":"themes/indigo/layout/_partial/plugins/site-visit.ejs","hash":"8fbd0910828f1ab6eba728bdecc9811d623baae2","modified":1535007868343},{"_id":"themes/indigo/layout/_partial/plugins/tajs.ejs","hash":"97b48fe10be1c71d4ff25ccec3bd92d97466c9c5","modified":1535007868343},{"_id":"themes/indigo/layout/_partial/plugins/uyan.ejs","hash":"e370bd04ea5cf1c83e0c20516aff7ba3ca8b2d0b","modified":1535007868343},{"_id":"themes/indigo/layout/_partial/plugins/valine.ejs","hash":"a976ca36bd09aeb2902bf94fcc7a59975ea25148","modified":1535007868343},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c7476165721a3a5e34d00d8c5c07e1e5474cd800","modified":1535007868343},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"bcc3bd7a9023d71778f15e98c88552335ae69a69","modified":1535007868344},{"_id":"themes/indigo/layout/_partial/post/copyright.ejs","hash":"5305ed30ee35cf50f87656737d0ffe85f5bfc16b","modified":1535007868344},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"ea85b46e12d3b9c3612eef7aa76289a663fbc096","modified":1535007868344},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"b0c680ce5b8aaf461a6731b1ff1287bd140c168a","modified":1535007868344},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"11e7d504f7c7a3c4c052da13cfa8ea4862c9383e","modified":1535007868345},{"_id":"themes/indigo/layout/_partial/post/reward-btn.ejs","hash":"41c242fe3159dc68cec8dd00ab6d2663f5a51179","modified":1535007868345},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"23719e09689b3afbb19214c6603eb02f896cb9ba","modified":1535007868345},{"_id":"themes/indigo/layout/_partial/post/share-fab.ejs","hash":"93482ad7d1e01b966f5ee1c5d12b88564e02b349","modified":1535007868346},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"8df0d7bf6f8e106cdbdac2dd10a97367aa0695f8","modified":1535007868346},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"b3dc38652c4a018a37418136478dcd522fc49f79","modified":1535007868346},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"062d56cb88ae2be3a6616b911d4ebeffcbfe3cff","modified":1535007868346},{"_id":"themes/indigo/layout/_partial/post/toc.ejs","hash":"ad287a70724eb7cd8cd2a03a45b68032ee99973d","modified":1535007868347},{"_id":"themes/indigo/layout/_partial/post/updated.ejs","hash":"5caa71745aa340ce57938a930f3b898ee7518d74","modified":1535007868347},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"7d2a6886265386c640e94ffca3f042675f701a35","modified":1535007868350},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"d476cd3537bcd8a02d055cc223f5c805b8638cc2","modified":1535007868350},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"b7db31b9bc563c10b9e3cf3e6d9cfddfeb3e805a","modified":1535007868352},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"90f0948a9182c14b1dac1e9dbed3c883543266f9","modified":1535007868352},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"58492b7cdb45fe09b026b2f34e8ae69c2ddb8228","modified":1535007868352},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"4390ed22abad59c8b28ed1a479a52f15b5f9cf4a","modified":1535007868352},{"_id":"themes/indigo/source/css/_partial/lightbox.less","hash":"9b961eb1d70e7658f42cf2ca895fa5e35a6b6541","modified":1535007868353},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"f9d06a1e24fb4857fd18d7a0bfbb3a0ab2d1c742","modified":1535007868353},{"_id":"themes/indigo/source/css/_partial/page.less","hash":"e92ccb53e6ac73a51498c6a9672db9d0d2bc7f1a","modified":1535007868353},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"1c041bf91106808e5480c60d9ece45431bb503b3","modified":1535007868353},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"4857f90bb57fc22ca3f942d8934d86d5e9e82c1e","modified":1535007868354},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"2e0469ed8161d5672d903ca1a8027cd65fe007f1","modified":1535007868354},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"1d6641ae7568a0153d24beba9fd9704d2b155f6c","modified":1535007868354},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"27d80bcc96a53dd1e7eaa9a7d746e4b212357302","modified":1535007868354},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"959f4373fda6e45f6a4041a995ed3ea8a05a5170","modified":1535007868355},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"a72ecd68ade3fff72b9b30ca6469f230295b587e","modified":1535009191095},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"77bfd0b373b0469eb0176167fb076ccda4edf2a7","modified":1535007868355},{"_id":"themes/indigo/source/css/_plugin/valine.less","hash":"ddbb7647d83f732f9b0d5d817d40a748006949cc","modified":1535007868355},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"ca30b732d2efbb0cd55a272ecdabc97f895aee78","modified":1535007868351},{"_id":"themes/indigo/.git/logs/refs/heads/card","hash":"03484c4d6db0cee068daea3442a3f4bcbe079d92","modified":1535007868334},{"_id":"themes/indigo/.git/refs/remotes/origin/HEAD","hash":"7f141be72288af81f8e55d94df5da3f87101e8f1","modified":1535007868333},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1535007868366},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1535007868367},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1535007868368},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1535007868368},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1535007868370},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1535007868370},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1535007868370},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1535007868372},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1535007868372},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1535007868373},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1535007868375},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1535007868375},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1535007868376},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1535007868377},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1535007868378},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1535007868365},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1535007868366},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1535007868367},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1535007868369},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1535007868371},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1535007868374},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1535007868377},{"_id":"themes/indigo/.git/logs/refs/remotes/origin/HEAD","hash":"03484c4d6db0cee068daea3442a3f4bcbe079d92","modified":1535007868333},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1535007868357},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1535007868359},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1535007868365},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1535007868363},{"_id":"source/images/808279392447213144-576x1024.jpg","hash":"fd0c18cddaad18679786c005cb4312882f2ee156","modified":1477044464000},{"_id":"source/images/QQ20180727-183707.gif","hash":"d337b4a0e2deb79e1ff68bad16c6aa7615a29a96","modified":1534997869065},{"_id":"themes/indigo/.git/objects/pack/pack-b8d04c6e09114566e2614fa8f4dea3c1f5bb24b8.pack","hash":"ff30c6fac44de0ec07b07ce9f38d9af0a3d3855d","modified":1535007868319},{"_id":"public/atom.xml","hash":"c8cc2bf17932c84052ff5119737e8f1c6513219c","modified":1535010643903},{"_id":"public/content.json","hash":"4d53c8b20e5e3eb784a0cbb0f0460ce2e737aedc","modified":1535010644120},{"_id":"public/friends/index.html","hash":"21175db62f78d4bc24978a5b16af029665ae277f","modified":1535010644143},{"_id":"public/archives/page/2/index.html","hash":"22a873be36c4eba763aa54986928248055d810d1","modified":1535010644143},{"_id":"public/archives/2016/10/index.html","hash":"85e1becea78466b3f3ab6ab55c50583e5879b593","modified":1535010644143},{"_id":"public/archives/2016/12/index.html","hash":"cf24e2efdb4c655540b45694e429d9d479c40023","modified":1535010644143},{"_id":"public/archives/2017/index.html","hash":"24b977bf8df91f3403170bdd289ee6bdf3ff7726","modified":1535010644144},{"_id":"public/archives/2017/01/index.html","hash":"27704ddfe771fc54edf84622dcf2dc2c1feab6ef","modified":1535010644144},{"_id":"public/archives/2018/index.html","hash":"efff6e41721ff619bdfce052abb47629f6d9efcf","modified":1535010644144},{"_id":"public/archives/2018/08/index.html","hash":"a4aaf11b020aa544f00ce3dc2091ca8adde6012c","modified":1535010644144},{"_id":"public/categories/mywork/index.html","hash":"96d8db74789d5c6313ec4f7772dc49d5a5dfa64b","modified":1535010644144},{"_id":"public/categories/mongodb/index.html","hash":"62664d36b1bc00b3895720cc12f3952f200be9ce","modified":1535010644144},{"_id":"public/categories/环境搭建/index.html","hash":"77de61fe2bb9dcd92e4695709632d861ead0ef3d","modified":1535010644144},{"_id":"public/categories/JavaScript/index.html","hash":"31a9b9909bfa8bd80b3df6ddcfb4db979d71faba","modified":1535010644144},{"_id":"public/categories/threejs/index.html","hash":"0a88014397db406b5f703aa4963b79972760530e","modified":1535010644144},{"_id":"public/categories/nodeJs/index.html","hash":"7c4d76cd227d83f2ff7f87baafabd895a6f7540c","modified":1535010644144},{"_id":"public/page/2/index.html","hash":"247dd8910efc8014af85f83fd67749ce20c78555","modified":1535010644144},{"_id":"public/tags/mywork/index.html","hash":"230a56aa27e447b6883b2e92d2c81817a995b6d9","modified":1535010644145},{"_id":"public/tags/mongodb/index.html","hash":"c4e36249adf28e90f10ff145345fcab049e69024","modified":1535010644145},{"_id":"public/tags/linux/index.html","hash":"e48a1a36fa2f1ded6fca3d05f21b2ea2ef01bc15","modified":1535010644145},{"_id":"public/tags/web移动端/index.html","hash":"0e375460e373e4c07ef4fe41a9e9a8e601ee3150","modified":1535010644145},{"_id":"public/tags/缓存/index.html","hash":"6cd9ee97191ba5f0cf8db2c54762cbcd0646cd53","modified":1535010644145},{"_id":"public/tags/JavaScript/index.html","hash":"900a52e679ebe0609c844afc3fe3ee4fa1f8240c","modified":1535010644145},{"_id":"public/tags/Web移动端/index.html","hash":"26fc93e62adda80ec8d0fb39542f8bed3338f289","modified":1535010644145},{"_id":"public/tags/threejs/index.html","hash":"859c5de77721c702f7cb19bc229aa417e2ead912","modified":1535010644145},{"_id":"public/tags/canvas/index.html","hash":"e0923d420b29ee91bbc12e5fd79dd6aa87272da3","modified":1535010644145},{"_id":"public/tags/h5game/index.html","hash":"58c96ed2040574452efe680d129959ef6b7c4722","modified":1535010644145},{"_id":"public/tags/nodeJs/index.html","hash":"4f45a21f768e6caa550a27023ee5cc7271dc1c4a","modified":1535010644145},{"_id":"public/tags/Ruby/index.html","hash":"aee3f354fb2325b148198f1794f452cabd78ddc2","modified":1535010644145},{"_id":"public/categories/index.html","hash":"c25454adc4b5eb3ccad2193e837377d2f04430c9","modified":1535010644145},{"_id":"public/tags/index.html","hash":"e83678f6605cc5696cb9487d15183ca6cc88b1f1","modified":1535010644145},{"_id":"public/2018/08/23/mainifest-json/index.html","hash":"2905402f0ec06e787e4141dabfc83b648c8c1863","modified":1535010644145},{"_id":"public/2018/08/23/mac-使用tree命令/index.html","hash":"02d7fb335a4156f3f5d5e8d88b03a33ac68c1b72","modified":1535010644145},{"_id":"public/2018/08/23/threeJS-学习笔记-材质/index.html","hash":"472daf8974332e01d53147448196f6984a329713","modified":1535010644145},{"_id":"public/2017/01/18/【Web移动端】web移动端软键盘状态/index.html","hash":"3831a5a8d0a27ce905342a714dc93e8545d5a824","modified":1535010644146},{"_id":"public/2016/12/29/【Web移动端】web移动端调试大法/index.html","hash":"21a7b763bb19411ef3c97b70283720885082bed1","modified":1535010644146},{"_id":"public/2016/12/28/MongoDB如何开启认证权限功能/index.html","hash":"47609ffbedfcd367004e68c3c95623cef049db6b","modified":1535010644146},{"_id":"public/2016/12/28/MongoDB添加到window服务，随服务自启动/index.html","hash":"3d02da26f7e9d40e1270506c59f304dda8ded1dc","modified":1535010644146},{"_id":"public/2016/12/08/兼容多种模块规范/index.html","hash":"bf1a51fec1c4b5a73184ec917ca2a30d5a870326","modified":1535010644146},{"_id":"public/2016/12/08/包与NPM/index.html","hash":"ca69a4274f6534fa127be81c34e9ac0e06311b9a","modified":1535010644146},{"_id":"public/2016/10/21/Materialize-UI-风格-WIKI-模板页/index.html","hash":"d831497c20f5e0efb0dfd98bff01ae9afaf1f194","modified":1535010644146},{"_id":"public/2016/10/21/【接粽子】小游戏-Made-With-CreateJs/index.html","hash":"9bb1225f5f8902c39295fc10faf612a37f68a34b","modified":1535010644146},{"_id":"public/2016/10/21/解决gem-install-SSL-证书错误/index.html","hash":"24c501006bd3b26e6eaff2a78a036ace6ae0e7f1","modified":1535010644146},{"_id":"public/2016/10/21/解决国内Ruby-Gem-Install-失败问题/index.html","hash":"69cf6e0848a932b99131bd1fac019bb65ad7a62e","modified":1535010644146},{"_id":"public/2016/10/21/开启新世界的大门！-灬ºωº灬/index.html","hash":"e94d2ffa0b928821a81a0e10fd5af14ed3ab6a05","modified":1535010644146},{"_id":"public/archives/index.html","hash":"69046f4bcc8fbefe13aa54eaab158f2b9d386c73","modified":1535010644146},{"_id":"public/archives/2016/index.html","hash":"721e831cc26b0c79e8c0512c75bca4ef7dea33cb","modified":1535010644146},{"_id":"public/index.html","hash":"7b202ade8e62581723b1c73c66157a0a2875a66b","modified":1535010644146},{"_id":"public/tags/环境搭建/index.html","hash":"6c42bb3d56497f87acd92d1503ace2508049d444","modified":1535010644146},{"_id":"public/CNAME","hash":"eff6595901da43d0f6e592fba9df19b0312df550","modified":1535010644153},{"_id":"public/images/QQ截图20160413163537.png","hash":"3e8658757fb9c787486cad9ce09dd9154b833882","modified":1535010644153},{"_id":"public/images/QQ截图20160413165101.png","hash":"fe19d2e29ae859668e49730de905c95b90e0ebcc","modified":1535010644153},{"_id":"public/images/QQ截图20160413165633.png","hash":"8b77ececb43abf120469e15a3d899527e15d05dd","modified":1535010644153},{"_id":"public/images/QQ截图20160708183414.png","hash":"dee6d07b0d2b58b17629bdf01ef32981b8d78937","modified":1535010644153},{"_id":"public/images/QQ截图20161021165145.png","hash":"8eb1f673410159fb04f21fe0e4bb93c9b5b16e26","modified":1535010644153},{"_id":"public/images/QQ截图20161229154152.png","hash":"74fe29ea0835488cea2d5b94b887da31aa44925b","modified":1535010644154},{"_id":"public/images/QQ截图20161229154809.png","hash":"0c3b9bb7f84421bfa6ec55c2e73dfdd32b8ccf2b","modified":1535010644154},{"_id":"public/images/QQ截图20161229160034.png","hash":"f73a6273910ca46d7526c93cb429d7767f678ae9","modified":1535010644154},{"_id":"public/images/WechatIMG42820.png","hash":"0ff6786e1aaaecc92c2f4011c2c28982da4a66e9","modified":1535010644154},{"_id":"public/images/WechatIMG42821.png","hash":"49dc98b9a04270ff4987dbd3396e621a937b0039","modified":1535010644154},{"_id":"public/images/WechatIMG42823.png","hash":"ecc0936120e2bc29ff1e873102ecacf2a29c2479","modified":1535010644154},{"_id":"public/img/alipay.jpg","hash":"6054d9ed2ca7cd1f645b729e05632134467d4daa","modified":1535010644154},{"_id":"public/img/avatar.jpg","hash":"f25dc3a067225bfe33c160b3ef00b28ad93cb66a","modified":1535010644154},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1535010644154},{"_id":"public/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1535010644154},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1535010644154},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1535010644154},{"_id":"public/img/wechat.jpg","hash":"ef069cc9e80c7553fd60589b0727bbbf8c6de372","modified":1535010644154},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1535010644154},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1535010644154},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1535010644154},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1535010644155},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1535010644155},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1535010644155},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1535010644155},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1535010644155},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1535010644155},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1535010644155},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1535010644155},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1535010644155},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1535010644155},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1535010644155},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1535010644155},{"_id":"public/images/QQ截图20161027161847.png","hash":"29e5fff96d27d9607654db9a9dbac6dfc8c52f53","modified":1535010644175},{"_id":"public/images/QQ截图20161228122836.png","hash":"9f64fce516c7c1815881f3cfb2a056e94e8f505f","modified":1535010644176},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1535010644176},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1535010644176},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1535010644176},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1535010644176},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1535010644176},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1535010644176},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1535010644177},{"_id":"public/js/main.min.js","hash":"8acf4480f8ab859423b8926b9b790c67b5a77276","modified":1535010644182},{"_id":"public/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1535010644182},{"_id":"public/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1535010644182},{"_id":"public/images/QQ截图20160413155659.png","hash":"8551bf93e86587928f042d5c85cbfb8a321d3674","modified":1535010644182},{"_id":"public/images/QQ截图20161027164200.jpg","hash":"348885b7daa77dc4d957846d7f22ac3590473e80","modified":1535010644182},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1535010644182},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1535010644182},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1535010644182},{"_id":"public/images/QQ截图20161229151926.png","hash":"249f317d407c528cd29e9d95a987e5726fa72420","modified":1535010644187},{"_id":"public/js/main.js","hash":"300b2e963683ced162e28afcd24ffc970fc23ac2","modified":1535010644191},{"_id":"public/favicon.ico","hash":"6b285021d853c29da85b5d9c5faa628016fc9bc1","modified":1535010644191},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1535010644195},{"_id":"public/images/808279392447213144-576x1024.jpg","hash":"fd0c18cddaad18679786c005cb4312882f2ee156","modified":1535010644308},{"_id":"public/css/style.css","hash":"6349497b643332aaddc9b910a01c5bb79df62426","modified":1535010644512},{"_id":"public/images/QQ20180727-183707.gif","hash":"d337b4a0e2deb79e1ff68bad16c6aa7615a29a96","modified":1535010644518}],"Category":[{"name":"vue","_id":"cjl69pck10004cuv3vxs8kkje"},{"name":"mywork","_id":"cjl69pck7000acuv3ap0it9v4"},{"name":"mongodb","_id":"cjl69pckd000gcuv3q351yuzv"},{"name":"环境搭建","_id":"cjl69pckm000rcuv3tu0ezb3k"},{"name":"JavaScript","_id":"cjl69pckp000xcuv3o57f9wr2"},{"name":"threejs","_id":"cjl69pckv0019cuv3qgqu9jbo"},{"name":"nodeJs","_id":"cjl69pckx001kcuv3hwuf8bvk"}],"Data":[],"Page":[{"title":"分类","layout":"categories","noDate":true,"comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\nlayout: categories\nnoDate: true\ncomments: false\n---\n","date":"2018-08-21T13:36:30.018Z","updated":"2016-10-27T08:10:04.000Z","path":"categories/index.html","_id":"cjl69pcjx0001cuv39vz1dqr3","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Friends","layout":"friends","noDate":true,"comments":0,"_content":"","source":"friends/index.md","raw":"---\ntitle: Friends\nlayout: friends\nnoDate: true\ncomments: false\n---\n","date":"2018-08-21T13:36:30.016Z","updated":"2016-10-27T08:10:28.000Z","path":"friends/index.html","_id":"cjl69pck00003cuv3bl9qtp49","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","layout":"tags","noDate":true,"comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\nlayout: tags\nnoDate: true\ncomments: false\n---\n","date":"2018-08-21T13:36:30.015Z","updated":"2016-10-27T08:08:50.000Z","path":"tags/index.html","_id":"cjl69pck40007cuv3qo9efesw","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"初了解vue&vuex 这很接地气","date":"2017-05-22T07:35:33.000Z","_content":"\n在某个深夜，我失眠到了凌晨3点，没想别的什么，而是被这类代码占据，恨不得立刻爬起来打开电脑，洒脱的码上上万条语句，这......肯定是老大在我睡梦中督促着我要好好工作。\n\n好了言归正传。\n\n网络上对于[vuex](https://vuex.vuejs.org/zh-cn/)这套__状态管理模式__已经有不少介绍的文章了。包括小伙伴们也有写相关的分享文，对这套体系简单剖析过一遍。然而在一开始接触的时候我还是绕了不少弯子。至于为什么说接地气，因为我才接触vue和vuex三天的样子。而且我理论知识不稳固，肯定探讨不出什么高深的学术性的东西，此文只是大概介绍一下我在运用时候遇到的一些坑吧。\n# [Vue](https://cn.vuejs.org/)\n这个运用的融会贯通的人大有人在，我一个才用了三天的人就不详细说了。在这之前我一直用的angular v1.x（之后都称呼ng v1.x），之前有小哥问我为什么不用vue，当时我说了感觉vue有些不伦不类，像是ng和react的结合体。嗯，我有时候很脑残，这些话都当我没说过。\n\n很多人觉得vue和ng有很相似的地方。是不是呢，当然我没去研究ng v2.x+的框架，从ng v1.x的角度上来看，两个框架差异还是相当大的。\n\nng像是一个工厂，在ng-app内，按照不同的功能来划分体系，模块和模块之间也能通过ng的规则联系在一起。虽然也有组件化的体系，通过scope来独立区域，但是组件和组件之前有提供信息传递的方法，就像工厂里面的传送带一样，任何一个区域都可以相互传递信息（反正在我脑子里记不住那些概念，但是对于ng大概就是这么理解的）。vue则更像是一个公寓大楼。component是一间间的房间，相互独立，可以像积木一样，一层层堆积拼接。但是并没有和ng那样相对比较完善的信息传递机制。\n\n所以之前小易有问我ng v1.x有木有什么状态管理的架构。这之后我才知道的，ng v1.x应该是不需要额外的去搭建一个状态管理模式。","source":"_drafts/初了解vue-vuex-这很接地气.md","raw":"---\ntitle: 初了解vue&vuex 这很接地气\ndate: 2017-05-22 15:35:33\ntags: [vue]\ncategories: [vue]\n---\n\n在某个深夜，我失眠到了凌晨3点，没想别的什么，而是被这类代码占据，恨不得立刻爬起来打开电脑，洒脱的码上上万条语句，这......肯定是老大在我睡梦中督促着我要好好工作。\n\n好了言归正传。\n\n网络上对于[vuex](https://vuex.vuejs.org/zh-cn/)这套__状态管理模式__已经有不少介绍的文章了。包括小伙伴们也有写相关的分享文，对这套体系简单剖析过一遍。然而在一开始接触的时候我还是绕了不少弯子。至于为什么说接地气，因为我才接触vue和vuex三天的样子。而且我理论知识不稳固，肯定探讨不出什么高深的学术性的东西，此文只是大概介绍一下我在运用时候遇到的一些坑吧。\n# [Vue](https://cn.vuejs.org/)\n这个运用的融会贯通的人大有人在，我一个才用了三天的人就不详细说了。在这之前我一直用的angular v1.x（之后都称呼ng v1.x），之前有小哥问我为什么不用vue，当时我说了感觉vue有些不伦不类，像是ng和react的结合体。嗯，我有时候很脑残，这些话都当我没说过。\n\n很多人觉得vue和ng有很相似的地方。是不是呢，当然我没去研究ng v2.x+的框架，从ng v1.x的角度上来看，两个框架差异还是相当大的。\n\nng像是一个工厂，在ng-app内，按照不同的功能来划分体系，模块和模块之间也能通过ng的规则联系在一起。虽然也有组件化的体系，通过scope来独立区域，但是组件和组件之前有提供信息传递的方法，就像工厂里面的传送带一样，任何一个区域都可以相互传递信息（反正在我脑子里记不住那些概念，但是对于ng大概就是这么理解的）。vue则更像是一个公寓大楼。component是一间间的房间，相互独立，可以像积木一样，一层层堆积拼接。但是并没有和ng那样相对比较完善的信息传递机制。\n\n所以之前小易有问我ng v1.x有木有什么状态管理的架构。这之后我才知道的，ng v1.x应该是不需要额外的去搭建一个状态管理模式。","slug":"初了解vue-vuex-这很接地气","published":0,"updated":"2018-08-23T03:58:07.422Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl69pcjt0000cuv383o6o56t","content":"<p>在某个深夜，我失眠到了凌晨3点，没想别的什么，而是被这类代码占据，恨不得立刻爬起来打开电脑，洒脱的码上上万条语句，这……肯定是老大在我睡梦中督促着我要好好工作。</p>\n<p>好了言归正传。</p>\n<p>网络上对于<a href=\"https://vuex.vuejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">vuex</a>这套<strong>状态管理模式</strong>已经有不少介绍的文章了。包括小伙伴们也有写相关的分享文，对这套体系简单剖析过一遍。然而在一开始接触的时候我还是绕了不少弯子。至于为什么说接地气，因为我才接触vue和vuex三天的样子。而且我理论知识不稳固，肯定探讨不出什么高深的学术性的东西，此文只是大概介绍一下我在运用时候遇到的一些坑吧。</p>\n<h1 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a><a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">Vue</a></h1><p>这个运用的融会贯通的人大有人在，我一个才用了三天的人就不详细说了。在这之前我一直用的angular v1.x（之后都称呼ng v1.x），之前有小哥问我为什么不用vue，当时我说了感觉vue有些不伦不类，像是ng和react的结合体。嗯，我有时候很脑残，这些话都当我没说过。</p>\n<p>很多人觉得vue和ng有很相似的地方。是不是呢，当然我没去研究ng v2.x+的框架，从ng v1.x的角度上来看，两个框架差异还是相当大的。</p>\n<p>ng像是一个工厂，在ng-app内，按照不同的功能来划分体系，模块和模块之间也能通过ng的规则联系在一起。虽然也有组件化的体系，通过scope来独立区域，但是组件和组件之前有提供信息传递的方法，就像工厂里面的传送带一样，任何一个区域都可以相互传递信息（反正在我脑子里记不住那些概念，但是对于ng大概就是这么理解的）。vue则更像是一个公寓大楼。component是一间间的房间，相互独立，可以像积木一样，一层层堆积拼接。但是并没有和ng那样相对比较完善的信息传递机制。</p>\n<p>所以之前小易有问我ng v1.x有木有什么状态管理的架构。这之后我才知道的，ng v1.x应该是不需要额外的去搭建一个状态管理模式。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在某个深夜，我失眠到了凌晨3点，没想别的什么，而是被这类代码占据，恨不得立刻爬起来打开电脑，洒脱的码上上万条语句，这……肯定是老大在我睡梦中督促着我要好好工作。</p>\n<p>好了言归正传。</p>\n<p>网络上对于<a href=\"https://vuex.vuejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">vuex</a>这套<strong>状态管理模式</strong>已经有不少介绍的文章了。包括小伙伴们也有写相关的分享文，对这套体系简单剖析过一遍。然而在一开始接触的时候我还是绕了不少弯子。至于为什么说接地气，因为我才接触vue和vuex三天的样子。而且我理论知识不稳固，肯定探讨不出什么高深的学术性的东西，此文只是大概介绍一下我在运用时候遇到的一些坑吧。</p>\n<h1 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a><a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">Vue</a></h1><p>这个运用的融会贯通的人大有人在，我一个才用了三天的人就不详细说了。在这之前我一直用的angular v1.x（之后都称呼ng v1.x），之前有小哥问我为什么不用vue，当时我说了感觉vue有些不伦不类，像是ng和react的结合体。嗯，我有时候很脑残，这些话都当我没说过。</p>\n<p>很多人觉得vue和ng有很相似的地方。是不是呢，当然我没去研究ng v2.x+的框架，从ng v1.x的角度上来看，两个框架差异还是相当大的。</p>\n<p>ng像是一个工厂，在ng-app内，按照不同的功能来划分体系，模块和模块之间也能通过ng的规则联系在一起。虽然也有组件化的体系，通过scope来独立区域，但是组件和组件之前有提供信息传递的方法，就像工厂里面的传送带一样，任何一个区域都可以相互传递信息（反正在我脑子里记不住那些概念，但是对于ng大概就是这么理解的）。vue则更像是一个公寓大楼。component是一间间的房间，相互独立，可以像积木一样，一层层堆积拼接。但是并没有和ng那样相对比较完善的信息传递机制。</p>\n<p>所以之前小易有问我ng v1.x有木有什么状态管理的架构。这之后我才知道的，ng v1.x应该是不需要额外的去搭建一个状态管理模式。</p>\n"},{"title":"Materialize UI 风格 WIKI 模板页","date":"2016-10-21T10:16:56.000Z","_content":"\n# 简介\n[Materialize](http://materializecss.com/) 是基于Material Design的UI框架。\n\n使用Materialize框架制作了一个WIKI文档的模板页面。\n\n![](/images/QQ截图20160708183414.png)\n\n# 实现功能\n* 动态生成左侧栏导航\n* 生成面包屑（这个一直没找到很好的控制方法，肯定是我蠢！）\n* 【伪】templates加载（其实是想仿照做一个路由加载指定模块的功能）\n\n# 源码\ngithub:  https://github.com/MJPiero/wiki-materialize\n\n","source":"_posts/Materialize-UI-风格-WIKI-模板页.md","raw":"---\ntitle: Materialize UI 风格 WIKI 模板页\ntags: [mywork]\ncategories: [mywork]\ndate: 2016-10-21 18:16:56\n---\n\n# 简介\n[Materialize](http://materializecss.com/) 是基于Material Design的UI框架。\n\n使用Materialize框架制作了一个WIKI文档的模板页面。\n\n![](/images/QQ截图20160708183414.png)\n\n# 实现功能\n* 动态生成左侧栏导航\n* 生成面包屑（这个一直没找到很好的控制方法，肯定是我蠢！）\n* 【伪】templates加载（其实是想仿照做一个路由加载指定模块的功能）\n\n# 源码\ngithub:  https://github.com/MJPiero/wiki-materialize\n\n","slug":"Materialize-UI-风格-WIKI-模板页","published":1,"updated":"2016-10-26T10:13:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl69pcjy0002cuv3esfqytzb","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p><a href=\"http://materializecss.com/\" target=\"_blank\" rel=\"noopener\">Materialize</a> 是基于Material Design的UI框架。</p>\n<p>使用Materialize框架制作了一个WIKI文档的模板页面。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20160708183414.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h1 id=\"实现功能\"><a href=\"#实现功能\" class=\"headerlink\" title=\"实现功能\"></a>实现功能</h1><ul>\n<li>动态生成左侧栏导航</li>\n<li>生成面包屑（这个一直没找到很好的控制方法，肯定是我蠢！）</li>\n<li>【伪】templates加载（其实是想仿照做一个路由加载指定模块的功能）</li>\n</ul>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><p>github:  <a href=\"https://github.com/MJPiero/wiki-materialize\" target=\"_blank\" rel=\"noopener\">https://github.com/MJPiero/wiki-materialize</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p><a href=\"http://materializecss.com/\" target=\"_blank\" rel=\"noopener\">Materialize</a> 是基于Material Design的UI框架。</p>\n<p>使用Materialize框架制作了一个WIKI文档的模板页面。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20160708183414.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h1 id=\"实现功能\"><a href=\"#实现功能\" class=\"headerlink\" title=\"实现功能\"></a>实现功能</h1><ul>\n<li>动态生成左侧栏导航</li>\n<li>生成面包屑（这个一直没找到很好的控制方法，肯定是我蠢！）</li>\n<li>【伪】templates加载（其实是想仿照做一个路由加载指定模块的功能）</li>\n</ul>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><p>github:  <a href=\"https://github.com/MJPiero/wiki-materialize\" target=\"_blank\" rel=\"noopener\">https://github.com/MJPiero/wiki-materialize</a></p>\n"},{"title":"MongoDB如何开启认证权限功能","date":"2016-12-28T06:04:52.000Z","_content":"MongoDB预设不会开启认证权限功能（Authentication），所以任何人都可以随意连接到MongoDB的数据库。于是我们要去创建一个管理员的账号，并为其添加权限。\n# 创建新用户\n在开启MongoDB服务的情况下。执行`mongod`或则`mongod --dbpath <path to data directory>` 进入MongoDB服务。\n进入服务之后，执行：\n```\nuse admin\ndb.addUser(\"账户名称\", \"密码\")\n// 如果希望此账号只有读取的权限，则修改为\n// db.addUser(\"账户名称\", \"密码\", true)\n```\n执行完成之后，先停止MongoDB服务，在执行下面指令重新开启MongoDB服务：\n```\nmongod --auth\n```\n# 进入库\n启动完成之后，在连接上MongoDB Shell，在其中执行以下命令才可进入到admin库中：\n```\nuse admin \ndb.auth(\"账户名称\", \"密码\")\n```\n","source":"_posts/MongoDB如何开启认证权限功能.md","raw":"---\ntitle: MongoDB如何开启认证权限功能\ndate: 2016-12-28 14:04:52\ntags: [mongodb]\ncategories: [mongodb]\n---\nMongoDB预设不会开启认证权限功能（Authentication），所以任何人都可以随意连接到MongoDB的数据库。于是我们要去创建一个管理员的账号，并为其添加权限。\n# 创建新用户\n在开启MongoDB服务的情况下。执行`mongod`或则`mongod --dbpath <path to data directory>` 进入MongoDB服务。\n进入服务之后，执行：\n```\nuse admin\ndb.addUser(\"账户名称\", \"密码\")\n// 如果希望此账号只有读取的权限，则修改为\n// db.addUser(\"账户名称\", \"密码\", true)\n```\n执行完成之后，先停止MongoDB服务，在执行下面指令重新开启MongoDB服务：\n```\nmongod --auth\n```\n# 进入库\n启动完成之后，在连接上MongoDB Shell，在其中执行以下命令才可进入到admin库中：\n```\nuse admin \ndb.auth(\"账户名称\", \"密码\")\n```\n","slug":"MongoDB如何开启认证权限功能","published":1,"updated":"2016-12-28T06:24:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl69pck30006cuv3kx9328ts","content":"<p>MongoDB预设不会开启认证权限功能（Authentication），所以任何人都可以随意连接到MongoDB的数据库。于是我们要去创建一个管理员的账号，并为其添加权限。</p>\n<h1 id=\"创建新用户\"><a href=\"#创建新用户\" class=\"headerlink\" title=\"创建新用户\"></a>创建新用户</h1><p>在开启MongoDB服务的情况下。执行<code>mongod</code>或则<code>mongod --dbpath &lt;path to data directory&gt;</code> 进入MongoDB服务。<br>进入服务之后，执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use admin</span><br><span class=\"line\">db.addUser(&quot;账户名称&quot;, &quot;密码&quot;)</span><br><span class=\"line\">// 如果希望此账号只有读取的权限，则修改为</span><br><span class=\"line\">// db.addUser(&quot;账户名称&quot;, &quot;密码&quot;, true)</span><br></pre></td></tr></table></figure></p>\n<p>执行完成之后，先停止MongoDB服务，在执行下面指令重新开启MongoDB服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mongod --auth</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"进入库\"><a href=\"#进入库\" class=\"headerlink\" title=\"进入库\"></a>进入库</h1><p>启动完成之后，在连接上MongoDB Shell，在其中执行以下命令才可进入到admin库中：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use admin </span><br><span class=\"line\">db.auth(&quot;账户名称&quot;, &quot;密码&quot;)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>MongoDB预设不会开启认证权限功能（Authentication），所以任何人都可以随意连接到MongoDB的数据库。于是我们要去创建一个管理员的账号，并为其添加权限。</p>\n<h1 id=\"创建新用户\"><a href=\"#创建新用户\" class=\"headerlink\" title=\"创建新用户\"></a>创建新用户</h1><p>在开启MongoDB服务的情况下。执行<code>mongod</code>或则<code>mongod --dbpath &lt;path to data directory&gt;</code> 进入MongoDB服务。<br>进入服务之后，执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use admin</span><br><span class=\"line\">db.addUser(&quot;账户名称&quot;, &quot;密码&quot;)</span><br><span class=\"line\">// 如果希望此账号只有读取的权限，则修改为</span><br><span class=\"line\">// db.addUser(&quot;账户名称&quot;, &quot;密码&quot;, true)</span><br></pre></td></tr></table></figure></p>\n<p>执行完成之后，先停止MongoDB服务，在执行下面指令重新开启MongoDB服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mongod --auth</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"进入库\"><a href=\"#进入库\" class=\"headerlink\" title=\"进入库\"></a>进入库</h1><p>启动完成之后，在连接上MongoDB Shell，在其中执行以下命令才可进入到admin库中：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use admin </span><br><span class=\"line\">db.auth(&quot;账户名称&quot;, &quot;密码&quot;)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"MongoDB添加到window服务，随系统自启动","date":"2016-12-28T03:38:01.000Z","_content":"最近在window上安转MongoDB，记录一下遇到的一些的问题。\n# windows上安装MongoDB\n首先去官网下载Windows安装包：https://www.mongodb.org/downloads\n安装路径这里假设是安装在 `D:/soft/mongodb/`。\n安装好之后，我们可以随便在一个目录下，比如在 `D:/` 根目录下创建一个目录 `D:\\mongodb\\`，进入该目录，新建data和logs两个目录。\n然后打开控制台命令窗口（CMD），输入`D:\\soft\\mongodb\\bin` 进入到安装目录下。\n再执行：`mongod --dbpath d:/mongodb/data`，开启MongoDB服务，并将运行目录指向之前创建好的 `D:\\mongodb\\data` 下。\n打开浏览器，进入：`http://127.0.0.1:27017`（window服务默认端口27017），这时你会看到以下提示语：\n```\nYou are trying to access MongoDB on the native driver port. For http diagnostic access, add 1000 to the port number\n```\n这说明MongoDB服务已经启动了。\n# 添加MongoDB服务到windows本地服务中\n上面的方法要保证MongoDB服务运行，必须每次都要重复输入命令才能开启。为了方便在windows上开启MongoDB服务，我们需要将MongoDB服务到windows本地服务中，并且设置随系统启动开启。\n继续回到CMD中，在安装目录中（D:\\soft\\mongodb\\bin）执行：\n```\nmongod.exe --logpath d:/soft/mongodb/logs/mongodb.log --logappend --dbpath d:/soft/mongodb/data --directoryperdb --serviceName MongoDB -install --auth\n```\n> 此处注意 \"--auth\" 是将服务开启权限认证，这样别人需要账户和密码才能去访问你的数据库。\n> 如果要开启认证，需要在前期运行时要在MongoDB服务中设置好账户密码。\n> 详细方法可参考：[MongoDB如何开启认证权限功能](http://www.mjpiero.cc/2016/12/28/MongoDB%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E8%AE%A4%E8%AF%81%E6%9D%83%E9%99%90%E5%8A%9F%E8%83%BD/)\n> 如果不需要，或则选择后期再设置，可以不使用。\n\n上面执行完毕之后，会在windows服务下创建一个名为MongoDB的服务。\n执行 `net start MongoDB` 便开启MongoDB服务了。\n可以在windows的服务窗口中看见MongoDB的服务状态。\n![](/images/QQ截图20161228122836.png)\n# 删除MongoDB服务\n如果要删除MongoDB服务，首先先停止当前的MongoDB服务，这个可以去服务窗口停止。\n然后在CMD中执行：`sc delete MongoDB`\n这样之前安装的服务就会被删除。\n# 安装时遇到的一些问题\n在安装时可能遇到的一些问题：\n## Windows不能在本地计算机启动MongoDB，错误代码 100\n__解决办法：__ MongoDB安装目录\\data\\将此文件夹下的mongod.lock、storage.bson删除\n## 连接数据库时发生错误 failed to execute listdatabases command\n__解决办法：__ 在安装服务的时候开启权限认证，确定一下账户密码是否有误。\n如果是在添加服务的时候使用了\"--auth\"命令，则需要进入MongoDB服务中重新添加新的账户和密码。\n详细方法可参考：[MongoDB如何开启认证权限功能](http://www.mjpiero.cc/2016/12/28/MongoDB%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E8%AE%A4%E8%AF%81%E6%9D%83%E9%99%90%E5%8A%9F%E8%83%BD/)","source":"_posts/MongoDB添加到window服务，随服务自启动.md","raw":"---\ntitle: MongoDB添加到window服务，随系统自启动\ndate: 2016-12-28 11:38:01\ntags: [mongodb, 环境搭建]\ncategories: [mongodb]\n---\n最近在window上安转MongoDB，记录一下遇到的一些的问题。\n# windows上安装MongoDB\n首先去官网下载Windows安装包：https://www.mongodb.org/downloads\n安装路径这里假设是安装在 `D:/soft/mongodb/`。\n安装好之后，我们可以随便在一个目录下，比如在 `D:/` 根目录下创建一个目录 `D:\\mongodb\\`，进入该目录，新建data和logs两个目录。\n然后打开控制台命令窗口（CMD），输入`D:\\soft\\mongodb\\bin` 进入到安装目录下。\n再执行：`mongod --dbpath d:/mongodb/data`，开启MongoDB服务，并将运行目录指向之前创建好的 `D:\\mongodb\\data` 下。\n打开浏览器，进入：`http://127.0.0.1:27017`（window服务默认端口27017），这时你会看到以下提示语：\n```\nYou are trying to access MongoDB on the native driver port. For http diagnostic access, add 1000 to the port number\n```\n这说明MongoDB服务已经启动了。\n# 添加MongoDB服务到windows本地服务中\n上面的方法要保证MongoDB服务运行，必须每次都要重复输入命令才能开启。为了方便在windows上开启MongoDB服务，我们需要将MongoDB服务到windows本地服务中，并且设置随系统启动开启。\n继续回到CMD中，在安装目录中（D:\\soft\\mongodb\\bin）执行：\n```\nmongod.exe --logpath d:/soft/mongodb/logs/mongodb.log --logappend --dbpath d:/soft/mongodb/data --directoryperdb --serviceName MongoDB -install --auth\n```\n> 此处注意 \"--auth\" 是将服务开启权限认证，这样别人需要账户和密码才能去访问你的数据库。\n> 如果要开启认证，需要在前期运行时要在MongoDB服务中设置好账户密码。\n> 详细方法可参考：[MongoDB如何开启认证权限功能](http://www.mjpiero.cc/2016/12/28/MongoDB%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E8%AE%A4%E8%AF%81%E6%9D%83%E9%99%90%E5%8A%9F%E8%83%BD/)\n> 如果不需要，或则选择后期再设置，可以不使用。\n\n上面执行完毕之后，会在windows服务下创建一个名为MongoDB的服务。\n执行 `net start MongoDB` 便开启MongoDB服务了。\n可以在windows的服务窗口中看见MongoDB的服务状态。\n![](/images/QQ截图20161228122836.png)\n# 删除MongoDB服务\n如果要删除MongoDB服务，首先先停止当前的MongoDB服务，这个可以去服务窗口停止。\n然后在CMD中执行：`sc delete MongoDB`\n这样之前安装的服务就会被删除。\n# 安装时遇到的一些问题\n在安装时可能遇到的一些问题：\n## Windows不能在本地计算机启动MongoDB，错误代码 100\n__解决办法：__ MongoDB安装目录\\data\\将此文件夹下的mongod.lock、storage.bson删除\n## 连接数据库时发生错误 failed to execute listdatabases command\n__解决办法：__ 在安装服务的时候开启权限认证，确定一下账户密码是否有误。\n如果是在添加服务的时候使用了\"--auth\"命令，则需要进入MongoDB服务中重新添加新的账户和密码。\n详细方法可参考：[MongoDB如何开启认证权限功能](http://www.mjpiero.cc/2016/12/28/MongoDB%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E8%AE%A4%E8%AF%81%E6%9D%83%E9%99%90%E5%8A%9F%E8%83%BD/)","slug":"MongoDB添加到window服务，随服务自启动","published":1,"updated":"2017-03-13T02:21:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl69pck40008cuv3cnkm6nph","content":"<p>最近在window上安转MongoDB，记录一下遇到的一些的问题。</p>\n<h1 id=\"windows上安装MongoDB\"><a href=\"#windows上安装MongoDB\" class=\"headerlink\" title=\"windows上安装MongoDB\"></a>windows上安装MongoDB</h1><p>首先去官网下载Windows安装包：<a href=\"https://www.mongodb.org/downloads\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.org/downloads</a><br>安装路径这里假设是安装在 <code>D:/soft/mongodb/</code>。<br>安装好之后，我们可以随便在一个目录下，比如在 <code>D:/</code> 根目录下创建一个目录 <code>D:\\mongodb\\</code>，进入该目录，新建data和logs两个目录。<br>然后打开控制台命令窗口（CMD），输入<code>D:\\soft\\mongodb\\bin</code> 进入到安装目录下。<br>再执行：<code>mongod --dbpath d:/mongodb/data</code>，开启MongoDB服务，并将运行目录指向之前创建好的 <code>D:\\mongodb\\data</code> 下。<br>打开浏览器，进入：<code>http://127.0.0.1:27017</code>（window服务默认端口27017），这时你会看到以下提示语：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">You are trying to access MongoDB on the native driver port. For http diagnostic access, add 1000 to the port number</span><br></pre></td></tr></table></figure></p>\n<p>这说明MongoDB服务已经启动了。</p>\n<h1 id=\"添加MongoDB服务到windows本地服务中\"><a href=\"#添加MongoDB服务到windows本地服务中\" class=\"headerlink\" title=\"添加MongoDB服务到windows本地服务中\"></a>添加MongoDB服务到windows本地服务中</h1><p>上面的方法要保证MongoDB服务运行，必须每次都要重复输入命令才能开启。为了方便在windows上开启MongoDB服务，我们需要将MongoDB服务到windows本地服务中，并且设置随系统启动开启。<br>继续回到CMD中，在安装目录中（D:\\soft\\mongodb\\bin）执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mongod.exe --logpath d:/soft/mongodb/logs/mongodb.log --logappend --dbpath d:/soft/mongodb/data --directoryperdb --serviceName MongoDB -install --auth</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>此处注意 “–auth” 是将服务开启权限认证，这样别人需要账户和密码才能去访问你的数据库。<br>如果要开启认证，需要在前期运行时要在MongoDB服务中设置好账户密码。<br>详细方法可参考：<a href=\"http://www.mjpiero.cc/2016/12/28/MongoDB%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E8%AE%A4%E8%AF%81%E6%9D%83%E9%99%90%E5%8A%9F%E8%83%BD/\">MongoDB如何开启认证权限功能</a><br>如果不需要，或则选择后期再设置，可以不使用。</p>\n</blockquote>\n<p>上面执行完毕之后，会在windows服务下创建一个名为MongoDB的服务。<br>执行 <code>net start MongoDB</code> 便开启MongoDB服务了。<br>可以在windows的服务窗口中看见MongoDB的服务状态。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20161228122836.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h1 id=\"删除MongoDB服务\"><a href=\"#删除MongoDB服务\" class=\"headerlink\" title=\"删除MongoDB服务\"></a>删除MongoDB服务</h1><p>如果要删除MongoDB服务，首先先停止当前的MongoDB服务，这个可以去服务窗口停止。<br>然后在CMD中执行：<code>sc delete MongoDB</code><br>这样之前安装的服务就会被删除。</p>\n<h1 id=\"安装时遇到的一些问题\"><a href=\"#安装时遇到的一些问题\" class=\"headerlink\" title=\"安装时遇到的一些问题\"></a>安装时遇到的一些问题</h1><p>在安装时可能遇到的一些问题：</p>\n<h2 id=\"Windows不能在本地计算机启动MongoDB，错误代码-100\"><a href=\"#Windows不能在本地计算机启动MongoDB，错误代码-100\" class=\"headerlink\" title=\"Windows不能在本地计算机启动MongoDB，错误代码 100\"></a>Windows不能在本地计算机启动MongoDB，错误代码 100</h2><p><strong>解决办法：</strong> MongoDB安装目录\\data\\将此文件夹下的mongod.lock、storage.bson删除</p>\n<h2 id=\"连接数据库时发生错误-failed-to-execute-listdatabases-command\"><a href=\"#连接数据库时发生错误-failed-to-execute-listdatabases-command\" class=\"headerlink\" title=\"连接数据库时发生错误 failed to execute listdatabases command\"></a>连接数据库时发生错误 failed to execute listdatabases command</h2><p><strong>解决办法：</strong> 在安装服务的时候开启权限认证，确定一下账户密码是否有误。<br>如果是在添加服务的时候使用了”–auth”命令，则需要进入MongoDB服务中重新添加新的账户和密码。<br>详细方法可参考：<a href=\"http://www.mjpiero.cc/2016/12/28/MongoDB%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E8%AE%A4%E8%AF%81%E6%9D%83%E9%99%90%E5%8A%9F%E8%83%BD/\">MongoDB如何开启认证权限功能</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在window上安转MongoDB，记录一下遇到的一些的问题。</p>\n<h1 id=\"windows上安装MongoDB\"><a href=\"#windows上安装MongoDB\" class=\"headerlink\" title=\"windows上安装MongoDB\"></a>windows上安装MongoDB</h1><p>首先去官网下载Windows安装包：<a href=\"https://www.mongodb.org/downloads\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.org/downloads</a><br>安装路径这里假设是安装在 <code>D:/soft/mongodb/</code>。<br>安装好之后，我们可以随便在一个目录下，比如在 <code>D:/</code> 根目录下创建一个目录 <code>D:\\mongodb\\</code>，进入该目录，新建data和logs两个目录。<br>然后打开控制台命令窗口（CMD），输入<code>D:\\soft\\mongodb\\bin</code> 进入到安装目录下。<br>再执行：<code>mongod --dbpath d:/mongodb/data</code>，开启MongoDB服务，并将运行目录指向之前创建好的 <code>D:\\mongodb\\data</code> 下。<br>打开浏览器，进入：<code>http://127.0.0.1:27017</code>（window服务默认端口27017），这时你会看到以下提示语：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">You are trying to access MongoDB on the native driver port. For http diagnostic access, add 1000 to the port number</span><br></pre></td></tr></table></figure></p>\n<p>这说明MongoDB服务已经启动了。</p>\n<h1 id=\"添加MongoDB服务到windows本地服务中\"><a href=\"#添加MongoDB服务到windows本地服务中\" class=\"headerlink\" title=\"添加MongoDB服务到windows本地服务中\"></a>添加MongoDB服务到windows本地服务中</h1><p>上面的方法要保证MongoDB服务运行，必须每次都要重复输入命令才能开启。为了方便在windows上开启MongoDB服务，我们需要将MongoDB服务到windows本地服务中，并且设置随系统启动开启。<br>继续回到CMD中，在安装目录中（D:\\soft\\mongodb\\bin）执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mongod.exe --logpath d:/soft/mongodb/logs/mongodb.log --logappend --dbpath d:/soft/mongodb/data --directoryperdb --serviceName MongoDB -install --auth</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>此处注意 “–auth” 是将服务开启权限认证，这样别人需要账户和密码才能去访问你的数据库。<br>如果要开启认证，需要在前期运行时要在MongoDB服务中设置好账户密码。<br>详细方法可参考：<a href=\"http://www.mjpiero.cc/2016/12/28/MongoDB%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E8%AE%A4%E8%AF%81%E6%9D%83%E9%99%90%E5%8A%9F%E8%83%BD/\">MongoDB如何开启认证权限功能</a><br>如果不需要，或则选择后期再设置，可以不使用。</p>\n</blockquote>\n<p>上面执行完毕之后，会在windows服务下创建一个名为MongoDB的服务。<br>执行 <code>net start MongoDB</code> 便开启MongoDB服务了。<br>可以在windows的服务窗口中看见MongoDB的服务状态。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20161228122836.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h1 id=\"删除MongoDB服务\"><a href=\"#删除MongoDB服务\" class=\"headerlink\" title=\"删除MongoDB服务\"></a>删除MongoDB服务</h1><p>如果要删除MongoDB服务，首先先停止当前的MongoDB服务，这个可以去服务窗口停止。<br>然后在CMD中执行：<code>sc delete MongoDB</code><br>这样之前安装的服务就会被删除。</p>\n<h1 id=\"安装时遇到的一些问题\"><a href=\"#安装时遇到的一些问题\" class=\"headerlink\" title=\"安装时遇到的一些问题\"></a>安装时遇到的一些问题</h1><p>在安装时可能遇到的一些问题：</p>\n<h2 id=\"Windows不能在本地计算机启动MongoDB，错误代码-100\"><a href=\"#Windows不能在本地计算机启动MongoDB，错误代码-100\" class=\"headerlink\" title=\"Windows不能在本地计算机启动MongoDB，错误代码 100\"></a>Windows不能在本地计算机启动MongoDB，错误代码 100</h2><p><strong>解决办法：</strong> MongoDB安装目录\\data\\将此文件夹下的mongod.lock、storage.bson删除</p>\n<h2 id=\"连接数据库时发生错误-failed-to-execute-listdatabases-command\"><a href=\"#连接数据库时发生错误-failed-to-execute-listdatabases-command\" class=\"headerlink\" title=\"连接数据库时发生错误 failed to execute listdatabases command\"></a>连接数据库时发生错误 failed to execute listdatabases command</h2><p><strong>解决办法：</strong> 在安装服务的时候开启权限认证，确定一下账户密码是否有误。<br>如果是在添加服务的时候使用了”–auth”命令，则需要进入MongoDB服务中重新添加新的账户和密码。<br>详细方法可参考：<a href=\"http://www.mjpiero.cc/2016/12/28/MongoDB%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E8%AE%A4%E8%AF%81%E6%9D%83%E9%99%90%E5%8A%9F%E8%83%BD/\">MongoDB如何开启认证权限功能</a></p>\n"},{"title":"mac 使用tree命令","date":"2018-08-23T03:59:10.000Z","_content":"\n开发的时候想要生成树状的目录结构，Linux下有个tree命令可以直接打印出树状的目录结构，可以了解一下，但是mac下默认是木有tree命令的。\n网上搜了一下，mark一下：\n\n使用find命令模拟出tree命令的效果，如显示当前目录的 tree 的命令：\n\n```\n$ find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'\n```\n\n还可以写一个别名来快速执行该命令，运行如下命令，将上面这个命令写到~/.bash_profile里，以后直接运行tree命令就更方便了:\n\n```\nalias tree=\"find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'\"\n```\n\n也可以使用 homebrew 安装 tree 命令行：\n```\n$ brew install tree\n```\n这样就在你的mac上安装了 tree 命令行了。\n\n \n\ntree命令行参数（只实用与安装了tree命令行工具）：\n\n- -a 显示所有文件和目录。\n- -A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。\n- -C 在文件和目录清单加上色彩，便于区分各种类型。\n- -d 显示目录名称而非内容。\n- -D 列出文件或目录的更改时间。\n- -f 在每个文件或目录之前，显示完整的相对路径名称。\n- -F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上\"*\",\"/\",\"=\",\"@\",\"|\"号。\n- -g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。\n- -i 不以阶梯状列出文件或目录名称。\n- -I 不显示符合范本样式的文件或目录名称。\n- -l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。\n- -n 不在文件和目录清单加上色彩。\n- -N 直接列出文件和目录名称，包括控制字符。\n- -p 列出权限标示。\n- -P 只显示符合范本样式的文件或目录名称。\n- -q 用\"?\"号取代控制字符，列出文件和目录名称。\n- -s 列出文件或目录大小。\n- -t 用文件和目录的更改时间排序。\n- -u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。\n- -x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。","source":"_posts/mac-使用tree命令.md","raw":"---\ntitle: mac 使用tree命令\ndate: 2018-08-23 11:59:10\ntags: [环境搭建,linux]\ncategories: [环境搭建]\n---\n\n开发的时候想要生成树状的目录结构，Linux下有个tree命令可以直接打印出树状的目录结构，可以了解一下，但是mac下默认是木有tree命令的。\n网上搜了一下，mark一下：\n\n使用find命令模拟出tree命令的效果，如显示当前目录的 tree 的命令：\n\n```\n$ find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'\n```\n\n还可以写一个别名来快速执行该命令，运行如下命令，将上面这个命令写到~/.bash_profile里，以后直接运行tree命令就更方便了:\n\n```\nalias tree=\"find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'\"\n```\n\n也可以使用 homebrew 安装 tree 命令行：\n```\n$ brew install tree\n```\n这样就在你的mac上安装了 tree 命令行了。\n\n \n\ntree命令行参数（只实用与安装了tree命令行工具）：\n\n- -a 显示所有文件和目录。\n- -A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。\n- -C 在文件和目录清单加上色彩，便于区分各种类型。\n- -d 显示目录名称而非内容。\n- -D 列出文件或目录的更改时间。\n- -f 在每个文件或目录之前，显示完整的相对路径名称。\n- -F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上\"*\",\"/\",\"=\",\"@\",\"|\"号。\n- -g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。\n- -i 不以阶梯状列出文件或目录名称。\n- -I 不显示符合范本样式的文件或目录名称。\n- -l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。\n- -n 不在文件和目录清单加上色彩。\n- -N 直接列出文件和目录名称，包括控制字符。\n- -p 列出权限标示。\n- -P 只显示符合范本样式的文件或目录名称。\n- -q 用\"?\"号取代控制字符，列出文件和目录名称。\n- -s 列出文件或目录大小。\n- -t 用文件和目录的更改时间排序。\n- -u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。\n- -x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。","slug":"mac-使用tree命令","published":1,"updated":"2018-08-23T07:44:14.898Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl69pck60009cuv3x08hqzox","content":"<p>开发的时候想要生成树状的目录结构，Linux下有个tree命令可以直接打印出树状的目录结构，可以了解一下，但是mac下默认是木有tree命令的。<br>网上搜了一下，mark一下：</p>\n<p>使用find命令模拟出tree命令的效果，如显示当前目录的 tree 的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos;</span><br></pre></td></tr></table></figure>\n<p>还可以写一个别名来快速执行该命令，运行如下命令，将上面这个命令写到~/.bash_profile里，以后直接运行tree命令就更方便了:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">alias tree=&quot;find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos;&quot;</span><br></pre></td></tr></table></figure>\n<p>也可以使用 homebrew 安装 tree 命令行：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ brew install tree</span><br></pre></td></tr></table></figure></p>\n<p>这样就在你的mac上安装了 tree 命令行了。</p>\n<p>tree命令行参数（只实用与安装了tree命令行工具）：</p>\n<ul>\n<li>-a 显示所有文件和目录。</li>\n<li>-A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。</li>\n<li>-C 在文件和目录清单加上色彩，便于区分各种类型。</li>\n<li>-d 显示目录名称而非内容。</li>\n<li>-D 列出文件或目录的更改时间。</li>\n<li>-f 在每个文件或目录之前，显示完整的相对路径名称。</li>\n<li>-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上”*”,”/“,”=”,”@”,”|”号。</li>\n<li>-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。</li>\n<li>-i 不以阶梯状列出文件或目录名称。</li>\n<li>-I 不显示符合范本样式的文件或目录名称。</li>\n<li>-l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。</li>\n<li>-n 不在文件和目录清单加上色彩。</li>\n<li>-N 直接列出文件和目录名称，包括控制字符。</li>\n<li>-p 列出权限标示。</li>\n<li>-P 只显示符合范本样式的文件或目录名称。</li>\n<li>-q 用”?”号取代控制字符，列出文件和目录名称。</li>\n<li>-s 列出文件或目录大小。</li>\n<li>-t 用文件和目录的更改时间排序。</li>\n<li>-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。</li>\n<li>-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>开发的时候想要生成树状的目录结构，Linux下有个tree命令可以直接打印出树状的目录结构，可以了解一下，但是mac下默认是木有tree命令的。<br>网上搜了一下，mark一下：</p>\n<p>使用find命令模拟出tree命令的效果，如显示当前目录的 tree 的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos;</span><br></pre></td></tr></table></figure>\n<p>还可以写一个别名来快速执行该命令，运行如下命令，将上面这个命令写到~/.bash_profile里，以后直接运行tree命令就更方便了:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">alias tree=&quot;find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos;&quot;</span><br></pre></td></tr></table></figure>\n<p>也可以使用 homebrew 安装 tree 命令行：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ brew install tree</span><br></pre></td></tr></table></figure></p>\n<p>这样就在你的mac上安装了 tree 命令行了。</p>\n<p>tree命令行参数（只实用与安装了tree命令行工具）：</p>\n<ul>\n<li>-a 显示所有文件和目录。</li>\n<li>-A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。</li>\n<li>-C 在文件和目录清单加上色彩，便于区分各种类型。</li>\n<li>-d 显示目录名称而非内容。</li>\n<li>-D 列出文件或目录的更改时间。</li>\n<li>-f 在每个文件或目录之前，显示完整的相对路径名称。</li>\n<li>-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上”*”,”/“,”=”,”@”,”|”号。</li>\n<li>-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。</li>\n<li>-i 不以阶梯状列出文件或目录名称。</li>\n<li>-I 不显示符合范本样式的文件或目录名称。</li>\n<li>-l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。</li>\n<li>-n 不在文件和目录清单加上色彩。</li>\n<li>-N 直接列出文件和目录名称，包括控制字符。</li>\n<li>-p 列出权限标示。</li>\n<li>-P 只显示符合范本样式的文件或目录名称。</li>\n<li>-q 用”?”号取代控制字符，列出文件和目录名称。</li>\n<li>-s 列出文件或目录大小。</li>\n<li>-t 用文件和目录的更改时间排序。</li>\n<li>-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。</li>\n<li>-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。</li>\n</ul>\n"},{"title":"mainifest.json","date":"2018-08-23T04:24:55.000Z","_content":"\n在看别人开发的架子的时候，看到了这个文件，网上大概搜了一下，在此mark一下。\n\ndevelopers.google.com 上有个简介，中译过来被叫做“网络应用清单”，很多人也将他和web离线缓存联系在一起。\n实际上，开发者可以利用 mainifest.json 控制在用户想要看到应用的区域（例如移动设备主屏幕）中如何向用户显示网络应用或网站，指示用户可以启动哪些功能，以及定义其在启动时的外观。\n\nmainifest.json 提供了将网站书签保存到设备主屏幕的功能。当网站以这种方式启动时：\n\n- 它具有唯一的图标和名称，以便用户将其与其他网站区分开来。\n- 它会在下载资源或从缓存恢复资源时向用户显示某些信息。\n- 它会向浏览器提供默认显示特性，以避免网站资源可用时的过渡过于生硬。\n- 它通过一个文本文件中的元数据这一简单机制完成所有这些工作。那就是网络应用清单。\n\n>注：尽管您可以在任何网站上使用该文件，它们却是 PWA 的必备要素。\n\n## 创建清单\n下面是一个示例：\n```\n{\n  \"short_name\": \"AirHorner\",\n  \"name\": \"Kinlan's AirHorner of Infamy\",\n  \"icons\": [                              // 自定义图标\n    {\n      \"src\": \"launcher-icon-1x.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"48x48\"\n    },\n    {\n      \"src\": \"launcher-icon-2x.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"96x96\"\n    },\n    {\n      \"src\": \"launcher-icon-4x.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"192x192\"\n    }\n  ],\n  \"start_url\": \"index.html?launcher=true\",  // 设置启动网址\n  \"background_color\": \"#000000\"             // 设置背景颜色\n}\n```\n确保包括以下内容：\n\n- 在用户主屏幕上用作文本的 short_name。\n- 在网络应用安装横幅中使用的 name。\n\n## 将清单的相关信息告知浏览器\n在您创建清单且将清单添加到您的网站之后，将 link 标记添加到包含网络应用的所有页面上，如下所示：\n```\n<link rel=\"manifest\" href=\"/manifest.json\">\n```\n\n## 测试您的清单\n如果您想要手动验证网络应用清单是否已正确设置，请使用 Chrome DevTools 的 Application 面板上的 Manifest 标签。\n\n![](https://developers.google.com/web/fundamentals/web-app-manifest/images/devtools-manifest.png?hl=zh-cn)\n\n> [google开发者原文](https://developers.google.com/web/fundamentals/web-app-manifest/?hl=zh-cn)","source":"_posts/mainifest-json.md","raw":"---\ntitle: mainifest.json\ndate: 2018-08-23 12:24:55\ntags: [web移动端, 缓存, JavaScript]\ncategories: [JavaScript]\n---\n\n在看别人开发的架子的时候，看到了这个文件，网上大概搜了一下，在此mark一下。\n\ndevelopers.google.com 上有个简介，中译过来被叫做“网络应用清单”，很多人也将他和web离线缓存联系在一起。\n实际上，开发者可以利用 mainifest.json 控制在用户想要看到应用的区域（例如移动设备主屏幕）中如何向用户显示网络应用或网站，指示用户可以启动哪些功能，以及定义其在启动时的外观。\n\nmainifest.json 提供了将网站书签保存到设备主屏幕的功能。当网站以这种方式启动时：\n\n- 它具有唯一的图标和名称，以便用户将其与其他网站区分开来。\n- 它会在下载资源或从缓存恢复资源时向用户显示某些信息。\n- 它会向浏览器提供默认显示特性，以避免网站资源可用时的过渡过于生硬。\n- 它通过一个文本文件中的元数据这一简单机制完成所有这些工作。那就是网络应用清单。\n\n>注：尽管您可以在任何网站上使用该文件，它们却是 PWA 的必备要素。\n\n## 创建清单\n下面是一个示例：\n```\n{\n  \"short_name\": \"AirHorner\",\n  \"name\": \"Kinlan's AirHorner of Infamy\",\n  \"icons\": [                              // 自定义图标\n    {\n      \"src\": \"launcher-icon-1x.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"48x48\"\n    },\n    {\n      \"src\": \"launcher-icon-2x.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"96x96\"\n    },\n    {\n      \"src\": \"launcher-icon-4x.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"192x192\"\n    }\n  ],\n  \"start_url\": \"index.html?launcher=true\",  // 设置启动网址\n  \"background_color\": \"#000000\"             // 设置背景颜色\n}\n```\n确保包括以下内容：\n\n- 在用户主屏幕上用作文本的 short_name。\n- 在网络应用安装横幅中使用的 name。\n\n## 将清单的相关信息告知浏览器\n在您创建清单且将清单添加到您的网站之后，将 link 标记添加到包含网络应用的所有页面上，如下所示：\n```\n<link rel=\"manifest\" href=\"/manifest.json\">\n```\n\n## 测试您的清单\n如果您想要手动验证网络应用清单是否已正确设置，请使用 Chrome DevTools 的 Application 面板上的 Manifest 标签。\n\n![](https://developers.google.com/web/fundamentals/web-app-manifest/images/devtools-manifest.png?hl=zh-cn)\n\n> [google开发者原文](https://developers.google.com/web/fundamentals/web-app-manifest/?hl=zh-cn)","slug":"mainifest-json","published":1,"updated":"2018-08-23T07:48:49.879Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl69pck8000dcuv3mzxthx7j","content":"<p>在看别人开发的架子的时候，看到了这个文件，网上大概搜了一下，在此mark一下。</p>\n<p>developers.google.com 上有个简介，中译过来被叫做“网络应用清单”，很多人也将他和web离线缓存联系在一起。<br>实际上，开发者可以利用 mainifest.json 控制在用户想要看到应用的区域（例如移动设备主屏幕）中如何向用户显示网络应用或网站，指示用户可以启动哪些功能，以及定义其在启动时的外观。</p>\n<p>mainifest.json 提供了将网站书签保存到设备主屏幕的功能。当网站以这种方式启动时：</p>\n<ul>\n<li>它具有唯一的图标和名称，以便用户将其与其他网站区分开来。</li>\n<li>它会在下载资源或从缓存恢复资源时向用户显示某些信息。</li>\n<li>它会向浏览器提供默认显示特性，以避免网站资源可用时的过渡过于生硬。</li>\n<li>它通过一个文本文件中的元数据这一简单机制完成所有这些工作。那就是网络应用清单。</li>\n</ul>\n<blockquote>\n<p>注：尽管您可以在任何网站上使用该文件，它们却是 PWA 的必备要素。</p>\n</blockquote>\n<h2 id=\"创建清单\"><a href=\"#创建清单\" class=\"headerlink\" title=\"创建清单\"></a>创建清单</h2><p>下面是一个示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;short_name&quot;: &quot;AirHorner&quot;,</span><br><span class=\"line\">  &quot;name&quot;: &quot;Kinlan&apos;s AirHorner of Infamy&quot;,</span><br><span class=\"line\">  &quot;icons&quot;: [                              // 自定义图标</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;src&quot;: &quot;launcher-icon-1x.png&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;image/png&quot;,</span><br><span class=\"line\">      &quot;sizes&quot;: &quot;48x48&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;src&quot;: &quot;launcher-icon-2x.png&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;image/png&quot;,</span><br><span class=\"line\">      &quot;sizes&quot;: &quot;96x96&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;src&quot;: &quot;launcher-icon-4x.png&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;image/png&quot;,</span><br><span class=\"line\">      &quot;sizes&quot;: &quot;192x192&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;start_url&quot;: &quot;index.html?launcher=true&quot;,  // 设置启动网址</span><br><span class=\"line\">  &quot;background_color&quot;: &quot;#000000&quot;             // 设置背景颜色</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>确保包括以下内容：</p>\n<ul>\n<li>在用户主屏幕上用作文本的 short_name。</li>\n<li>在网络应用安装横幅中使用的 name。</li>\n</ul>\n<h2 id=\"将清单的相关信息告知浏览器\"><a href=\"#将清单的相关信息告知浏览器\" class=\"headerlink\" title=\"将清单的相关信息告知浏览器\"></a>将清单的相关信息告知浏览器</h2><p>在您创建清单且将清单添加到您的网站之后，将 link 标记添加到包含网络应用的所有页面上，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;link rel=&quot;manifest&quot; href=&quot;/manifest.json&quot;&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"测试您的清单\"><a href=\"#测试您的清单\" class=\"headerlink\" title=\"测试您的清单\"></a>测试您的清单</h2><p>如果您想要手动验证网络应用清单是否已正确设置，请使用 Chrome DevTools 的 Application 面板上的 Manifest 标签。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://developers.google.com/web/fundamentals/web-app-manifest/images/devtools-manifest.png?hl=zh-cn\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<blockquote>\n<p><a href=\"https://developers.google.com/web/fundamentals/web-app-manifest/?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">google开发者原文</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>在看别人开发的架子的时候，看到了这个文件，网上大概搜了一下，在此mark一下。</p>\n<p>developers.google.com 上有个简介，中译过来被叫做“网络应用清单”，很多人也将他和web离线缓存联系在一起。<br>实际上，开发者可以利用 mainifest.json 控制在用户想要看到应用的区域（例如移动设备主屏幕）中如何向用户显示网络应用或网站，指示用户可以启动哪些功能，以及定义其在启动时的外观。</p>\n<p>mainifest.json 提供了将网站书签保存到设备主屏幕的功能。当网站以这种方式启动时：</p>\n<ul>\n<li>它具有唯一的图标和名称，以便用户将其与其他网站区分开来。</li>\n<li>它会在下载资源或从缓存恢复资源时向用户显示某些信息。</li>\n<li>它会向浏览器提供默认显示特性，以避免网站资源可用时的过渡过于生硬。</li>\n<li>它通过一个文本文件中的元数据这一简单机制完成所有这些工作。那就是网络应用清单。</li>\n</ul>\n<blockquote>\n<p>注：尽管您可以在任何网站上使用该文件，它们却是 PWA 的必备要素。</p>\n</blockquote>\n<h2 id=\"创建清单\"><a href=\"#创建清单\" class=\"headerlink\" title=\"创建清单\"></a>创建清单</h2><p>下面是一个示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;short_name&quot;: &quot;AirHorner&quot;,</span><br><span class=\"line\">  &quot;name&quot;: &quot;Kinlan&apos;s AirHorner of Infamy&quot;,</span><br><span class=\"line\">  &quot;icons&quot;: [                              // 自定义图标</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;src&quot;: &quot;launcher-icon-1x.png&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;image/png&quot;,</span><br><span class=\"line\">      &quot;sizes&quot;: &quot;48x48&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;src&quot;: &quot;launcher-icon-2x.png&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;image/png&quot;,</span><br><span class=\"line\">      &quot;sizes&quot;: &quot;96x96&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;src&quot;: &quot;launcher-icon-4x.png&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;image/png&quot;,</span><br><span class=\"line\">      &quot;sizes&quot;: &quot;192x192&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;start_url&quot;: &quot;index.html?launcher=true&quot;,  // 设置启动网址</span><br><span class=\"line\">  &quot;background_color&quot;: &quot;#000000&quot;             // 设置背景颜色</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>确保包括以下内容：</p>\n<ul>\n<li>在用户主屏幕上用作文本的 short_name。</li>\n<li>在网络应用安装横幅中使用的 name。</li>\n</ul>\n<h2 id=\"将清单的相关信息告知浏览器\"><a href=\"#将清单的相关信息告知浏览器\" class=\"headerlink\" title=\"将清单的相关信息告知浏览器\"></a>将清单的相关信息告知浏览器</h2><p>在您创建清单且将清单添加到您的网站之后，将 link 标记添加到包含网络应用的所有页面上，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;link rel=&quot;manifest&quot; href=&quot;/manifest.json&quot;&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"测试您的清单\"><a href=\"#测试您的清单\" class=\"headerlink\" title=\"测试您的清单\"></a>测试您的清单</h2><p>如果您想要手动验证网络应用清单是否已正确设置，请使用 Chrome DevTools 的 Application 面板上的 Manifest 标签。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://developers.google.com/web/fundamentals/web-app-manifest/images/devtools-manifest.png?hl=zh-cn\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<blockquote>\n<p><a href=\"https://developers.google.com/web/fundamentals/web-app-manifest/?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">google开发者原文</a></p>\n</blockquote>\n"},{"title":"【Web移动端】web移动端调试大法","date":"2016-12-29T07:02:38.000Z","_content":"在做移动端web开发的时候，头痛遇到移动端调试的问题，虽然现在很多PC浏览器的开发工具都自带移动端调试功能，但是显然和真机测试还是有一定差距，因为移动端不同的设备会出现不同的问题，在PC模拟器上显示正常的换到真机上测试就是会出问题。\n在这里整理一些常见的移动端调试方法。\n\n__先从一般的页面调试方法开始。__\n# console方式\n这个是最常见的一种调试方法，通过console在浏览器控制台打印出每步所需的回调数据。\n详细可以参考[Web API接口](https://developer.mozilla.org/zh-CN/docs/Web/API/Console)\n# 浏览器自带的移动端模拟器调试\n这个现在也比较常见了。最常用的是chrome的模拟器，当然现在流行的浏览器基本上都有开发者的模式，也都携有移动端的模拟器。比如火狐浏览器、360浏览器等。\n基本上浏览器开启开发者模式的方法都统一了，在windows环境下按`F12`进入开发者攻击界面，mac环境则是下按`option+command+i`。\n![](/images/QQ截图20161229151926.png)\n# UC浏览器测试\nUC浏览器提供了开发版方便开发者们连接测试。详见：[UC浏览器开发者版](http://plus.uc.cn/document/webapp/doc5.html)\n# 第三方平台在线模拟器调试\n第三方开发的平台比较方便，功能也相当强大，对于一些需要完善测试的，其实使用第三方的平台还是比较方便的。\n这里我就推荐几个比较有名的第三方平台：\n- [BrowserStack](https://www.browserstack.com/)\n- [Keynote](http://www.keynote.com/)\n- [BrowserShots](http://browsershots.org/)\n- [Browsera](http://www.browsera.com/)\n- [Ghostlab](http://www.vanamco.com/ghostlab/)\n等等...\n\n__下面介绍一些我比较喜欢的一些远程调试工具。__\n# Weinre\n之前微信开发工具中的远程调试也是基于这个开发的。\n安装方法很简单快捷。\n安装 Weinre：\n```\nnpm install -g weinre\n```\n安装完成之后，输入指令启动：\n```\nweinre --httpPort 8081 --boundHost -all-\n```\n显示如下则启动成功。\n![](/images/QQ截图20161229154152.png)\n此时我们访问地址：`http://localhost:8081/` 会显示下图：\n![](/images/QQ截图20161229154809.png)\n在页面中也有提供几种方案，在你的项目中添加对应的js。例如：`<script src=\"http://192.168.55.23:8081/target/target-script-min.js#anonymous\"></script>`\n随后便可以通过PC访问`http://192.168.55.23:8081/client/#anonymous`就可以看到手机上访问的项目页面了。\n![](/images/QQ截图20161229160034.png)\n# 代理应用\n这类代理应用实际上是用于抓包的，但是比起Weinre是基于开发者自身开发测试的。如果我们想要去获取其他网站的一些资源，例如http请求，或则一些js源码等。这时候使用代理工具比较合适。\nmac下常使用的是[Charles](https://www.charlesproxy.com/),windows环境下可以用[Fiddler](http://www.telerik.com/fiddler)\n默认开启的是8888端口。在手机上设置一个网络代理即可，这个不多详细介绍了。\n# [BrowserSync](https://browsersync.io/)\n这是一个很强大的多终端测试工具，它可以跨设备同步操作行为，还可以监听你的文件，在文件修改时自动刷新所有设备中页面。\n[BrowserSync官方网站](https://browsersync.io/)\n也可以通过npm全局安装\n```\nnpm install -g browser-sync\n```\n随后进入项目根目录下\n```\nbrowser-sync start --files \"*.*\"\n// 意思为监听当前目录下所有改动\n```\n终端中若显示如下，则启动成功：\n![](http://7xoxxe.com1.z0.glb.clouddn.com/bs.png)\n终端中显示默认访问地址：`http://localhost:3001` 则可直接进入到控制台界面。\n之后和weinre类似，也是添加一段js在自己的项目底下。\nBrowserSync还可以和gulp以及webpack搭配使用，详细的可以看官方文档。\n# 真机测试\n真机测试是一概而论的说法。由于像ios系统本身就提供了一些对前端十分友好的开发者工具。\n例如，Safari浏览器自带的开发者工具，或则xcode也有测试的方法，这里我局限性比较高，有这方面条件的是可以去搜罗一下相关的方法。\n再者，PhoneGap也是有调试工具的，只不过需要安装它测试app。\n这也是一种方法，不过个人还是偏爱Weinre或则BrowserSync的测试工具。\n\n以上。是我整理的一些移动端测试的方法。欢迎补充~","source":"_posts/【Web移动端】web移动端调试大法.md","raw":"---\ntitle: 【Web移动端】web移动端调试大法\ndate: 2016-12-29 15:02:38\ntags: [环境搭建,Web移动端]\ncategories: [环境搭建]\n---\n在做移动端web开发的时候，头痛遇到移动端调试的问题，虽然现在很多PC浏览器的开发工具都自带移动端调试功能，但是显然和真机测试还是有一定差距，因为移动端不同的设备会出现不同的问题，在PC模拟器上显示正常的换到真机上测试就是会出问题。\n在这里整理一些常见的移动端调试方法。\n\n__先从一般的页面调试方法开始。__\n# console方式\n这个是最常见的一种调试方法，通过console在浏览器控制台打印出每步所需的回调数据。\n详细可以参考[Web API接口](https://developer.mozilla.org/zh-CN/docs/Web/API/Console)\n# 浏览器自带的移动端模拟器调试\n这个现在也比较常见了。最常用的是chrome的模拟器，当然现在流行的浏览器基本上都有开发者的模式，也都携有移动端的模拟器。比如火狐浏览器、360浏览器等。\n基本上浏览器开启开发者模式的方法都统一了，在windows环境下按`F12`进入开发者攻击界面，mac环境则是下按`option+command+i`。\n![](/images/QQ截图20161229151926.png)\n# UC浏览器测试\nUC浏览器提供了开发版方便开发者们连接测试。详见：[UC浏览器开发者版](http://plus.uc.cn/document/webapp/doc5.html)\n# 第三方平台在线模拟器调试\n第三方开发的平台比较方便，功能也相当强大，对于一些需要完善测试的，其实使用第三方的平台还是比较方便的。\n这里我就推荐几个比较有名的第三方平台：\n- [BrowserStack](https://www.browserstack.com/)\n- [Keynote](http://www.keynote.com/)\n- [BrowserShots](http://browsershots.org/)\n- [Browsera](http://www.browsera.com/)\n- [Ghostlab](http://www.vanamco.com/ghostlab/)\n等等...\n\n__下面介绍一些我比较喜欢的一些远程调试工具。__\n# Weinre\n之前微信开发工具中的远程调试也是基于这个开发的。\n安装方法很简单快捷。\n安装 Weinre：\n```\nnpm install -g weinre\n```\n安装完成之后，输入指令启动：\n```\nweinre --httpPort 8081 --boundHost -all-\n```\n显示如下则启动成功。\n![](/images/QQ截图20161229154152.png)\n此时我们访问地址：`http://localhost:8081/` 会显示下图：\n![](/images/QQ截图20161229154809.png)\n在页面中也有提供几种方案，在你的项目中添加对应的js。例如：`<script src=\"http://192.168.55.23:8081/target/target-script-min.js#anonymous\"></script>`\n随后便可以通过PC访问`http://192.168.55.23:8081/client/#anonymous`就可以看到手机上访问的项目页面了。\n![](/images/QQ截图20161229160034.png)\n# 代理应用\n这类代理应用实际上是用于抓包的，但是比起Weinre是基于开发者自身开发测试的。如果我们想要去获取其他网站的一些资源，例如http请求，或则一些js源码等。这时候使用代理工具比较合适。\nmac下常使用的是[Charles](https://www.charlesproxy.com/),windows环境下可以用[Fiddler](http://www.telerik.com/fiddler)\n默认开启的是8888端口。在手机上设置一个网络代理即可，这个不多详细介绍了。\n# [BrowserSync](https://browsersync.io/)\n这是一个很强大的多终端测试工具，它可以跨设备同步操作行为，还可以监听你的文件，在文件修改时自动刷新所有设备中页面。\n[BrowserSync官方网站](https://browsersync.io/)\n也可以通过npm全局安装\n```\nnpm install -g browser-sync\n```\n随后进入项目根目录下\n```\nbrowser-sync start --files \"*.*\"\n// 意思为监听当前目录下所有改动\n```\n终端中若显示如下，则启动成功：\n![](http://7xoxxe.com1.z0.glb.clouddn.com/bs.png)\n终端中显示默认访问地址：`http://localhost:3001` 则可直接进入到控制台界面。\n之后和weinre类似，也是添加一段js在自己的项目底下。\nBrowserSync还可以和gulp以及webpack搭配使用，详细的可以看官方文档。\n# 真机测试\n真机测试是一概而论的说法。由于像ios系统本身就提供了一些对前端十分友好的开发者工具。\n例如，Safari浏览器自带的开发者工具，或则xcode也有测试的方法，这里我局限性比较高，有这方面条件的是可以去搜罗一下相关的方法。\n再者，PhoneGap也是有调试工具的，只不过需要安装它测试app。\n这也是一种方法，不过个人还是偏爱Weinre或则BrowserSync的测试工具。\n\n以上。是我整理的一些移动端测试的方法。欢迎补充~","slug":"【Web移动端】web移动端调试大法","published":1,"updated":"2017-01-18T10:25:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl69pckb000ecuv36npptcmv","content":"<p>在做移动端web开发的时候，头痛遇到移动端调试的问题，虽然现在很多PC浏览器的开发工具都自带移动端调试功能，但是显然和真机测试还是有一定差距，因为移动端不同的设备会出现不同的问题，在PC模拟器上显示正常的换到真机上测试就是会出问题。<br>在这里整理一些常见的移动端调试方法。</p>\n<p><strong>先从一般的页面调试方法开始。</strong></p>\n<h1 id=\"console方式\"><a href=\"#console方式\" class=\"headerlink\" title=\"console方式\"></a>console方式</h1><p>这个是最常见的一种调试方法，通过console在浏览器控制台打印出每步所需的回调数据。<br>详细可以参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Console\" target=\"_blank\" rel=\"noopener\">Web API接口</a></p>\n<h1 id=\"浏览器自带的移动端模拟器调试\"><a href=\"#浏览器自带的移动端模拟器调试\" class=\"headerlink\" title=\"浏览器自带的移动端模拟器调试\"></a>浏览器自带的移动端模拟器调试</h1><p>这个现在也比较常见了。最常用的是chrome的模拟器，当然现在流行的浏览器基本上都有开发者的模式，也都携有移动端的模拟器。比如火狐浏览器、360浏览器等。<br>基本上浏览器开启开发者模式的方法都统一了，在windows环境下按<code>F12</code>进入开发者攻击界面，mac环境则是下按<code>option+command+i</code>。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20161229151926.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h1 id=\"UC浏览器测试\"><a href=\"#UC浏览器测试\" class=\"headerlink\" title=\"UC浏览器测试\"></a>UC浏览器测试</h1><p>UC浏览器提供了开发版方便开发者们连接测试。详见：<a href=\"http://plus.uc.cn/document/webapp/doc5.html\" target=\"_blank\" rel=\"noopener\">UC浏览器开发者版</a></p>\n<h1 id=\"第三方平台在线模拟器调试\"><a href=\"#第三方平台在线模拟器调试\" class=\"headerlink\" title=\"第三方平台在线模拟器调试\"></a>第三方平台在线模拟器调试</h1><p>第三方开发的平台比较方便，功能也相当强大，对于一些需要完善测试的，其实使用第三方的平台还是比较方便的。<br>这里我就推荐几个比较有名的第三方平台：</p>\n<ul>\n<li><a href=\"https://www.browserstack.com/\" target=\"_blank\" rel=\"noopener\">BrowserStack</a></li>\n<li><a href=\"http://www.keynote.com/\" target=\"_blank\" rel=\"noopener\">Keynote</a></li>\n<li><a href=\"http://browsershots.org/\" target=\"_blank\" rel=\"noopener\">BrowserShots</a></li>\n<li><a href=\"http://www.browsera.com/\" target=\"_blank\" rel=\"noopener\">Browsera</a></li>\n<li><a href=\"http://www.vanamco.com/ghostlab/\" target=\"_blank\" rel=\"noopener\">Ghostlab</a><br>等等…</li>\n</ul>\n<p><strong>下面介绍一些我比较喜欢的一些远程调试工具。</strong></p>\n<h1 id=\"Weinre\"><a href=\"#Weinre\" class=\"headerlink\" title=\"Weinre\"></a>Weinre</h1><p>之前微信开发工具中的远程调试也是基于这个开发的。<br>安装方法很简单快捷。<br>安装 Weinre：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g weinre</span><br></pre></td></tr></table></figure></p>\n<p>安装完成之后，输入指令启动：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">weinre --httpPort 8081 --boundHost -all-</span><br></pre></td></tr></table></figure></p>\n<p>显示如下则启动成功。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20161229154152.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>此时我们访问地址：<code>http://localhost:8081/</code> 会显示下图：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20161229154809.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>在页面中也有提供几种方案，在你的项目中添加对应的js。例如：<code>&lt;script src=&quot;http://192.168.55.23:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;</code><br>随后便可以通过PC访问<code>http://192.168.55.23:8081/client/#anonymous</code>就可以看到手机上访问的项目页面了。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20161229160034.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h1 id=\"代理应用\"><a href=\"#代理应用\" class=\"headerlink\" title=\"代理应用\"></a>代理应用</h1><p>这类代理应用实际上是用于抓包的，但是比起Weinre是基于开发者自身开发测试的。如果我们想要去获取其他网站的一些资源，例如http请求，或则一些js源码等。这时候使用代理工具比较合适。<br>mac下常使用的是<a href=\"https://www.charlesproxy.com/\" target=\"_blank\" rel=\"noopener\">Charles</a>,windows环境下可以用<a href=\"http://www.telerik.com/fiddler\" target=\"_blank\" rel=\"noopener\">Fiddler</a><br>默认开启的是8888端口。在手机上设置一个网络代理即可，这个不多详细介绍了。</p>\n<h1 id=\"BrowserSync\"><a href=\"#BrowserSync\" class=\"headerlink\" title=\"BrowserSync\"></a><a href=\"https://browsersync.io/\" target=\"_blank\" rel=\"noopener\">BrowserSync</a></h1><p>这是一个很强大的多终端测试工具，它可以跨设备同步操作行为，还可以监听你的文件，在文件修改时自动刷新所有设备中页面。<br><a href=\"https://browsersync.io/\" target=\"_blank\" rel=\"noopener\">BrowserSync官方网站</a><br>也可以通过npm全局安装<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g browser-sync</span><br></pre></td></tr></table></figure></p>\n<p>随后进入项目根目录下<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">browser-sync start --files &quot;*.*&quot;</span><br><span class=\"line\">// 意思为监听当前目录下所有改动</span><br></pre></td></tr></table></figure></p>\n<p>终端中若显示如下，则启动成功：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xoxxe.com1.z0.glb.clouddn.com/bs.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>终端中显示默认访问地址：<code>http://localhost:3001</code> 则可直接进入到控制台界面。<br>之后和weinre类似，也是添加一段js在自己的项目底下。<br>BrowserSync还可以和gulp以及webpack搭配使用，详细的可以看官方文档。</p>\n<h1 id=\"真机测试\"><a href=\"#真机测试\" class=\"headerlink\" title=\"真机测试\"></a>真机测试</h1><p>真机测试是一概而论的说法。由于像ios系统本身就提供了一些对前端十分友好的开发者工具。<br>例如，Safari浏览器自带的开发者工具，或则xcode也有测试的方法，这里我局限性比较高，有这方面条件的是可以去搜罗一下相关的方法。<br>再者，PhoneGap也是有调试工具的，只不过需要安装它测试app。<br>这也是一种方法，不过个人还是偏爱Weinre或则BrowserSync的测试工具。</p>\n<p>以上。是我整理的一些移动端测试的方法。欢迎补充~</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在做移动端web开发的时候，头痛遇到移动端调试的问题，虽然现在很多PC浏览器的开发工具都自带移动端调试功能，但是显然和真机测试还是有一定差距，因为移动端不同的设备会出现不同的问题，在PC模拟器上显示正常的换到真机上测试就是会出问题。<br>在这里整理一些常见的移动端调试方法。</p>\n<p><strong>先从一般的页面调试方法开始。</strong></p>\n<h1 id=\"console方式\"><a href=\"#console方式\" class=\"headerlink\" title=\"console方式\"></a>console方式</h1><p>这个是最常见的一种调试方法，通过console在浏览器控制台打印出每步所需的回调数据。<br>详细可以参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Console\" target=\"_blank\" rel=\"noopener\">Web API接口</a></p>\n<h1 id=\"浏览器自带的移动端模拟器调试\"><a href=\"#浏览器自带的移动端模拟器调试\" class=\"headerlink\" title=\"浏览器自带的移动端模拟器调试\"></a>浏览器自带的移动端模拟器调试</h1><p>这个现在也比较常见了。最常用的是chrome的模拟器，当然现在流行的浏览器基本上都有开发者的模式，也都携有移动端的模拟器。比如火狐浏览器、360浏览器等。<br>基本上浏览器开启开发者模式的方法都统一了，在windows环境下按<code>F12</code>进入开发者攻击界面，mac环境则是下按<code>option+command+i</code>。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20161229151926.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h1 id=\"UC浏览器测试\"><a href=\"#UC浏览器测试\" class=\"headerlink\" title=\"UC浏览器测试\"></a>UC浏览器测试</h1><p>UC浏览器提供了开发版方便开发者们连接测试。详见：<a href=\"http://plus.uc.cn/document/webapp/doc5.html\" target=\"_blank\" rel=\"noopener\">UC浏览器开发者版</a></p>\n<h1 id=\"第三方平台在线模拟器调试\"><a href=\"#第三方平台在线模拟器调试\" class=\"headerlink\" title=\"第三方平台在线模拟器调试\"></a>第三方平台在线模拟器调试</h1><p>第三方开发的平台比较方便，功能也相当强大，对于一些需要完善测试的，其实使用第三方的平台还是比较方便的。<br>这里我就推荐几个比较有名的第三方平台：</p>\n<ul>\n<li><a href=\"https://www.browserstack.com/\" target=\"_blank\" rel=\"noopener\">BrowserStack</a></li>\n<li><a href=\"http://www.keynote.com/\" target=\"_blank\" rel=\"noopener\">Keynote</a></li>\n<li><a href=\"http://browsershots.org/\" target=\"_blank\" rel=\"noopener\">BrowserShots</a></li>\n<li><a href=\"http://www.browsera.com/\" target=\"_blank\" rel=\"noopener\">Browsera</a></li>\n<li><a href=\"http://www.vanamco.com/ghostlab/\" target=\"_blank\" rel=\"noopener\">Ghostlab</a><br>等等…</li>\n</ul>\n<p><strong>下面介绍一些我比较喜欢的一些远程调试工具。</strong></p>\n<h1 id=\"Weinre\"><a href=\"#Weinre\" class=\"headerlink\" title=\"Weinre\"></a>Weinre</h1><p>之前微信开发工具中的远程调试也是基于这个开发的。<br>安装方法很简单快捷。<br>安装 Weinre：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g weinre</span><br></pre></td></tr></table></figure></p>\n<p>安装完成之后，输入指令启动：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">weinre --httpPort 8081 --boundHost -all-</span><br></pre></td></tr></table></figure></p>\n<p>显示如下则启动成功。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20161229154152.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>此时我们访问地址：<code>http://localhost:8081/</code> 会显示下图：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20161229154809.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>在页面中也有提供几种方案，在你的项目中添加对应的js。例如：<code>&lt;script src=&quot;http://192.168.55.23:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;</code><br>随后便可以通过PC访问<code>http://192.168.55.23:8081/client/#anonymous</code>就可以看到手机上访问的项目页面了。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20161229160034.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h1 id=\"代理应用\"><a href=\"#代理应用\" class=\"headerlink\" title=\"代理应用\"></a>代理应用</h1><p>这类代理应用实际上是用于抓包的，但是比起Weinre是基于开发者自身开发测试的。如果我们想要去获取其他网站的一些资源，例如http请求，或则一些js源码等。这时候使用代理工具比较合适。<br>mac下常使用的是<a href=\"https://www.charlesproxy.com/\" target=\"_blank\" rel=\"noopener\">Charles</a>,windows环境下可以用<a href=\"http://www.telerik.com/fiddler\" target=\"_blank\" rel=\"noopener\">Fiddler</a><br>默认开启的是8888端口。在手机上设置一个网络代理即可，这个不多详细介绍了。</p>\n<h1 id=\"BrowserSync\"><a href=\"#BrowserSync\" class=\"headerlink\" title=\"BrowserSync\"></a><a href=\"https://browsersync.io/\" target=\"_blank\" rel=\"noopener\">BrowserSync</a></h1><p>这是一个很强大的多终端测试工具，它可以跨设备同步操作行为，还可以监听你的文件，在文件修改时自动刷新所有设备中页面。<br><a href=\"https://browsersync.io/\" target=\"_blank\" rel=\"noopener\">BrowserSync官方网站</a><br>也可以通过npm全局安装<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g browser-sync</span><br></pre></td></tr></table></figure></p>\n<p>随后进入项目根目录下<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">browser-sync start --files &quot;*.*&quot;</span><br><span class=\"line\">// 意思为监听当前目录下所有改动</span><br></pre></td></tr></table></figure></p>\n<p>终端中若显示如下，则启动成功：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xoxxe.com1.z0.glb.clouddn.com/bs.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>终端中显示默认访问地址：<code>http://localhost:3001</code> 则可直接进入到控制台界面。<br>之后和weinre类似，也是添加一段js在自己的项目底下。<br>BrowserSync还可以和gulp以及webpack搭配使用，详细的可以看官方文档。</p>\n<h1 id=\"真机测试\"><a href=\"#真机测试\" class=\"headerlink\" title=\"真机测试\"></a>真机测试</h1><p>真机测试是一概而论的说法。由于像ios系统本身就提供了一些对前端十分友好的开发者工具。<br>例如，Safari浏览器自带的开发者工具，或则xcode也有测试的方法，这里我局限性比较高，有这方面条件的是可以去搜罗一下相关的方法。<br>再者，PhoneGap也是有调试工具的，只不过需要安装它测试app。<br>这也是一种方法，不过个人还是偏爱Weinre或则BrowserSync的测试工具。</p>\n<p>以上。是我整理的一些移动端测试的方法。欢迎补充~</p>\n"},{"title":"threeJS 学习笔记 - 材质","date":"2018-08-23T04:15:58.000Z","_content":"\n一个材质结合 THREE.Geometry 对象，可以构成 THREE.Mesh 对象。材质就相当于物体模型的皮肤，决定物体的外观光泽，看上去是不是像金属或者线框外表等。\n\n## threeJS 提供的材质\n\n- MeshBasicMaterial：__网格基础材质__。基础材质，用于给几何体赋予一种简单的颜色，或者显示几何体的线框。\n- MeshDepthMaterial：__网格深度材质__。这个材质使用从摄像机到网格的距离来决定如何给网格上色。\n- MeshNormalMaterial：__网格法向材质__。这是一种简单的材质，根据法向向量计算物体表面的颜色。\n- MeshFaceMaterial：__网格面材质__。这是一个容器，可以为几何体的各个表面指定不同的材质。\n- MeshLambertMaterial：__网格Lambert材质__。这是一种考虑光照影响的材质，用于创建暗淡的、不光亮的物体。\n- MeshPhongMaterial：__网格Phong式材质__。这是一种考虑光照影响的材质，用于创建光亮的物体。\n- ShaderMaterial：__着色器材质__。这种材质允许使用自定义的着色器程序，直接控制顶点的放置方式以及像素的着色方式。\n- LineBasicMaterial：__直线基础材质__。这种材质可以用于 THREE.Line（直线）几何体，用来创建着色的直线。\n- LineDashMaterial：__直线基础材质__。 这种材质与 LineBasicMaterial（直线基础材质）一样，但允许创建出一种虚线的效果。\n\n## 3种常用材质\n基础属性常用的了解下：\n\n- ID：标识材质\n- name： 名称\n- opacity：透明度，结合transparent使用，范围为0~1\n- transparent：是否透明，如果为true则结合opacity设置透明度。如果为false则物体不透明\n- visible：是否可见，false则看不见，默认可以看见\n- side：侧面，觉得几何体的哪一面应用这个材质，默认为THREE.FrontSide(前外面)，还有THREE.BackSide(后内面)和THREE.DoubleSide(两面)\n- needUpdate：如果为true，则在几何体使用新的材质的时候更新材质缓存\n\n### ① THREE.MeshBasicMaterial 基础网格材质\n使用这种材质的网格，通常被渲染成简单的多边形，而且可以选择想要线框。除了一些THREE.Material的属性以外，还有如下属性\n\n- color：设置材质的颜色\n- wireframe：如果为true，则将材质渲染成线框，在调试的时候可以起到很好的作用\n- wireframeLinewidth：wireframe为true时，设置线框中线的宽度\n- wireframeLinecap：决定线框端点如何显示，可选的值 round，bevel(斜角)和miter(尖角)。\n- vertexColors：通过这属性，定义顶点的颜色，在canvasRender中不起作用。\n- fog：决定单个材质的是否受全局雾化的影响。 \n\n>对于fog属性，在全局中如果设定了雾化属性，那么本应该对所有场景的物体都添加雾化效果。\n例如：\n```\nscene.fog=new THREE.Fog(0xffffff,0.015,100)\n```\n而如果在当前材质中设置的如\n```\nvar cubeGeo= new THREE.CubeGeometry(30,30,30);\nvar cubeMat= new THREE.MeshBasicMaterial({color:\"0x0c0c0c\",fog:false})\nvar cude= new THREE.Mesh(cubeGeo,cubeMat);\nscene.add(cube);\n```\n则在当前这个cude方块中，并不能体现雾化效果。\n```\nmaterial.wireframe = true;\n```\nwireframe是否为true  显示如下\n![](/images/WechatIMG42820.png)\n![](/images/WechatIMG42821.png)\n\n### ② THREE.MeshLambertMaterial暗淡不发光\n该材质对光源有反应，除了之前说过的color，transparent，opacity，fog等属性，还有一些特有的属性，总结起来就只有2个\n\n- ambient：设置材质的环境色，和AmbientLight光源一起使用，这个颜色会与环境光的颜色相乘。即是对光源作出反应。\n- emissive：设置材质发射的颜色，不是一种光源，而是一种不受光照影响的颜色。默认为黑色\n```\nvar cubeGeometry = new THREE.BoxGeometry(15, 15, 15);\nvar meshMaterial = new THREE.MeshLamebertMaterial({color: 0x7777ff});\nvar cube = new THREE.Mesh(cubeGeometry, meshMaterial);\n```\n![](/images/WechatIMG42823.png)\n\n### ③ THREE.MeshPhongMaterial金属发亮的物体\n该材质对光源有反应，除了之前说过的color，transparent，opacity，fog等属性，还有一些特有的属性，总结起来有4个\n\n- ambient：设置材质的环境色，和AmbientLight光源一起使用，这个颜色会与环境光的颜色相乘。即是对光源作出反应。\n- emissive：设置材质发射的颜色，不是一种光源，而是一种不受光照影响的颜色。默认为黑色\n- specular：指定该材质的光亮程度及其高光部分的颜色，如果设置成和color属性相同的颜色，则会得到另一个更加类似金属的材质，如果设置成grey灰色，则看起来像塑料\n- shininess：指定高光部分的亮度，默认值为30.\n```\n var meshMaterial = new THREE.MeshPhongMaterial({\n        color: 0x7777ff，\n        specular:0x7777ff,\n        shininess:30\n});\n```\n![](/images/QQ20180727-183707.gif)\n","source":"_posts/threeJS-学习笔记-材质.md","raw":"---\ntitle: threeJS 学习笔记 - 材质\ndate: 2018-08-23 12:15:58\ntags: [threejs]\ncategories: [threejs]\n---\n\n一个材质结合 THREE.Geometry 对象，可以构成 THREE.Mesh 对象。材质就相当于物体模型的皮肤，决定物体的外观光泽，看上去是不是像金属或者线框外表等。\n\n## threeJS 提供的材质\n\n- MeshBasicMaterial：__网格基础材质__。基础材质，用于给几何体赋予一种简单的颜色，或者显示几何体的线框。\n- MeshDepthMaterial：__网格深度材质__。这个材质使用从摄像机到网格的距离来决定如何给网格上色。\n- MeshNormalMaterial：__网格法向材质__。这是一种简单的材质，根据法向向量计算物体表面的颜色。\n- MeshFaceMaterial：__网格面材质__。这是一个容器，可以为几何体的各个表面指定不同的材质。\n- MeshLambertMaterial：__网格Lambert材质__。这是一种考虑光照影响的材质，用于创建暗淡的、不光亮的物体。\n- MeshPhongMaterial：__网格Phong式材质__。这是一种考虑光照影响的材质，用于创建光亮的物体。\n- ShaderMaterial：__着色器材质__。这种材质允许使用自定义的着色器程序，直接控制顶点的放置方式以及像素的着色方式。\n- LineBasicMaterial：__直线基础材质__。这种材质可以用于 THREE.Line（直线）几何体，用来创建着色的直线。\n- LineDashMaterial：__直线基础材质__。 这种材质与 LineBasicMaterial（直线基础材质）一样，但允许创建出一种虚线的效果。\n\n## 3种常用材质\n基础属性常用的了解下：\n\n- ID：标识材质\n- name： 名称\n- opacity：透明度，结合transparent使用，范围为0~1\n- transparent：是否透明，如果为true则结合opacity设置透明度。如果为false则物体不透明\n- visible：是否可见，false则看不见，默认可以看见\n- side：侧面，觉得几何体的哪一面应用这个材质，默认为THREE.FrontSide(前外面)，还有THREE.BackSide(后内面)和THREE.DoubleSide(两面)\n- needUpdate：如果为true，则在几何体使用新的材质的时候更新材质缓存\n\n### ① THREE.MeshBasicMaterial 基础网格材质\n使用这种材质的网格，通常被渲染成简单的多边形，而且可以选择想要线框。除了一些THREE.Material的属性以外，还有如下属性\n\n- color：设置材质的颜色\n- wireframe：如果为true，则将材质渲染成线框，在调试的时候可以起到很好的作用\n- wireframeLinewidth：wireframe为true时，设置线框中线的宽度\n- wireframeLinecap：决定线框端点如何显示，可选的值 round，bevel(斜角)和miter(尖角)。\n- vertexColors：通过这属性，定义顶点的颜色，在canvasRender中不起作用。\n- fog：决定单个材质的是否受全局雾化的影响。 \n\n>对于fog属性，在全局中如果设定了雾化属性，那么本应该对所有场景的物体都添加雾化效果。\n例如：\n```\nscene.fog=new THREE.Fog(0xffffff,0.015,100)\n```\n而如果在当前材质中设置的如\n```\nvar cubeGeo= new THREE.CubeGeometry(30,30,30);\nvar cubeMat= new THREE.MeshBasicMaterial({color:\"0x0c0c0c\",fog:false})\nvar cude= new THREE.Mesh(cubeGeo,cubeMat);\nscene.add(cube);\n```\n则在当前这个cude方块中，并不能体现雾化效果。\n```\nmaterial.wireframe = true;\n```\nwireframe是否为true  显示如下\n![](/images/WechatIMG42820.png)\n![](/images/WechatIMG42821.png)\n\n### ② THREE.MeshLambertMaterial暗淡不发光\n该材质对光源有反应，除了之前说过的color，transparent，opacity，fog等属性，还有一些特有的属性，总结起来就只有2个\n\n- ambient：设置材质的环境色，和AmbientLight光源一起使用，这个颜色会与环境光的颜色相乘。即是对光源作出反应。\n- emissive：设置材质发射的颜色，不是一种光源，而是一种不受光照影响的颜色。默认为黑色\n```\nvar cubeGeometry = new THREE.BoxGeometry(15, 15, 15);\nvar meshMaterial = new THREE.MeshLamebertMaterial({color: 0x7777ff});\nvar cube = new THREE.Mesh(cubeGeometry, meshMaterial);\n```\n![](/images/WechatIMG42823.png)\n\n### ③ THREE.MeshPhongMaterial金属发亮的物体\n该材质对光源有反应，除了之前说过的color，transparent，opacity，fog等属性，还有一些特有的属性，总结起来有4个\n\n- ambient：设置材质的环境色，和AmbientLight光源一起使用，这个颜色会与环境光的颜色相乘。即是对光源作出反应。\n- emissive：设置材质发射的颜色，不是一种光源，而是一种不受光照影响的颜色。默认为黑色\n- specular：指定该材质的光亮程度及其高光部分的颜色，如果设置成和color属性相同的颜色，则会得到另一个更加类似金属的材质，如果设置成grey灰色，则看起来像塑料\n- shininess：指定高光部分的亮度，默认值为30.\n```\n var meshMaterial = new THREE.MeshPhongMaterial({\n        color: 0x7777ff，\n        specular:0x7777ff,\n        shininess:30\n});\n```\n![](/images/QQ20180727-183707.gif)\n","slug":"threeJS-学习笔记-材质","published":1,"updated":"2018-08-23T07:49:57.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl69pcke000icuv3htkszpki","content":"<p>一个材质结合 THREE.Geometry 对象，可以构成 THREE.Mesh 对象。材质就相当于物体模型的皮肤，决定物体的外观光泽，看上去是不是像金属或者线框外表等。</p>\n<h2 id=\"threeJS-提供的材质\"><a href=\"#threeJS-提供的材质\" class=\"headerlink\" title=\"threeJS 提供的材质\"></a>threeJS 提供的材质</h2><ul>\n<li>MeshBasicMaterial：<strong>网格基础材质</strong>。基础材质，用于给几何体赋予一种简单的颜色，或者显示几何体的线框。</li>\n<li>MeshDepthMaterial：<strong>网格深度材质</strong>。这个材质使用从摄像机到网格的距离来决定如何给网格上色。</li>\n<li>MeshNormalMaterial：<strong>网格法向材质</strong>。这是一种简单的材质，根据法向向量计算物体表面的颜色。</li>\n<li>MeshFaceMaterial：<strong>网格面材质</strong>。这是一个容器，可以为几何体的各个表面指定不同的材质。</li>\n<li>MeshLambertMaterial：<strong>网格Lambert材质</strong>。这是一种考虑光照影响的材质，用于创建暗淡的、不光亮的物体。</li>\n<li>MeshPhongMaterial：<strong>网格Phong式材质</strong>。这是一种考虑光照影响的材质，用于创建光亮的物体。</li>\n<li>ShaderMaterial：<strong>着色器材质</strong>。这种材质允许使用自定义的着色器程序，直接控制顶点的放置方式以及像素的着色方式。</li>\n<li>LineBasicMaterial：<strong>直线基础材质</strong>。这种材质可以用于 THREE.Line（直线）几何体，用来创建着色的直线。</li>\n<li>LineDashMaterial：<strong>直线基础材质</strong>。 这种材质与 LineBasicMaterial（直线基础材质）一样，但允许创建出一种虚线的效果。</li>\n</ul>\n<h2 id=\"3种常用材质\"><a href=\"#3种常用材质\" class=\"headerlink\" title=\"3种常用材质\"></a>3种常用材质</h2><p>基础属性常用的了解下：</p>\n<ul>\n<li>ID：标识材质</li>\n<li>name： 名称</li>\n<li>opacity：透明度，结合transparent使用，范围为0~1</li>\n<li>transparent：是否透明，如果为true则结合opacity设置透明度。如果为false则物体不透明</li>\n<li>visible：是否可见，false则看不见，默认可以看见</li>\n<li>side：侧面，觉得几何体的哪一面应用这个材质，默认为THREE.FrontSide(前外面)，还有THREE.BackSide(后内面)和THREE.DoubleSide(两面)</li>\n<li>needUpdate：如果为true，则在几何体使用新的材质的时候更新材质缓存</li>\n</ul>\n<h3 id=\"①-THREE-MeshBasicMaterial-基础网格材质\"><a href=\"#①-THREE-MeshBasicMaterial-基础网格材质\" class=\"headerlink\" title=\"① THREE.MeshBasicMaterial 基础网格材质\"></a>① THREE.MeshBasicMaterial 基础网格材质</h3><p>使用这种材质的网格，通常被渲染成简单的多边形，而且可以选择想要线框。除了一些THREE.Material的属性以外，还有如下属性</p>\n<ul>\n<li>color：设置材质的颜色</li>\n<li>wireframe：如果为true，则将材质渲染成线框，在调试的时候可以起到很好的作用</li>\n<li>wireframeLinewidth：wireframe为true时，设置线框中线的宽度</li>\n<li>wireframeLinecap：决定线框端点如何显示，可选的值 round，bevel(斜角)和miter(尖角)。</li>\n<li>vertexColors：通过这属性，定义顶点的颜色，在canvasRender中不起作用。</li>\n<li>fog：决定单个材质的是否受全局雾化的影响。 </li>\n</ul>\n<blockquote>\n<p>对于fog属性，在全局中如果设定了雾化属性，那么本应该对所有场景的物体都添加雾化效果。<br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">scene.fog=new THREE.Fog(0xffffff,0.015,100)</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>而如果在当前材质中设置的如<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var cubeGeo= new THREE.CubeGeometry(30,30,30);</span><br><span class=\"line\">var cubeMat= new THREE.MeshBasicMaterial(&#123;color:&quot;0x0c0c0c&quot;,fog:false&#125;)</span><br><span class=\"line\">var cude= new THREE.Mesh(cubeGeo,cubeMat);</span><br><span class=\"line\">scene.add(cube);</span><br></pre></td></tr></table></figure></p>\n<p>则在当前这个cude方块中，并不能体现雾化效果。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">material.wireframe = true;</span><br></pre></td></tr></table></figure></p>\n<p>wireframe是否为true  显示如下<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/WechatIMG42820.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/WechatIMG42821.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h3 id=\"②-THREE-MeshLambertMaterial暗淡不发光\"><a href=\"#②-THREE-MeshLambertMaterial暗淡不发光\" class=\"headerlink\" title=\"② THREE.MeshLambertMaterial暗淡不发光\"></a>② THREE.MeshLambertMaterial暗淡不发光</h3><p>该材质对光源有反应，除了之前说过的color，transparent，opacity，fog等属性，还有一些特有的属性，总结起来就只有2个</p>\n<ul>\n<li>ambient：设置材质的环境色，和AmbientLight光源一起使用，这个颜色会与环境光的颜色相乘。即是对光源作出反应。</li>\n<li>emissive：设置材质发射的颜色，不是一种光源，而是一种不受光照影响的颜色。默认为黑色<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var cubeGeometry = new THREE.BoxGeometry(15, 15, 15);</span><br><span class=\"line\">var meshMaterial = new THREE.MeshLamebertMaterial(&#123;color: 0x7777ff&#125;);</span><br><span class=\"line\">var cube = new THREE.Mesh(cubeGeometry, meshMaterial);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/WechatIMG42823.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"③-THREE-MeshPhongMaterial金属发亮的物体\"><a href=\"#③-THREE-MeshPhongMaterial金属发亮的物体\" class=\"headerlink\" title=\"③ THREE.MeshPhongMaterial金属发亮的物体\"></a>③ THREE.MeshPhongMaterial金属发亮的物体</h3><p>该材质对光源有反应，除了之前说过的color，transparent，opacity，fog等属性，还有一些特有的属性，总结起来有4个</p>\n<ul>\n<li>ambient：设置材质的环境色，和AmbientLight光源一起使用，这个颜色会与环境光的颜色相乘。即是对光源作出反应。</li>\n<li>emissive：设置材质发射的颜色，不是一种光源，而是一种不受光照影响的颜色。默认为黑色</li>\n<li>specular：指定该材质的光亮程度及其高光部分的颜色，如果设置成和color属性相同的颜色，则会得到另一个更加类似金属的材质，如果设置成grey灰色，则看起来像塑料</li>\n<li>shininess：指定高光部分的亮度，默认值为30.<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> var meshMaterial = new THREE.MeshPhongMaterial(&#123;</span><br><span class=\"line\">        color: 0x7777ff，</span><br><span class=\"line\">        specular:0x7777ff,</span><br><span class=\"line\">        shininess:30</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ20180727-183707.gif\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n","site":{"data":{}},"excerpt":"","more":"<p>一个材质结合 THREE.Geometry 对象，可以构成 THREE.Mesh 对象。材质就相当于物体模型的皮肤，决定物体的外观光泽，看上去是不是像金属或者线框外表等。</p>\n<h2 id=\"threeJS-提供的材质\"><a href=\"#threeJS-提供的材质\" class=\"headerlink\" title=\"threeJS 提供的材质\"></a>threeJS 提供的材质</h2><ul>\n<li>MeshBasicMaterial：<strong>网格基础材质</strong>。基础材质，用于给几何体赋予一种简单的颜色，或者显示几何体的线框。</li>\n<li>MeshDepthMaterial：<strong>网格深度材质</strong>。这个材质使用从摄像机到网格的距离来决定如何给网格上色。</li>\n<li>MeshNormalMaterial：<strong>网格法向材质</strong>。这是一种简单的材质，根据法向向量计算物体表面的颜色。</li>\n<li>MeshFaceMaterial：<strong>网格面材质</strong>。这是一个容器，可以为几何体的各个表面指定不同的材质。</li>\n<li>MeshLambertMaterial：<strong>网格Lambert材质</strong>。这是一种考虑光照影响的材质，用于创建暗淡的、不光亮的物体。</li>\n<li>MeshPhongMaterial：<strong>网格Phong式材质</strong>。这是一种考虑光照影响的材质，用于创建光亮的物体。</li>\n<li>ShaderMaterial：<strong>着色器材质</strong>。这种材质允许使用自定义的着色器程序，直接控制顶点的放置方式以及像素的着色方式。</li>\n<li>LineBasicMaterial：<strong>直线基础材质</strong>。这种材质可以用于 THREE.Line（直线）几何体，用来创建着色的直线。</li>\n<li>LineDashMaterial：<strong>直线基础材质</strong>。 这种材质与 LineBasicMaterial（直线基础材质）一样，但允许创建出一种虚线的效果。</li>\n</ul>\n<h2 id=\"3种常用材质\"><a href=\"#3种常用材质\" class=\"headerlink\" title=\"3种常用材质\"></a>3种常用材质</h2><p>基础属性常用的了解下：</p>\n<ul>\n<li>ID：标识材质</li>\n<li>name： 名称</li>\n<li>opacity：透明度，结合transparent使用，范围为0~1</li>\n<li>transparent：是否透明，如果为true则结合opacity设置透明度。如果为false则物体不透明</li>\n<li>visible：是否可见，false则看不见，默认可以看见</li>\n<li>side：侧面，觉得几何体的哪一面应用这个材质，默认为THREE.FrontSide(前外面)，还有THREE.BackSide(后内面)和THREE.DoubleSide(两面)</li>\n<li>needUpdate：如果为true，则在几何体使用新的材质的时候更新材质缓存</li>\n</ul>\n<h3 id=\"①-THREE-MeshBasicMaterial-基础网格材质\"><a href=\"#①-THREE-MeshBasicMaterial-基础网格材质\" class=\"headerlink\" title=\"① THREE.MeshBasicMaterial 基础网格材质\"></a>① THREE.MeshBasicMaterial 基础网格材质</h3><p>使用这种材质的网格，通常被渲染成简单的多边形，而且可以选择想要线框。除了一些THREE.Material的属性以外，还有如下属性</p>\n<ul>\n<li>color：设置材质的颜色</li>\n<li>wireframe：如果为true，则将材质渲染成线框，在调试的时候可以起到很好的作用</li>\n<li>wireframeLinewidth：wireframe为true时，设置线框中线的宽度</li>\n<li>wireframeLinecap：决定线框端点如何显示，可选的值 round，bevel(斜角)和miter(尖角)。</li>\n<li>vertexColors：通过这属性，定义顶点的颜色，在canvasRender中不起作用。</li>\n<li>fog：决定单个材质的是否受全局雾化的影响。 </li>\n</ul>\n<blockquote>\n<p>对于fog属性，在全局中如果设定了雾化属性，那么本应该对所有场景的物体都添加雾化效果。<br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">scene.fog=new THREE.Fog(0xffffff,0.015,100)</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>而如果在当前材质中设置的如<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var cubeGeo= new THREE.CubeGeometry(30,30,30);</span><br><span class=\"line\">var cubeMat= new THREE.MeshBasicMaterial(&#123;color:&quot;0x0c0c0c&quot;,fog:false&#125;)</span><br><span class=\"line\">var cude= new THREE.Mesh(cubeGeo,cubeMat);</span><br><span class=\"line\">scene.add(cube);</span><br></pre></td></tr></table></figure></p>\n<p>则在当前这个cude方块中，并不能体现雾化效果。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">material.wireframe = true;</span><br></pre></td></tr></table></figure></p>\n<p>wireframe是否为true  显示如下<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/WechatIMG42820.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/WechatIMG42821.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h3 id=\"②-THREE-MeshLambertMaterial暗淡不发光\"><a href=\"#②-THREE-MeshLambertMaterial暗淡不发光\" class=\"headerlink\" title=\"② THREE.MeshLambertMaterial暗淡不发光\"></a>② THREE.MeshLambertMaterial暗淡不发光</h3><p>该材质对光源有反应，除了之前说过的color，transparent，opacity，fog等属性，还有一些特有的属性，总结起来就只有2个</p>\n<ul>\n<li>ambient：设置材质的环境色，和AmbientLight光源一起使用，这个颜色会与环境光的颜色相乘。即是对光源作出反应。</li>\n<li>emissive：设置材质发射的颜色，不是一种光源，而是一种不受光照影响的颜色。默认为黑色<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var cubeGeometry = new THREE.BoxGeometry(15, 15, 15);</span><br><span class=\"line\">var meshMaterial = new THREE.MeshLamebertMaterial(&#123;color: 0x7777ff&#125;);</span><br><span class=\"line\">var cube = new THREE.Mesh(cubeGeometry, meshMaterial);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/WechatIMG42823.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"③-THREE-MeshPhongMaterial金属发亮的物体\"><a href=\"#③-THREE-MeshPhongMaterial金属发亮的物体\" class=\"headerlink\" title=\"③ THREE.MeshPhongMaterial金属发亮的物体\"></a>③ THREE.MeshPhongMaterial金属发亮的物体</h3><p>该材质对光源有反应，除了之前说过的color，transparent，opacity，fog等属性，还有一些特有的属性，总结起来有4个</p>\n<ul>\n<li>ambient：设置材质的环境色，和AmbientLight光源一起使用，这个颜色会与环境光的颜色相乘。即是对光源作出反应。</li>\n<li>emissive：设置材质发射的颜色，不是一种光源，而是一种不受光照影响的颜色。默认为黑色</li>\n<li>specular：指定该材质的光亮程度及其高光部分的颜色，如果设置成和color属性相同的颜色，则会得到另一个更加类似金属的材质，如果设置成grey灰色，则看起来像塑料</li>\n<li>shininess：指定高光部分的亮度，默认值为30.<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> var meshMaterial = new THREE.MeshPhongMaterial(&#123;</span><br><span class=\"line\">        color: 0x7777ff，</span><br><span class=\"line\">        specular:0x7777ff,</span><br><span class=\"line\">        shininess:30</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ20180727-183707.gif\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n"},{"title":"【Web移动端】web移动端软键盘状态","date":"2017-01-18T10:10:54.000Z","_content":"如今各种移动端设备盛行，虽然现在移动端开发已经非常通用和成熟，但是在开发过程中，还是经常遇到各种神奇的问题，在这里对于移动端web开发遇到的一些问题进行一一整理。\n对于移动端设备上的软键盘，在某些时候，会成为页面的一部分，并且不同型号的设备的软键盘对于Html布局的实现也有些不同。\n比如ios设备对于从下方推出键盘的时候，如果输入控件在页面推出之后，在键盘的高度的上方的话，则键盘是以一个浮层的方式弹出，并且将那个触发的控件推到键盘的上方。如果那个控件在页面底部，如果推出的键盘会覆盖该控件，系统会将整个页面向上推，直到将那个控件推到键盘上方为止。而android的实现的不同，有部分的android的实现和ios一样，有些android的机型的实现却不同，如果发现触发的input控件比键盘的高度底的时候，会自动将整个document的高度增加，增加到这个控件的高度超过键盘的高度为止。\n随后，在判断软键盘是否打开关闭的状态时，因为这两种展现方法的不同，我大概搜罗出可能的解决办法（没有测试全部机型）：\n# 软键盘打开，整个页面向上滑动\n这种在ios系统里面比较常见，这类的基本上可以通过js的blur的方式来获取事件。\n```\n$(\".input-content input\").on(\"blur\",function(){\n\t//键盘关闭事件 \n})\n```\n# 软键盘覆盖元素\n这种情况在ios和android中都有出现，这类的设备，可以通过检测窗口变化来识别\n```\nvar wHeight = window.innerHeight;//获取初始可视窗口高度  \nwindow.addEventListener('resize', function(){//监测窗口大小的变化事件  \n  var hh = window.innerHeight;//当前可视窗口高度  \n  var viewTop = $(window).scrollTop();//可视窗口高度顶部距离网页顶部的距离  \n  if(wHeight > hh){\n  \t//可以作为虚拟键盘弹出事件  \n  }else{\n  \t//可以作为虚拟键盘关闭事件  \n  }  \n  wHeight = hh;  \n});\n```\n# 通用方法\n```\nvar flag = false;\nvar wHeight = window.innerHeight;\nwindow.addEventListener('resize', function(){\n    var hh = window.innerHeight; \n    var viewTop = $(window).scrollTop();\n    if(wHeight > hh){\n        flag = false;\n    }else{\n        if(!flag){\n            alert($(\".input-content input\").val());\n            flag = true;\n        }else{\n            return;\n        }\n    }  \n    wHeight = hh;  \n});\n$(\".input-content input\").on(\"blur\",function(){\n    if(!flag){\n        alert($(\".input-content input\").val());\n        flag = true;\n    }else{\n        return;\n    }\n}).on(\"focus\", function(){\n    flag = false;\n});\n```","source":"_posts/【Web移动端】web移动端软键盘状态.md","raw":"---\ntitle: 【Web移动端】web移动端软键盘状态\ndate: 2017-01-18 18:10:54\ntags: [Web移动端,JavaScript]\ncategories: [JavaScript]\n---\n如今各种移动端设备盛行，虽然现在移动端开发已经非常通用和成熟，但是在开发过程中，还是经常遇到各种神奇的问题，在这里对于移动端web开发遇到的一些问题进行一一整理。\n对于移动端设备上的软键盘，在某些时候，会成为页面的一部分，并且不同型号的设备的软键盘对于Html布局的实现也有些不同。\n比如ios设备对于从下方推出键盘的时候，如果输入控件在页面推出之后，在键盘的高度的上方的话，则键盘是以一个浮层的方式弹出，并且将那个触发的控件推到键盘的上方。如果那个控件在页面底部，如果推出的键盘会覆盖该控件，系统会将整个页面向上推，直到将那个控件推到键盘上方为止。而android的实现的不同，有部分的android的实现和ios一样，有些android的机型的实现却不同，如果发现触发的input控件比键盘的高度底的时候，会自动将整个document的高度增加，增加到这个控件的高度超过键盘的高度为止。\n随后，在判断软键盘是否打开关闭的状态时，因为这两种展现方法的不同，我大概搜罗出可能的解决办法（没有测试全部机型）：\n# 软键盘打开，整个页面向上滑动\n这种在ios系统里面比较常见，这类的基本上可以通过js的blur的方式来获取事件。\n```\n$(\".input-content input\").on(\"blur\",function(){\n\t//键盘关闭事件 \n})\n```\n# 软键盘覆盖元素\n这种情况在ios和android中都有出现，这类的设备，可以通过检测窗口变化来识别\n```\nvar wHeight = window.innerHeight;//获取初始可视窗口高度  \nwindow.addEventListener('resize', function(){//监测窗口大小的变化事件  \n  var hh = window.innerHeight;//当前可视窗口高度  \n  var viewTop = $(window).scrollTop();//可视窗口高度顶部距离网页顶部的距离  \n  if(wHeight > hh){\n  \t//可以作为虚拟键盘弹出事件  \n  }else{\n  \t//可以作为虚拟键盘关闭事件  \n  }  \n  wHeight = hh;  \n});\n```\n# 通用方法\n```\nvar flag = false;\nvar wHeight = window.innerHeight;\nwindow.addEventListener('resize', function(){\n    var hh = window.innerHeight; \n    var viewTop = $(window).scrollTop();\n    if(wHeight > hh){\n        flag = false;\n    }else{\n        if(!flag){\n            alert($(\".input-content input\").val());\n            flag = true;\n        }else{\n            return;\n        }\n    }  \n    wHeight = hh;  \n});\n$(\".input-content input\").on(\"blur\",function(){\n    if(!flag){\n        alert($(\".input-content input\").val());\n        flag = true;\n    }else{\n        return;\n    }\n}).on(\"focus\", function(){\n    flag = false;\n});\n```","slug":"【Web移动端】web移动端软键盘状态","published":1,"updated":"2018-08-23T04:27:34.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl69pckf000kcuv3zb55vacb","content":"<p>如今各种移动端设备盛行，虽然现在移动端开发已经非常通用和成熟，但是在开发过程中，还是经常遇到各种神奇的问题，在这里对于移动端web开发遇到的一些问题进行一一整理。<br>对于移动端设备上的软键盘，在某些时候，会成为页面的一部分，并且不同型号的设备的软键盘对于Html布局的实现也有些不同。<br>比如ios设备对于从下方推出键盘的时候，如果输入控件在页面推出之后，在键盘的高度的上方的话，则键盘是以一个浮层的方式弹出，并且将那个触发的控件推到键盘的上方。如果那个控件在页面底部，如果推出的键盘会覆盖该控件，系统会将整个页面向上推，直到将那个控件推到键盘上方为止。而android的实现的不同，有部分的android的实现和ios一样，有些android的机型的实现却不同，如果发现触发的input控件比键盘的高度底的时候，会自动将整个document的高度增加，增加到这个控件的高度超过键盘的高度为止。<br>随后，在判断软键盘是否打开关闭的状态时，因为这两种展现方法的不同，我大概搜罗出可能的解决办法（没有测试全部机型）：</p>\n<h1 id=\"软键盘打开，整个页面向上滑动\"><a href=\"#软键盘打开，整个页面向上滑动\" class=\"headerlink\" title=\"软键盘打开，整个页面向上滑动\"></a>软键盘打开，整个页面向上滑动</h1><p>这种在ios系统里面比较常见，这类的基本上可以通过js的blur的方式来获取事件。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(&quot;.input-content input&quot;).on(&quot;blur&quot;,function()&#123;</span><br><span class=\"line\">\t//键盘关闭事件 </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"软键盘覆盖元素\"><a href=\"#软键盘覆盖元素\" class=\"headerlink\" title=\"软键盘覆盖元素\"></a>软键盘覆盖元素</h1><p>这种情况在ios和android中都有出现，这类的设备，可以通过检测窗口变化来识别<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var wHeight = window.innerHeight;//获取初始可视窗口高度  </span><br><span class=\"line\">window.addEventListener(&apos;resize&apos;, function()&#123;//监测窗口大小的变化事件  </span><br><span class=\"line\">  var hh = window.innerHeight;//当前可视窗口高度  </span><br><span class=\"line\">  var viewTop = $(window).scrollTop();//可视窗口高度顶部距离网页顶部的距离  </span><br><span class=\"line\">  if(wHeight &gt; hh)&#123;</span><br><span class=\"line\">  \t//可以作为虚拟键盘弹出事件  </span><br><span class=\"line\">  &#125;else&#123;</span><br><span class=\"line\">  \t//可以作为虚拟键盘关闭事件  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  wHeight = hh;  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"通用方法\"><a href=\"#通用方法\" class=\"headerlink\" title=\"通用方法\"></a>通用方法</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var flag = false;</span><br><span class=\"line\">var wHeight = window.innerHeight;</span><br><span class=\"line\">window.addEventListener(&apos;resize&apos;, function()&#123;</span><br><span class=\"line\">    var hh = window.innerHeight; </span><br><span class=\"line\">    var viewTop = $(window).scrollTop();</span><br><span class=\"line\">    if(wHeight &gt; hh)&#123;</span><br><span class=\"line\">        flag = false;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        if(!flag)&#123;</span><br><span class=\"line\">            alert($(&quot;.input-content input&quot;).val());</span><br><span class=\"line\">            flag = true;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    wHeight = hh;  </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(&quot;.input-content input&quot;).on(&quot;blur&quot;,function()&#123;</span><br><span class=\"line\">    if(!flag)&#123;</span><br><span class=\"line\">        alert($(&quot;.input-content input&quot;).val());</span><br><span class=\"line\">        flag = true;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).on(&quot;focus&quot;, function()&#123;</span><br><span class=\"line\">    flag = false;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>如今各种移动端设备盛行，虽然现在移动端开发已经非常通用和成熟，但是在开发过程中，还是经常遇到各种神奇的问题，在这里对于移动端web开发遇到的一些问题进行一一整理。<br>对于移动端设备上的软键盘，在某些时候，会成为页面的一部分，并且不同型号的设备的软键盘对于Html布局的实现也有些不同。<br>比如ios设备对于从下方推出键盘的时候，如果输入控件在页面推出之后，在键盘的高度的上方的话，则键盘是以一个浮层的方式弹出，并且将那个触发的控件推到键盘的上方。如果那个控件在页面底部，如果推出的键盘会覆盖该控件，系统会将整个页面向上推，直到将那个控件推到键盘上方为止。而android的实现的不同，有部分的android的实现和ios一样，有些android的机型的实现却不同，如果发现触发的input控件比键盘的高度底的时候，会自动将整个document的高度增加，增加到这个控件的高度超过键盘的高度为止。<br>随后，在判断软键盘是否打开关闭的状态时，因为这两种展现方法的不同，我大概搜罗出可能的解决办法（没有测试全部机型）：</p>\n<h1 id=\"软键盘打开，整个页面向上滑动\"><a href=\"#软键盘打开，整个页面向上滑动\" class=\"headerlink\" title=\"软键盘打开，整个页面向上滑动\"></a>软键盘打开，整个页面向上滑动</h1><p>这种在ios系统里面比较常见，这类的基本上可以通过js的blur的方式来获取事件。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(&quot;.input-content input&quot;).on(&quot;blur&quot;,function()&#123;</span><br><span class=\"line\">\t//键盘关闭事件 </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"软键盘覆盖元素\"><a href=\"#软键盘覆盖元素\" class=\"headerlink\" title=\"软键盘覆盖元素\"></a>软键盘覆盖元素</h1><p>这种情况在ios和android中都有出现，这类的设备，可以通过检测窗口变化来识别<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var wHeight = window.innerHeight;//获取初始可视窗口高度  </span><br><span class=\"line\">window.addEventListener(&apos;resize&apos;, function()&#123;//监测窗口大小的变化事件  </span><br><span class=\"line\">  var hh = window.innerHeight;//当前可视窗口高度  </span><br><span class=\"line\">  var viewTop = $(window).scrollTop();//可视窗口高度顶部距离网页顶部的距离  </span><br><span class=\"line\">  if(wHeight &gt; hh)&#123;</span><br><span class=\"line\">  \t//可以作为虚拟键盘弹出事件  </span><br><span class=\"line\">  &#125;else&#123;</span><br><span class=\"line\">  \t//可以作为虚拟键盘关闭事件  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  wHeight = hh;  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"通用方法\"><a href=\"#通用方法\" class=\"headerlink\" title=\"通用方法\"></a>通用方法</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var flag = false;</span><br><span class=\"line\">var wHeight = window.innerHeight;</span><br><span class=\"line\">window.addEventListener(&apos;resize&apos;, function()&#123;</span><br><span class=\"line\">    var hh = window.innerHeight; </span><br><span class=\"line\">    var viewTop = $(window).scrollTop();</span><br><span class=\"line\">    if(wHeight &gt; hh)&#123;</span><br><span class=\"line\">        flag = false;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        if(!flag)&#123;</span><br><span class=\"line\">            alert($(&quot;.input-content input&quot;).val());</span><br><span class=\"line\">            flag = true;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    wHeight = hh;  </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(&quot;.input-content input&quot;).on(&quot;blur&quot;,function()&#123;</span><br><span class=\"line\">    if(!flag)&#123;</span><br><span class=\"line\">        alert($(&quot;.input-content input&quot;).val());</span><br><span class=\"line\">        flag = true;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).on(&quot;focus&quot;, function()&#123;</span><br><span class=\"line\">    flag = false;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>"},{"title":"【接粽子】小游戏 Made With CreateJs","date":"2016-10-21T08:55:05.000Z","_content":"\n# 简介\n制作的一款类似于接金币一类的小游戏。公司为了在端午节做宣传用的。\n\n一款好的游戏离不开好的设计，在此先给亲爱的设计妹纸点个赞~ (❁'▽'❁)\n\n游戏效果如下：\n\n![](/images/808279392447213144-576x1024.jpg)\n\n第一次尝试用createJs框架去搭建H5游戏，确实比起以前自己用canvas写的要方面很多，也流畅了不少。\n# Demo\n在微信上发布的游戏，请用微信扫码查看：\n\n![](http://pan.baidu.com/share/qrcode?w=150&amp;h=150&amp;url=http://v.mob.com/wechat/catchzongzi/index.php)\n# 源码\ngithub：https://github.com/MJPiero/catchzongzi\n\n另外也在github上分享了源码。说实话本人对于我写的不算满意，因为…… 用了太多愚蠢的方法，不过当时时间有点赶，就没有花太多时间去优化。也希望大家能提出更好的优化方法来。大家一起学习一起奋进嘞嘿！！！！","source":"_posts/【接粽子】小游戏-Made-With-CreateJs.md","raw":"---\ntitle: 【接粽子】小游戏 Made With CreateJs\ntags: [mywork, canvas, h5game]\ncategories: [mywork]\ndate: 2016-10-21 16:55:05\n---\n\n# 简介\n制作的一款类似于接金币一类的小游戏。公司为了在端午节做宣传用的。\n\n一款好的游戏离不开好的设计，在此先给亲爱的设计妹纸点个赞~ (❁'▽'❁)\n\n游戏效果如下：\n\n![](/images/808279392447213144-576x1024.jpg)\n\n第一次尝试用createJs框架去搭建H5游戏，确实比起以前自己用canvas写的要方面很多，也流畅了不少。\n# Demo\n在微信上发布的游戏，请用微信扫码查看：\n\n![](http://pan.baidu.com/share/qrcode?w=150&amp;h=150&amp;url=http://v.mob.com/wechat/catchzongzi/index.php)\n# 源码\ngithub：https://github.com/MJPiero/catchzongzi\n\n另外也在github上分享了源码。说实话本人对于我写的不算满意，因为…… 用了太多愚蠢的方法，不过当时时间有点赶，就没有花太多时间去优化。也希望大家能提出更好的优化方法来。大家一起学习一起奋进嘞嘿！！！！","slug":"【接粽子】小游戏-Made-With-CreateJs","published":1,"updated":"2016-10-26T10:13:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl69pckj000ocuv3rkzgjtsm","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>制作的一款类似于接金币一类的小游戏。公司为了在端午节做宣传用的。</p>\n<p>一款好的游戏离不开好的设计，在此先给亲爱的设计妹纸点个赞~ (❁’▽’❁)</p>\n<p>游戏效果如下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/808279392447213144-576x1024.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>第一次尝试用createJs框架去搭建H5游戏，确实比起以前自己用canvas写的要方面很多，也流畅了不少。</p>\n<h1 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h1><p>在微信上发布的游戏，请用微信扫码查看：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://pan.baidu.com/share/qrcode?w=150&amp;h=150&amp;url=http://v.mob.com/wechat/catchzongzi/index.php\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><p>github：<a href=\"https://github.com/MJPiero/catchzongzi\" target=\"_blank\" rel=\"noopener\">https://github.com/MJPiero/catchzongzi</a></p>\n<p>另外也在github上分享了源码。说实话本人对于我写的不算满意，因为…… 用了太多愚蠢的方法，不过当时时间有点赶，就没有花太多时间去优化。也希望大家能提出更好的优化方法来。大家一起学习一起奋进嘞嘿！！！！</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>制作的一款类似于接金币一类的小游戏。公司为了在端午节做宣传用的。</p>\n<p>一款好的游戏离不开好的设计，在此先给亲爱的设计妹纸点个赞~ (❁’▽’❁)</p>\n<p>游戏效果如下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/808279392447213144-576x1024.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>第一次尝试用createJs框架去搭建H5游戏，确实比起以前自己用canvas写的要方面很多，也流畅了不少。</p>\n<h1 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h1><p>在微信上发布的游戏，请用微信扫码查看：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://pan.baidu.com/share/qrcode?w=150&amp;h=150&amp;url=http://v.mob.com/wechat/catchzongzi/index.php\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><p>github：<a href=\"https://github.com/MJPiero/catchzongzi\" target=\"_blank\" rel=\"noopener\">https://github.com/MJPiero/catchzongzi</a></p>\n<p>另外也在github上分享了源码。说实话本人对于我写的不算满意，因为…… 用了太多愚蠢的方法，不过当时时间有点赶，就没有花太多时间去优化。也希望大家能提出更好的优化方法来。大家一起学习一起奋进嘞嘿！！！！</p>\n"},{"title":"兼容多种模块规范","date":"2016-12-08T04:13:38.000Z","_content":"\n我们通常需要将类库代码包装在一个闭包内，为了能兼容Node、AMD、CMD以及一些常见的浏览器环境中，我们可以使用如下的方法去包装。\n```\n;(function (name, definition) {\n\n// 检测上下文环境是否为AMD或CMD\nif (typeof define === \"function\" && ( define.amd || define.cmd ) ) {\n\n\tdefine(definition);\n\n// 检测上下文环境是否为Node\n} else if ( typeof module !== 'undefined' && module.exports ) {\n\n\tmodule.exports = definition();\n\n} else {\n\t// 将模块的执行结果在window变量中，在浏览器中this指向window对象\n\tthis[name] = definition();\n}\n})('hello', function () {\n\tvar hello = function () {};\n\treturn hello;\n});\n```","source":"_posts/兼容多种模块规范.md","raw":"---\ntitle: 兼容多种模块规范\ndate: 2016-12-08 12:13:38\ntags: [JavaScript]\ncategories: [JavaScript]\n---\n\n我们通常需要将类库代码包装在一个闭包内，为了能兼容Node、AMD、CMD以及一些常见的浏览器环境中，我们可以使用如下的方法去包装。\n```\n;(function (name, definition) {\n\n// 检测上下文环境是否为AMD或CMD\nif (typeof define === \"function\" && ( define.amd || define.cmd ) ) {\n\n\tdefine(definition);\n\n// 检测上下文环境是否为Node\n} else if ( typeof module !== 'undefined' && module.exports ) {\n\n\tmodule.exports = definition();\n\n} else {\n\t// 将模块的执行结果在window变量中，在浏览器中this指向window对象\n\tthis[name] = definition();\n}\n})('hello', function () {\n\tvar hello = function () {};\n\treturn hello;\n});\n```","slug":"兼容多种模块规范","published":1,"updated":"2018-02-04T10:57:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl69pckl000qcuv30m8yffk4","content":"<p>我们通常需要将类库代码包装在一个闭包内，为了能兼容Node、AMD、CMD以及一些常见的浏览器环境中，我们可以使用如下的方法去包装。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">;(function (name, definition) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">// 检测上下文环境是否为AMD或CMD</span><br><span class=\"line\">if (typeof define === &quot;function&quot; &amp;&amp; ( define.amd || define.cmd ) ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdefine(definition);</span><br><span class=\"line\"></span><br><span class=\"line\">// 检测上下文环境是否为Node</span><br><span class=\"line\">&#125; else if ( typeof module !== &apos;undefined&apos; &amp;&amp; module.exports ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmodule.exports = definition();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">\t// 将模块的执行结果在window变量中，在浏览器中this指向window对象</span><br><span class=\"line\">\tthis[name] = definition();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)(&apos;hello&apos;, function () &#123;</span><br><span class=\"line\">\tvar hello = function () &#123;&#125;;</span><br><span class=\"line\">\treturn hello;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>我们通常需要将类库代码包装在一个闭包内，为了能兼容Node、AMD、CMD以及一些常见的浏览器环境中，我们可以使用如下的方法去包装。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">;(function (name, definition) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">// 检测上下文环境是否为AMD或CMD</span><br><span class=\"line\">if (typeof define === &quot;function&quot; &amp;&amp; ( define.amd || define.cmd ) ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdefine(definition);</span><br><span class=\"line\"></span><br><span class=\"line\">// 检测上下文环境是否为Node</span><br><span class=\"line\">&#125; else if ( typeof module !== &apos;undefined&apos; &amp;&amp; module.exports ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmodule.exports = definition();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">\t// 将模块的执行结果在window变量中，在浏览器中this指向window对象</span><br><span class=\"line\">\tthis[name] = definition();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)(&apos;hello&apos;, function () &#123;</span><br><span class=\"line\">\tvar hello = function () &#123;&#125;;</span><br><span class=\"line\">\treturn hello;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n"},{"title":"包与NPM","date":"2016-12-08T02:39:20.000Z","_content":"\n在说到NPM之前，应该先提及CommonJS的包规范。\n\nCommonJS包规范定义很简单，它是由包结构和包描述文件两个部分组成。\n\n# 包结构\n\n包结构是用于组织包中的各种文件。完全符合CommonJS规范的包目录应该包含如下文件。\n\n* package.json ———— 包描述文件。\n* bin ———— 用于存放可执行二进制文件的目录。\n* lib ———— 用于存放js代码的目录。\n* doc ———— 用于存放文档的目录。\n* test ———— 用于存放单元测试用例的代码。\n\n# 包描述文件\n\n包描述文件用于表达非代码相关的信息，它是一个JSON格式的文件（package.json），位于根目录下。\n\n这里我们就只介绍 NPM 的 package.json 文件定义了哪些必需的字段：\n\n* name ———— 项目名称。\n* version ———— 版本。在 http://semver.org/ 上有详细的定义，通常为 major.minor.revision 格式。\n* author ———— 作者。\n* description ———— 项目简介。\n* keywords ———— 关键词数组。用于NPM中做分类搜索的。\n* repository ———— 托管源代码的位置列表。示例：`{ \"type\": \"git\", \"url\": \"https://package/path\" }`\n* license ———— 当前包所使用的许可证列表。示例：`[{ \"type\": \"GPLv2\", \"url\": \"http://www.example.com/licenses/gpl.html\", }]`\n* engines ———— 指明该项目所需要的nodejs版本。\n* bugs ———— 返回bug的网页地址或则邮箱地址。\n* contributors ———— 贡献者列表。\n* scripts ———— 指定了运行脚本命令的npm命令行缩写。可以自行写好运行脚本。\n* dependencies ———— 指定了项目运行所依赖的模块。`npm install XX --save`\n* devDependencies ———— 指定项目开发所需要的模块。`npm install XX --save-dev`\n> * __波浪号（tilde）+指定版本：__比如~1.2.2，表示安装1.2.x的最新版本（不低于1.2.2），但是不安装1.3.x，也就是说安装时不改变大版本号和次要版本号。\n> * __插入号（caret）+指定版本：__比如ˆ1.2.2，表示安装1.x.x的最新版本（不低于1.2.2），但是不安装2.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。\n> * __latest：__安装最新版本。\n* peerDependencies ———— 用来供插件指定其所需要的主工具的版本（从npm 3.0版开始，peerDependencies不再会默认安装了）。\n* bin ———— 用来指定各个内部命令对应的可执行文件的位置。\n* main ———— 指定加载的入口文件。\n* config ———— 用于向环境变量输出值。示例：`{ \"port\" : \"8080\" }`，则在`server.js`脚本就可以直接引用config里的值 `http.createServer(...).listen(process.env.npm_package_config_port)`\n\n下面是express项目的package.json文件，可以参考下：\n```\n{\n\t\"name\": \"express\",\n\t\"description\": \"Sinatra inspired web development framework\",\n\t\"version\": \"3.3.4\",\n\t\"author\": \"TJ Holowaychuk <tj@vision-media.ca>\",\n\t\"contributors\": [\n\t\t{\n\t\t\t\"name\": \"TJ Holowaychuk\",\n\t\t\t\"email\": \"tj@vision-media.ca\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Aaron Heckmann\",\n\t\t\t\"email\": \"aaron.heckmann+github@gmail.com\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Ciaran Jessup\",\n\t\t\t\"email\": \"ciaranj@gmail.com\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Guillermo Rauch\",\n\t\t\t\"email\": \"rauchg@gmail.com\"\n\t\t}\n\t],\n\t\"dependencies\": {\n\t\t\"connect\": \"2.8.4\",\n\t\t\"commander\": \"1.2.0\",\n\t\t\"range-parser\": \"0.0.4\",\n\t\t\"mkdirp\": \"0.3.5\",\n\t\t\"cookie\": \"0.1.0\",\n\t\t\"buffer-crc32\": \"0.2.1\",\n\t\t\"fresh\": \"0.1.0\",\n\t\t\"methods\": \"0.0.1\",\n\t\t\"send\": \"0.1.3\",\n\t\t\"cookie-signature\": \"1.0.1\",\n\t\t\"debug\": \"*\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ejs\": \"*\",\n\t\t\"mocha\": \"*\",\n\t\t\"jade\": \"0.30.0\",\n\t\t\"hjs\": \"*\",\n\t\t\"stylus\": \"*\",\n\t\t\"should\": \"*\",\n\t\t\"connect-redis\": \"*\",\n\t\t\"marked\": \"*\",\n\t\t\"supertest\": \"0.6.0\"\n\t},\n\t\"keywords\": [\n\t\t\"express\",\n\t\t\"framework\",\n\t\t\"sinatra\",\n\t\t\"web\",\n\t\t\"rest\",\n\t\t\"restful\",\n\t\t\"router\",\n\t\t\"app\",\n\t\t\"api\"\n\t],\n\t\"repository\": \"git://github.com/visionmedia/express\",\n\t\"main\": \"index\",\n\t\"bin\": {\n\t\t\"express\": \"./bin/express\"\n\t},\n\t\"scripts\": {\n\t\t\"prepublish\": \"npm prune\",\n\t\t\"test\": \"make test\"\n\t},\n\t\"engines\": {\n\t\"node\": \"*\"\n\t}\n}\n```\n> __参考文献：__\n> - 《深入浅出Node.js》朴灵\n> - [http://javascript.ruanyifeng.com/nodejs/packagejson.html](http://javascript.ruanyifeng.com/nodejs/packagejson.html)","source":"_posts/包与NPM.md","raw":"---\ntitle: 包与NPM\ntags: [nodeJs]\ncategories: [nodeJs]\ndate: 2016-12-08 10:39:20\n---\n\n在说到NPM之前，应该先提及CommonJS的包规范。\n\nCommonJS包规范定义很简单，它是由包结构和包描述文件两个部分组成。\n\n# 包结构\n\n包结构是用于组织包中的各种文件。完全符合CommonJS规范的包目录应该包含如下文件。\n\n* package.json ———— 包描述文件。\n* bin ———— 用于存放可执行二进制文件的目录。\n* lib ———— 用于存放js代码的目录。\n* doc ———— 用于存放文档的目录。\n* test ———— 用于存放单元测试用例的代码。\n\n# 包描述文件\n\n包描述文件用于表达非代码相关的信息，它是一个JSON格式的文件（package.json），位于根目录下。\n\n这里我们就只介绍 NPM 的 package.json 文件定义了哪些必需的字段：\n\n* name ———— 项目名称。\n* version ———— 版本。在 http://semver.org/ 上有详细的定义，通常为 major.minor.revision 格式。\n* author ———— 作者。\n* description ———— 项目简介。\n* keywords ———— 关键词数组。用于NPM中做分类搜索的。\n* repository ———— 托管源代码的位置列表。示例：`{ \"type\": \"git\", \"url\": \"https://package/path\" }`\n* license ———— 当前包所使用的许可证列表。示例：`[{ \"type\": \"GPLv2\", \"url\": \"http://www.example.com/licenses/gpl.html\", }]`\n* engines ———— 指明该项目所需要的nodejs版本。\n* bugs ———— 返回bug的网页地址或则邮箱地址。\n* contributors ———— 贡献者列表。\n* scripts ———— 指定了运行脚本命令的npm命令行缩写。可以自行写好运行脚本。\n* dependencies ———— 指定了项目运行所依赖的模块。`npm install XX --save`\n* devDependencies ———— 指定项目开发所需要的模块。`npm install XX --save-dev`\n> * __波浪号（tilde）+指定版本：__比如~1.2.2，表示安装1.2.x的最新版本（不低于1.2.2），但是不安装1.3.x，也就是说安装时不改变大版本号和次要版本号。\n> * __插入号（caret）+指定版本：__比如ˆ1.2.2，表示安装1.x.x的最新版本（不低于1.2.2），但是不安装2.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。\n> * __latest：__安装最新版本。\n* peerDependencies ———— 用来供插件指定其所需要的主工具的版本（从npm 3.0版开始，peerDependencies不再会默认安装了）。\n* bin ———— 用来指定各个内部命令对应的可执行文件的位置。\n* main ———— 指定加载的入口文件。\n* config ———— 用于向环境变量输出值。示例：`{ \"port\" : \"8080\" }`，则在`server.js`脚本就可以直接引用config里的值 `http.createServer(...).listen(process.env.npm_package_config_port)`\n\n下面是express项目的package.json文件，可以参考下：\n```\n{\n\t\"name\": \"express\",\n\t\"description\": \"Sinatra inspired web development framework\",\n\t\"version\": \"3.3.4\",\n\t\"author\": \"TJ Holowaychuk <tj@vision-media.ca>\",\n\t\"contributors\": [\n\t\t{\n\t\t\t\"name\": \"TJ Holowaychuk\",\n\t\t\t\"email\": \"tj@vision-media.ca\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Aaron Heckmann\",\n\t\t\t\"email\": \"aaron.heckmann+github@gmail.com\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Ciaran Jessup\",\n\t\t\t\"email\": \"ciaranj@gmail.com\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Guillermo Rauch\",\n\t\t\t\"email\": \"rauchg@gmail.com\"\n\t\t}\n\t],\n\t\"dependencies\": {\n\t\t\"connect\": \"2.8.4\",\n\t\t\"commander\": \"1.2.0\",\n\t\t\"range-parser\": \"0.0.4\",\n\t\t\"mkdirp\": \"0.3.5\",\n\t\t\"cookie\": \"0.1.0\",\n\t\t\"buffer-crc32\": \"0.2.1\",\n\t\t\"fresh\": \"0.1.0\",\n\t\t\"methods\": \"0.0.1\",\n\t\t\"send\": \"0.1.3\",\n\t\t\"cookie-signature\": \"1.0.1\",\n\t\t\"debug\": \"*\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ejs\": \"*\",\n\t\t\"mocha\": \"*\",\n\t\t\"jade\": \"0.30.0\",\n\t\t\"hjs\": \"*\",\n\t\t\"stylus\": \"*\",\n\t\t\"should\": \"*\",\n\t\t\"connect-redis\": \"*\",\n\t\t\"marked\": \"*\",\n\t\t\"supertest\": \"0.6.0\"\n\t},\n\t\"keywords\": [\n\t\t\"express\",\n\t\t\"framework\",\n\t\t\"sinatra\",\n\t\t\"web\",\n\t\t\"rest\",\n\t\t\"restful\",\n\t\t\"router\",\n\t\t\"app\",\n\t\t\"api\"\n\t],\n\t\"repository\": \"git://github.com/visionmedia/express\",\n\t\"main\": \"index\",\n\t\"bin\": {\n\t\t\"express\": \"./bin/express\"\n\t},\n\t\"scripts\": {\n\t\t\"prepublish\": \"npm prune\",\n\t\t\"test\": \"make test\"\n\t},\n\t\"engines\": {\n\t\"node\": \"*\"\n\t}\n}\n```\n> __参考文献：__\n> - 《深入浅出Node.js》朴灵\n> - [http://javascript.ruanyifeng.com/nodejs/packagejson.html](http://javascript.ruanyifeng.com/nodejs/packagejson.html)","slug":"包与NPM","published":1,"updated":"2016-12-08T04:07:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl69pckn000ucuv34a3w43eh","content":"<p>在说到NPM之前，应该先提及CommonJS的包规范。</p>\n<p>CommonJS包规范定义很简单，它是由包结构和包描述文件两个部分组成。</p>\n<h1 id=\"包结构\"><a href=\"#包结构\" class=\"headerlink\" title=\"包结构\"></a>包结构</h1><p>包结构是用于组织包中的各种文件。完全符合CommonJS规范的包目录应该包含如下文件。</p>\n<ul>\n<li>package.json ———— 包描述文件。</li>\n<li>bin ———— 用于存放可执行二进制文件的目录。</li>\n<li>lib ———— 用于存放js代码的目录。</li>\n<li>doc ———— 用于存放文档的目录。</li>\n<li>test ———— 用于存放单元测试用例的代码。</li>\n</ul>\n<h1 id=\"包描述文件\"><a href=\"#包描述文件\" class=\"headerlink\" title=\"包描述文件\"></a>包描述文件</h1><p>包描述文件用于表达非代码相关的信息，它是一个JSON格式的文件（package.json），位于根目录下。</p>\n<p>这里我们就只介绍 NPM 的 package.json 文件定义了哪些必需的字段：</p>\n<ul>\n<li>name ———— 项目名称。</li>\n<li>version ———— 版本。在 <a href=\"http://semver.org/\" target=\"_blank\" rel=\"noopener\">http://semver.org/</a> 上有详细的定义，通常为 major.minor.revision 格式。</li>\n<li>author ———— 作者。</li>\n<li>description ———— 项目简介。</li>\n<li>keywords ———— 关键词数组。用于NPM中做分类搜索的。</li>\n<li>repository ———— 托管源代码的位置列表。示例：<code>{ &quot;type&quot;: &quot;git&quot;, &quot;url&quot;: &quot;https://package/path&quot; }</code></li>\n<li>license ———— 当前包所使用的许可证列表。示例：<code>[{ &quot;type&quot;: &quot;GPLv2&quot;, &quot;url&quot;: &quot;http://www.example.com/licenses/gpl.html&quot;, }]</code></li>\n<li>engines ———— 指明该项目所需要的nodejs版本。</li>\n<li>bugs ———— 返回bug的网页地址或则邮箱地址。</li>\n<li>contributors ———— 贡献者列表。</li>\n<li>scripts ———— 指定了运行脚本命令的npm命令行缩写。可以自行写好运行脚本。</li>\n<li>dependencies ———— 指定了项目运行所依赖的模块。<code>npm install XX --save</code></li>\n<li>devDependencies ———— 指定项目开发所需要的模块。<code>npm install XX --save-dev</code><blockquote>\n<ul>\n<li><strong>波浪号（tilde）+指定版本：</strong>比如~1.2.2，表示安装1.2.x的最新版本（不低于1.2.2），但是不安装1.3.x，也就是说安装时不改变大版本号和次要版本号。</li>\n<li><strong>插入号（caret）+指定版本：</strong>比如ˆ1.2.2，表示安装1.x.x的最新版本（不低于1.2.2），但是不安装2.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。</li>\n<li><strong>latest：</strong>安装最新版本。</li>\n</ul>\n</blockquote>\n</li>\n<li>peerDependencies ———— 用来供插件指定其所需要的主工具的版本（从npm 3.0版开始，peerDependencies不再会默认安装了）。</li>\n<li>bin ———— 用来指定各个内部命令对应的可执行文件的位置。</li>\n<li>main ———— 指定加载的入口文件。</li>\n<li>config ———— 用于向环境变量输出值。示例：<code>{ &quot;port&quot; : &quot;8080&quot; }</code>，则在<code>server.js</code>脚本就可以直接引用config里的值 <code>http.createServer(...).listen(process.env.npm_package_config_port)</code></li>\n</ul>\n<p>下面是express项目的package.json文件，可以参考下：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;name&quot;: &quot;express&quot;,</span><br><span class=\"line\">\t&quot;description&quot;: &quot;Sinatra inspired web development framework&quot;,</span><br><span class=\"line\">\t&quot;version&quot;: &quot;3.3.4&quot;,</span><br><span class=\"line\">\t&quot;author&quot;: &quot;TJ Holowaychuk &lt;tj@vision-media.ca&gt;&quot;,</span><br><span class=\"line\">\t&quot;contributors&quot;: [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;name&quot;: &quot;TJ Holowaychuk&quot;,</span><br><span class=\"line\">\t\t\t&quot;email&quot;: &quot;tj@vision-media.ca&quot;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;name&quot;: &quot;Aaron Heckmann&quot;,</span><br><span class=\"line\">\t\t\t&quot;email&quot;: &quot;aaron.heckmann+github@gmail.com&quot;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;name&quot;: &quot;Ciaran Jessup&quot;,</span><br><span class=\"line\">\t\t\t&quot;email&quot;: &quot;ciaranj@gmail.com&quot;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;name&quot;: &quot;Guillermo Rauch&quot;,</span><br><span class=\"line\">\t\t\t&quot;email&quot;: &quot;rauchg@gmail.com&quot;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t&quot;dependencies&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;connect&quot;: &quot;2.8.4&quot;,</span><br><span class=\"line\">\t\t&quot;commander&quot;: &quot;1.2.0&quot;,</span><br><span class=\"line\">\t\t&quot;range-parser&quot;: &quot;0.0.4&quot;,</span><br><span class=\"line\">\t\t&quot;mkdirp&quot;: &quot;0.3.5&quot;,</span><br><span class=\"line\">\t\t&quot;cookie&quot;: &quot;0.1.0&quot;,</span><br><span class=\"line\">\t\t&quot;buffer-crc32&quot;: &quot;0.2.1&quot;,</span><br><span class=\"line\">\t\t&quot;fresh&quot;: &quot;0.1.0&quot;,</span><br><span class=\"line\">\t\t&quot;methods&quot;: &quot;0.0.1&quot;,</span><br><span class=\"line\">\t\t&quot;send&quot;: &quot;0.1.3&quot;,</span><br><span class=\"line\">\t\t&quot;cookie-signature&quot;: &quot;1.0.1&quot;,</span><br><span class=\"line\">\t\t&quot;debug&quot;: &quot;*&quot;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;ejs&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;mocha&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;jade&quot;: &quot;0.30.0&quot;,</span><br><span class=\"line\">\t\t&quot;hjs&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;stylus&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;should&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;connect-redis&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;marked&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;supertest&quot;: &quot;0.6.0&quot;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;keywords&quot;: [</span><br><span class=\"line\">\t\t&quot;express&quot;,</span><br><span class=\"line\">\t\t&quot;framework&quot;,</span><br><span class=\"line\">\t\t&quot;sinatra&quot;,</span><br><span class=\"line\">\t\t&quot;web&quot;,</span><br><span class=\"line\">\t\t&quot;rest&quot;,</span><br><span class=\"line\">\t\t&quot;restful&quot;,</span><br><span class=\"line\">\t\t&quot;router&quot;,</span><br><span class=\"line\">\t\t&quot;app&quot;,</span><br><span class=\"line\">\t\t&quot;api&quot;</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t&quot;repository&quot;: &quot;git://github.com/visionmedia/express&quot;,</span><br><span class=\"line\">\t&quot;main&quot;: &quot;index&quot;,</span><br><span class=\"line\">\t&quot;bin&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;express&quot;: &quot;./bin/express&quot;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;scripts&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;prepublish&quot;: &quot;npm prune&quot;,</span><br><span class=\"line\">\t\t&quot;test&quot;: &quot;make test&quot;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;engines&quot;: &#123;</span><br><span class=\"line\">\t&quot;node&quot;: &quot;*&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong>参考文献：</strong></p>\n<ul>\n<li>《深入浅出Node.js》朴灵</li>\n<li><a href=\"http://javascript.ruanyifeng.com/nodejs/packagejson.html\" target=\"_blank\" rel=\"noopener\">http://javascript.ruanyifeng.com/nodejs/packagejson.html</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>在说到NPM之前，应该先提及CommonJS的包规范。</p>\n<p>CommonJS包规范定义很简单，它是由包结构和包描述文件两个部分组成。</p>\n<h1 id=\"包结构\"><a href=\"#包结构\" class=\"headerlink\" title=\"包结构\"></a>包结构</h1><p>包结构是用于组织包中的各种文件。完全符合CommonJS规范的包目录应该包含如下文件。</p>\n<ul>\n<li>package.json ———— 包描述文件。</li>\n<li>bin ———— 用于存放可执行二进制文件的目录。</li>\n<li>lib ———— 用于存放js代码的目录。</li>\n<li>doc ———— 用于存放文档的目录。</li>\n<li>test ———— 用于存放单元测试用例的代码。</li>\n</ul>\n<h1 id=\"包描述文件\"><a href=\"#包描述文件\" class=\"headerlink\" title=\"包描述文件\"></a>包描述文件</h1><p>包描述文件用于表达非代码相关的信息，它是一个JSON格式的文件（package.json），位于根目录下。</p>\n<p>这里我们就只介绍 NPM 的 package.json 文件定义了哪些必需的字段：</p>\n<ul>\n<li>name ———— 项目名称。</li>\n<li>version ———— 版本。在 <a href=\"http://semver.org/\" target=\"_blank\" rel=\"noopener\">http://semver.org/</a> 上有详细的定义，通常为 major.minor.revision 格式。</li>\n<li>author ———— 作者。</li>\n<li>description ———— 项目简介。</li>\n<li>keywords ———— 关键词数组。用于NPM中做分类搜索的。</li>\n<li>repository ———— 托管源代码的位置列表。示例：<code>{ &quot;type&quot;: &quot;git&quot;, &quot;url&quot;: &quot;https://package/path&quot; }</code></li>\n<li>license ———— 当前包所使用的许可证列表。示例：<code>[{ &quot;type&quot;: &quot;GPLv2&quot;, &quot;url&quot;: &quot;http://www.example.com/licenses/gpl.html&quot;, }]</code></li>\n<li>engines ———— 指明该项目所需要的nodejs版本。</li>\n<li>bugs ———— 返回bug的网页地址或则邮箱地址。</li>\n<li>contributors ———— 贡献者列表。</li>\n<li>scripts ———— 指定了运行脚本命令的npm命令行缩写。可以自行写好运行脚本。</li>\n<li>dependencies ———— 指定了项目运行所依赖的模块。<code>npm install XX --save</code></li>\n<li>devDependencies ———— 指定项目开发所需要的模块。<code>npm install XX --save-dev</code><blockquote>\n<ul>\n<li><strong>波浪号（tilde）+指定版本：</strong>比如~1.2.2，表示安装1.2.x的最新版本（不低于1.2.2），但是不安装1.3.x，也就是说安装时不改变大版本号和次要版本号。</li>\n<li><strong>插入号（caret）+指定版本：</strong>比如ˆ1.2.2，表示安装1.x.x的最新版本（不低于1.2.2），但是不安装2.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。</li>\n<li><strong>latest：</strong>安装最新版本。</li>\n</ul>\n</blockquote>\n</li>\n<li>peerDependencies ———— 用来供插件指定其所需要的主工具的版本（从npm 3.0版开始，peerDependencies不再会默认安装了）。</li>\n<li>bin ———— 用来指定各个内部命令对应的可执行文件的位置。</li>\n<li>main ———— 指定加载的入口文件。</li>\n<li>config ———— 用于向环境变量输出值。示例：<code>{ &quot;port&quot; : &quot;8080&quot; }</code>，则在<code>server.js</code>脚本就可以直接引用config里的值 <code>http.createServer(...).listen(process.env.npm_package_config_port)</code></li>\n</ul>\n<p>下面是express项目的package.json文件，可以参考下：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;name&quot;: &quot;express&quot;,</span><br><span class=\"line\">\t&quot;description&quot;: &quot;Sinatra inspired web development framework&quot;,</span><br><span class=\"line\">\t&quot;version&quot;: &quot;3.3.4&quot;,</span><br><span class=\"line\">\t&quot;author&quot;: &quot;TJ Holowaychuk &lt;tj@vision-media.ca&gt;&quot;,</span><br><span class=\"line\">\t&quot;contributors&quot;: [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;name&quot;: &quot;TJ Holowaychuk&quot;,</span><br><span class=\"line\">\t\t\t&quot;email&quot;: &quot;tj@vision-media.ca&quot;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;name&quot;: &quot;Aaron Heckmann&quot;,</span><br><span class=\"line\">\t\t\t&quot;email&quot;: &quot;aaron.heckmann+github@gmail.com&quot;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;name&quot;: &quot;Ciaran Jessup&quot;,</span><br><span class=\"line\">\t\t\t&quot;email&quot;: &quot;ciaranj@gmail.com&quot;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;name&quot;: &quot;Guillermo Rauch&quot;,</span><br><span class=\"line\">\t\t\t&quot;email&quot;: &quot;rauchg@gmail.com&quot;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t&quot;dependencies&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;connect&quot;: &quot;2.8.4&quot;,</span><br><span class=\"line\">\t\t&quot;commander&quot;: &quot;1.2.0&quot;,</span><br><span class=\"line\">\t\t&quot;range-parser&quot;: &quot;0.0.4&quot;,</span><br><span class=\"line\">\t\t&quot;mkdirp&quot;: &quot;0.3.5&quot;,</span><br><span class=\"line\">\t\t&quot;cookie&quot;: &quot;0.1.0&quot;,</span><br><span class=\"line\">\t\t&quot;buffer-crc32&quot;: &quot;0.2.1&quot;,</span><br><span class=\"line\">\t\t&quot;fresh&quot;: &quot;0.1.0&quot;,</span><br><span class=\"line\">\t\t&quot;methods&quot;: &quot;0.0.1&quot;,</span><br><span class=\"line\">\t\t&quot;send&quot;: &quot;0.1.3&quot;,</span><br><span class=\"line\">\t\t&quot;cookie-signature&quot;: &quot;1.0.1&quot;,</span><br><span class=\"line\">\t\t&quot;debug&quot;: &quot;*&quot;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;ejs&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;mocha&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;jade&quot;: &quot;0.30.0&quot;,</span><br><span class=\"line\">\t\t&quot;hjs&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;stylus&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;should&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;connect-redis&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;marked&quot;: &quot;*&quot;,</span><br><span class=\"line\">\t\t&quot;supertest&quot;: &quot;0.6.0&quot;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;keywords&quot;: [</span><br><span class=\"line\">\t\t&quot;express&quot;,</span><br><span class=\"line\">\t\t&quot;framework&quot;,</span><br><span class=\"line\">\t\t&quot;sinatra&quot;,</span><br><span class=\"line\">\t\t&quot;web&quot;,</span><br><span class=\"line\">\t\t&quot;rest&quot;,</span><br><span class=\"line\">\t\t&quot;restful&quot;,</span><br><span class=\"line\">\t\t&quot;router&quot;,</span><br><span class=\"line\">\t\t&quot;app&quot;,</span><br><span class=\"line\">\t\t&quot;api&quot;</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t&quot;repository&quot;: &quot;git://github.com/visionmedia/express&quot;,</span><br><span class=\"line\">\t&quot;main&quot;: &quot;index&quot;,</span><br><span class=\"line\">\t&quot;bin&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;express&quot;: &quot;./bin/express&quot;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;scripts&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;prepublish&quot;: &quot;npm prune&quot;,</span><br><span class=\"line\">\t\t&quot;test&quot;: &quot;make test&quot;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;engines&quot;: &#123;</span><br><span class=\"line\">\t&quot;node&quot;: &quot;*&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong>参考文献：</strong></p>\n<ul>\n<li>《深入浅出Node.js》朴灵</li>\n<li><a href=\"http://javascript.ruanyifeng.com/nodejs/packagejson.html\" target=\"_blank\" rel=\"noopener\">http://javascript.ruanyifeng.com/nodejs/packagejson.html</a></li>\n</ul>\n</blockquote>\n"},{"title":"开启新世界的大门！(灬ºωº灬)","date":"2016-10-21T06:38:33.000Z","_content":"\n首先，欢迎你手残点进了此地！！！ξ( ✿＞◡❛)\n\n博主前端开发人员一枚，于今涉足行业将近2年，在之前干过漫画编辑做过网页设计，可谓上得了厅堂下得了厨房。然而水平有限，寻求志同道合人士共同学习进步。 (´∩ω∩｀)\n\n此博客内容仅仅是自己学习上的一些心得总结，并不一定是正确可取的，还希望发现BUG的小伙伴们积极指出错误！\n\n知错能改，善莫大焉。(⁰▿⁰) 还望大家文明交流，博主其实是玻璃心。(´▽`ʃ♡ƪ)","source":"_posts/开启新世界的大门！-灬ºωº灬.md","raw":"---\ntitle: 开启新世界的大门！(灬ºωº灬)\ntags: []\ncategories: []\ndate: 2016-10-21 14:38:33\n---\n\n首先，欢迎你手残点进了此地！！！ξ( ✿＞◡❛)\n\n博主前端开发人员一枚，于今涉足行业将近2年，在之前干过漫画编辑做过网页设计，可谓上得了厅堂下得了厨房。然而水平有限，寻求志同道合人士共同学习进步。 (´∩ω∩｀)\n\n此博客内容仅仅是自己学习上的一些心得总结，并不一定是正确可取的，还希望发现BUG的小伙伴们积极指出错误！\n\n知错能改，善莫大焉。(⁰▿⁰) 还望大家文明交流，博主其实是玻璃心。(´▽`ʃ♡ƪ)","slug":"开启新世界的大门！-灬ºωº灬","published":1,"updated":"2016-10-21T06:42:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl69pcko000vcuv3g0c0w43c","content":"<p>首先，欢迎你手残点进了此地！！！ξ( ✿＞◡❛)</p>\n<p>博主前端开发人员一枚，于今涉足行业将近2年，在之前干过漫画编辑做过网页设计，可谓上得了厅堂下得了厨房。然而水平有限，寻求志同道合人士共同学习进步。 (´∩ω∩｀)</p>\n<p>此博客内容仅仅是自己学习上的一些心得总结，并不一定是正确可取的，还希望发现BUG的小伙伴们积极指出错误！</p>\n<p>知错能改，善莫大焉。(⁰▿⁰) 还望大家文明交流，博主其实是玻璃心。(´▽`ʃ♡ƪ)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先，欢迎你手残点进了此地！！！ξ( ✿＞◡❛)</p>\n<p>博主前端开发人员一枚，于今涉足行业将近2年，在之前干过漫画编辑做过网页设计，可谓上得了厅堂下得了厨房。然而水平有限，寻求志同道合人士共同学习进步。 (´∩ω∩｀)</p>\n<p>此博客内容仅仅是自己学习上的一些心得总结，并不一定是正确可取的，还希望发现BUG的小伙伴们积极指出错误！</p>\n<p>知错能改，善莫大焉。(⁰▿⁰) 还望大家文明交流，博主其实是玻璃心。(´▽`ʃ♡ƪ)</p>\n"},{"title":"解决gem install SSL 证书错误","date":"2016-10-21T08:40:10.000Z","_content":"\n这个问题我是在替换gem镜像路径的时候遇到的。\n\n详情见：[解决国内Ruby Gem Install 失败问题](http://blog2.pierrothall.com/2016/10/21/%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%86%85Ruby-Gem-Install-%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/)\n\n这个其实也折腾了我一个多小时在网上找解决办法。\n# 问题\n相信有部分的人在按照上面方法安装的时候出现了和我一样的问题：\n\n![](/images/QQ截图20160413163537.png)\n\n在网上搜索一圈之后，解释是：\n> ruby 没有包含 SSL 证书，所以 https 的链接被服务器拒绝。\n\n本来这个情况下，只要改用http路径就好了，偏偏淘宝已经停止基于HTTP协议的镜像服务了。\n\n于是我继续在网上搜了一圈，找到了如下的解决办法（来源：https://gist.github.com/fnichol/867550 ）:\n# 解决\n先下载证书 http://curl.haxx.se/ca/cacert.pem ，然后再环境变量里设置 SSL_CERT_FILE 这个环境变量，并指向 cacert.pem 文件。\n\n![](/images/QQ截图20160413165101.png)\n\n之后再在`cmd.exe`中输入命令：\n\n```\nset SSL_CERT_FILE=C:\\path\\to\\cacert.pem\n```\n之后再按照上面的方法来操作一遍~~~\n\n![](/images/QQ截图20160413165633.png)\n\nPerfect！！","source":"_posts/解决gem-install-SSL-证书错误.md","raw":"---\ntitle: 解决gem install SSL 证书错误\ntags: [环境搭建, Ruby]\ncategories: [环境搭建]\ndate: 2016-10-21 16:40:10\n---\n\n这个问题我是在替换gem镜像路径的时候遇到的。\n\n详情见：[解决国内Ruby Gem Install 失败问题](http://blog2.pierrothall.com/2016/10/21/%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%86%85Ruby-Gem-Install-%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/)\n\n这个其实也折腾了我一个多小时在网上找解决办法。\n# 问题\n相信有部分的人在按照上面方法安装的时候出现了和我一样的问题：\n\n![](/images/QQ截图20160413163537.png)\n\n在网上搜索一圈之后，解释是：\n> ruby 没有包含 SSL 证书，所以 https 的链接被服务器拒绝。\n\n本来这个情况下，只要改用http路径就好了，偏偏淘宝已经停止基于HTTP协议的镜像服务了。\n\n于是我继续在网上搜了一圈，找到了如下的解决办法（来源：https://gist.github.com/fnichol/867550 ）:\n# 解决\n先下载证书 http://curl.haxx.se/ca/cacert.pem ，然后再环境变量里设置 SSL_CERT_FILE 这个环境变量，并指向 cacert.pem 文件。\n\n![](/images/QQ截图20160413165101.png)\n\n之后再在`cmd.exe`中输入命令：\n\n```\nset SSL_CERT_FILE=C:\\path\\to\\cacert.pem\n```\n之后再按照上面的方法来操作一遍~~~\n\n![](/images/QQ截图20160413165633.png)\n\nPerfect！！","slug":"解决gem-install-SSL-证书错误","published":1,"updated":"2016-12-08T02:40:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl69pckq000zcuv398de3iq3","content":"<p>这个问题我是在替换gem镜像路径的时候遇到的。</p>\n<p>详情见：<a href=\"http://blog2.pierrothall.com/2016/10/21/%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%86%85Ruby-Gem-Install-%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/\" target=\"_blank\" rel=\"noopener\">解决国内Ruby Gem Install 失败问题</a></p>\n<p>这个其实也折腾了我一个多小时在网上找解决办法。</p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>相信有部分的人在按照上面方法安装的时候出现了和我一样的问题：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20160413163537.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>在网上搜索一圈之后，解释是：</p>\n<blockquote>\n<p>ruby 没有包含 SSL 证书，所以 https 的链接被服务器拒绝。</p>\n</blockquote>\n<p>本来这个情况下，只要改用http路径就好了，偏偏淘宝已经停止基于HTTP协议的镜像服务了。</p>\n<p>于是我继续在网上搜了一圈，找到了如下的解决办法（来源：<a href=\"https://gist.github.com/fnichol/867550\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/fnichol/867550</a> ）:</p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><p>先下载证书 <a href=\"http://curl.haxx.se/ca/cacert.pem\" target=\"_blank\" rel=\"noopener\">http://curl.haxx.se/ca/cacert.pem</a> ，然后再环境变量里设置 SSL_CERT_FILE 这个环境变量，并指向 cacert.pem 文件。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20160413165101.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>之后再在<code>cmd.exe</code>中输入命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">set SSL_CERT_FILE=C:\\path\\to\\cacert.pem</span><br></pre></td></tr></table></figure>\n<p>之后再按照上面的方法来操作一遍~~~</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20160413165633.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>Perfect！！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这个问题我是在替换gem镜像路径的时候遇到的。</p>\n<p>详情见：<a href=\"http://blog2.pierrothall.com/2016/10/21/%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%86%85Ruby-Gem-Install-%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/\" target=\"_blank\" rel=\"noopener\">解决国内Ruby Gem Install 失败问题</a></p>\n<p>这个其实也折腾了我一个多小时在网上找解决办法。</p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>相信有部分的人在按照上面方法安装的时候出现了和我一样的问题：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20160413163537.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>在网上搜索一圈之后，解释是：</p>\n<blockquote>\n<p>ruby 没有包含 SSL 证书，所以 https 的链接被服务器拒绝。</p>\n</blockquote>\n<p>本来这个情况下，只要改用http路径就好了，偏偏淘宝已经停止基于HTTP协议的镜像服务了。</p>\n<p>于是我继续在网上搜了一圈，找到了如下的解决办法（来源：<a href=\"https://gist.github.com/fnichol/867550\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/fnichol/867550</a> ）:</p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><p>先下载证书 <a href=\"http://curl.haxx.se/ca/cacert.pem\" target=\"_blank\" rel=\"noopener\">http://curl.haxx.se/ca/cacert.pem</a> ，然后再环境变量里设置 SSL_CERT_FILE 这个环境变量，并指向 cacert.pem 文件。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20160413165101.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>之后再在<code>cmd.exe</code>中输入命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">set SSL_CERT_FILE=C:\\path\\to\\cacert.pem</span><br></pre></td></tr></table></figure>\n<p>之后再按照上面的方法来操作一遍~~~</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20160413165633.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>Perfect！！</p>\n"},{"title":"解决国内Ruby Gem Install 失败问题","date":"2016-10-21T06:55:48.000Z","_content":"\n做一个国内的程序员真的是很辛苦很辛苦，各种被墙，科技还怎么进步捏。好在上有政策下有对策，国内大神还是很良心的给我们提供了很多不少解决方案。\n\n淘宝团队提供了国内可以快速访问的镜像地址，官方地址：https://ruby.taobao.org/\n\n官方有详细的替换的方法，这里我也按照我的流程过一遍。\n# 安装Ruby\n首先，我的系统是win7。\n\n在window上安装Ruby，可以通过下载RubyInstaller工具（ http://rubyinstaller.org/ ）快速安装：\n\n![](/images/QQ截图20160413155659.png)\n# 替换成taobao镜像\n之后 `win+R` 键打开运行窗口，输入cmd 快速打开命令行程序。\n```\n$ gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/\n$ gem sources -l\n*** CURRENT SOURCES ***\n\nhttps://ruby.taobao.org\n# 请确保只有 ruby.taobao.org\n$ gem install rails\n```\n以上是淘宝官方的方法。很简单，然而现实总是没这么顺利…\n\n和我一样安装遇到SSL证书错误的请看这里：[解决gem install SSL 证书错误](http://blog2.pierrothall.com/2016/10/21/%E8%A7%A3%E5%86%B3gem-install-SSL-%E8%AF%81%E4%B9%A6%E9%94%99%E8%AF%AF/)","source":"_posts/解决国内Ruby-Gem-Install-失败问题.md","raw":"---\ntitle: 解决国内Ruby Gem Install 失败问题\ntags: [Ruby, 环境搭建]\ncategories: [环境搭建]\ndate: 2016-10-21 14:55:48\n---\n\n做一个国内的程序员真的是很辛苦很辛苦，各种被墙，科技还怎么进步捏。好在上有政策下有对策，国内大神还是很良心的给我们提供了很多不少解决方案。\n\n淘宝团队提供了国内可以快速访问的镜像地址，官方地址：https://ruby.taobao.org/\n\n官方有详细的替换的方法，这里我也按照我的流程过一遍。\n# 安装Ruby\n首先，我的系统是win7。\n\n在window上安装Ruby，可以通过下载RubyInstaller工具（ http://rubyinstaller.org/ ）快速安装：\n\n![](/images/QQ截图20160413155659.png)\n# 替换成taobao镜像\n之后 `win+R` 键打开运行窗口，输入cmd 快速打开命令行程序。\n```\n$ gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/\n$ gem sources -l\n*** CURRENT SOURCES ***\n\nhttps://ruby.taobao.org\n# 请确保只有 ruby.taobao.org\n$ gem install rails\n```\n以上是淘宝官方的方法。很简单，然而现实总是没这么顺利…\n\n和我一样安装遇到SSL证书错误的请看这里：[解决gem install SSL 证书错误](http://blog2.pierrothall.com/2016/10/21/%E8%A7%A3%E5%86%B3gem-install-SSL-%E8%AF%81%E4%B9%A6%E9%94%99%E8%AF%AF/)","slug":"解决国内Ruby-Gem-Install-失败问题","published":1,"updated":"2016-12-08T02:40:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl69pcks0012cuv3d4xhjk5m","content":"<p>做一个国内的程序员真的是很辛苦很辛苦，各种被墙，科技还怎么进步捏。好在上有政策下有对策，国内大神还是很良心的给我们提供了很多不少解决方案。</p>\n<p>淘宝团队提供了国内可以快速访问的镜像地址，官方地址：<a href=\"https://ruby.taobao.org/\" target=\"_blank\" rel=\"noopener\">https://ruby.taobao.org/</a></p>\n<p>官方有详细的替换的方法，这里我也按照我的流程过一遍。</p>\n<h1 id=\"安装Ruby\"><a href=\"#安装Ruby\" class=\"headerlink\" title=\"安装Ruby\"></a>安装Ruby</h1><p>首先，我的系统是win7。</p>\n<p>在window上安装Ruby，可以通过下载RubyInstaller工具（ <a href=\"http://rubyinstaller.org/\" target=\"_blank\" rel=\"noopener\">http://rubyinstaller.org/</a> ）快速安装：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20160413155659.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h1 id=\"替换成taobao镜像\"><a href=\"#替换成taobao镜像\" class=\"headerlink\" title=\"替换成taobao镜像\"></a>替换成taobao镜像</h1><p>之后 <code>win+R</code> 键打开运行窗口，输入cmd 快速打开命令行程序。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/</span><br><span class=\"line\">$ gem sources -l</span><br><span class=\"line\">*** CURRENT SOURCES ***</span><br><span class=\"line\"></span><br><span class=\"line\">https://ruby.taobao.org</span><br><span class=\"line\"># 请确保只有 ruby.taobao.org</span><br><span class=\"line\">$ gem install rails</span><br></pre></td></tr></table></figure></p>\n<p>以上是淘宝官方的方法。很简单，然而现实总是没这么顺利…</p>\n<p>和我一样安装遇到SSL证书错误的请看这里：<a href=\"http://blog2.pierrothall.com/2016/10/21/%E8%A7%A3%E5%86%B3gem-install-SSL-%E8%AF%81%E4%B9%A6%E9%94%99%E8%AF%AF/\" target=\"_blank\" rel=\"noopener\">解决gem install SSL 证书错误</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>做一个国内的程序员真的是很辛苦很辛苦，各种被墙，科技还怎么进步捏。好在上有政策下有对策，国内大神还是很良心的给我们提供了很多不少解决方案。</p>\n<p>淘宝团队提供了国内可以快速访问的镜像地址，官方地址：<a href=\"https://ruby.taobao.org/\" target=\"_blank\" rel=\"noopener\">https://ruby.taobao.org/</a></p>\n<p>官方有详细的替换的方法，这里我也按照我的流程过一遍。</p>\n<h1 id=\"安装Ruby\"><a href=\"#安装Ruby\" class=\"headerlink\" title=\"安装Ruby\"></a>安装Ruby</h1><p>首先，我的系统是win7。</p>\n<p>在window上安装Ruby，可以通过下载RubyInstaller工具（ <a href=\"http://rubyinstaller.org/\" target=\"_blank\" rel=\"noopener\">http://rubyinstaller.org/</a> ）快速安装：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/QQ截图20160413155659.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h1 id=\"替换成taobao镜像\"><a href=\"#替换成taobao镜像\" class=\"headerlink\" title=\"替换成taobao镜像\"></a>替换成taobao镜像</h1><p>之后 <code>win+R</code> 键打开运行窗口，输入cmd 快速打开命令行程序。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/</span><br><span class=\"line\">$ gem sources -l</span><br><span class=\"line\">*** CURRENT SOURCES ***</span><br><span class=\"line\"></span><br><span class=\"line\">https://ruby.taobao.org</span><br><span class=\"line\"># 请确保只有 ruby.taobao.org</span><br><span class=\"line\">$ gem install rails</span><br></pre></td></tr></table></figure></p>\n<p>以上是淘宝官方的方法。很简单，然而现实总是没这么顺利…</p>\n<p>和我一样安装遇到SSL证书错误的请看这里：<a href=\"http://blog2.pierrothall.com/2016/10/21/%E8%A7%A3%E5%86%B3gem-install-SSL-%E8%AF%81%E4%B9%A6%E9%94%99%E8%AF%AF/\" target=\"_blank\" rel=\"noopener\">解决gem install SSL 证书错误</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjl69pcjt0000cuv383o6o56t","category_id":"cjl69pck10004cuv3vxs8kkje","_id":"cjl69pckd000fcuv3wc5duqkq"},{"post_id":"cjl69pcjy0002cuv3esfqytzb","category_id":"cjl69pck7000acuv3ap0it9v4","_id":"cjl69pckh000lcuv3qo219se1"},{"post_id":"cjl69pck30006cuv3kx9328ts","category_id":"cjl69pckd000gcuv3q351yuzv","_id":"cjl69pckm000scuv3j7c1q848"},{"post_id":"cjl69pckj000ocuv3rkzgjtsm","category_id":"cjl69pck7000acuv3ap0it9v4","_id":"cjl69pckp000wcuv3ffdrv24c"},{"post_id":"cjl69pck40008cuv3cnkm6nph","category_id":"cjl69pckd000gcuv3q351yuzv","_id":"cjl69pckr0010cuv3qpde7y3r"},{"post_id":"cjl69pck60009cuv3x08hqzox","category_id":"cjl69pckm000rcuv3tu0ezb3k","_id":"cjl69pckt0014cuv3nhchgwne"},{"post_id":"cjl69pckq000zcuv398de3iq3","category_id":"cjl69pckm000rcuv3tu0ezb3k","_id":"cjl69pcku0017cuv3a1wthbch"},{"post_id":"cjl69pcks0012cuv3d4xhjk5m","category_id":"cjl69pckm000rcuv3tu0ezb3k","_id":"cjl69pckv0018cuv364rdcrx8"},{"post_id":"cjl69pck8000dcuv3mzxthx7j","category_id":"cjl69pckp000xcuv3o57f9wr2","_id":"cjl69pckv001ccuv33abw5soe"},{"post_id":"cjl69pckb000ecuv36npptcmv","category_id":"cjl69pckm000rcuv3tu0ezb3k","_id":"cjl69pckv001ecuv3q9p532kh"},{"post_id":"cjl69pcke000icuv3htkszpki","category_id":"cjl69pckv0019cuv3qgqu9jbo","_id":"cjl69pckw001icuv3o75v1idz"},{"post_id":"cjl69pckf000kcuv3zb55vacb","category_id":"cjl69pckp000xcuv3o57f9wr2","_id":"cjl69pckx001lcuv3q5073uyw"},{"post_id":"cjl69pckl000qcuv30m8yffk4","category_id":"cjl69pckp000xcuv3o57f9wr2","_id":"cjl69pcky001ocuv3d04ghz4d"},{"post_id":"cjl69pckn000ucuv34a3w43eh","category_id":"cjl69pckx001kcuv3hwuf8bvk","_id":"cjl69pckz001scuv36y4yg50e"}],"PostTag":[{"post_id":"cjl69pcjt0000cuv383o6o56t","tag_id":"cjl69pck20005cuv3ojckuhud","_id":"cjl69pck7000ccuv3lqo8vgaw"},{"post_id":"cjl69pcjy0002cuv3esfqytzb","tag_id":"cjl69pck7000bcuv3r0if0kc4","_id":"cjl69pckf000jcuv3h2pc0tax"},{"post_id":"cjl69pck30006cuv3kx9328ts","tag_id":"cjl69pckd000hcuv3t0fj32xm","_id":"cjl69pckl000pcuv3pbcb8s5q"},{"post_id":"cjl69pck40008cuv3cnkm6nph","tag_id":"cjl69pckd000hcuv3t0fj32xm","_id":"cjl69pcks0011cuv3hc6iaxkm"},{"post_id":"cjl69pck40008cuv3cnkm6nph","tag_id":"cjl69pckn000tcuv3t4tisaiq","_id":"cjl69pckt0013cuv33dxubvhh"},{"post_id":"cjl69pck60009cuv3x08hqzox","tag_id":"cjl69pckn000tcuv3t4tisaiq","_id":"cjl69pckv001bcuv3t43p0676"},{"post_id":"cjl69pck60009cuv3x08hqzox","tag_id":"cjl69pckt0015cuv3m9p6niax","_id":"cjl69pckv001dcuv33u8m1lz4"},{"post_id":"cjl69pck8000dcuv3mzxthx7j","tag_id":"cjl69pckv001acuv30w8crsex","_id":"cjl69pcky001ncuv309k0qwu3"},{"post_id":"cjl69pck8000dcuv3mzxthx7j","tag_id":"cjl69pckw001gcuv3wv25sckk","_id":"cjl69pcky001pcuv3xyofev6r"},{"post_id":"cjl69pck8000dcuv3mzxthx7j","tag_id":"cjl69pckx001jcuv38ml2800r","_id":"cjl69pcky001rcuv3o3cprkzi"},{"post_id":"cjl69pckb000ecuv36npptcmv","tag_id":"cjl69pckn000tcuv3t4tisaiq","_id":"cjl69pckz001ucuv3nhgfl5sa"},{"post_id":"cjl69pckb000ecuv36npptcmv","tag_id":"cjl69pcky001qcuv34j1qzn7b","_id":"cjl69pckz001vcuv3odvi0erx"},{"post_id":"cjl69pcke000icuv3htkszpki","tag_id":"cjl69pckz001tcuv3af9qw5o9","_id":"cjl69pckz001xcuv3vwmhovsq"},{"post_id":"cjl69pckf000kcuv3zb55vacb","tag_id":"cjl69pcky001qcuv34j1qzn7b","_id":"cjl69pcl10020cuv34pdewnct"},{"post_id":"cjl69pckf000kcuv3zb55vacb","tag_id":"cjl69pckx001jcuv38ml2800r","_id":"cjl69pcl10021cuv3gcli858s"},{"post_id":"cjl69pckj000ocuv3rkzgjtsm","tag_id":"cjl69pck7000bcuv3r0if0kc4","_id":"cjl69pcl20024cuv3c2tojq7n"},{"post_id":"cjl69pckj000ocuv3rkzgjtsm","tag_id":"cjl69pcl0001zcuv3rw8j45ry","_id":"cjl69pcl30025cuv30oytb3sx"},{"post_id":"cjl69pckj000ocuv3rkzgjtsm","tag_id":"cjl69pcl10022cuv39we7qzdc","_id":"cjl69pcl30027cuv3ftg1og29"},{"post_id":"cjl69pckl000qcuv30m8yffk4","tag_id":"cjl69pckx001jcuv38ml2800r","_id":"cjl69pcl40028cuv3nbhw0qtr"},{"post_id":"cjl69pckn000ucuv34a3w43eh","tag_id":"cjl69pcl30026cuv3nfe4xm57","_id":"cjl69pcl4002acuv3lmlvgfcf"},{"post_id":"cjl69pckq000zcuv398de3iq3","tag_id":"cjl69pckn000tcuv3t4tisaiq","_id":"cjl69pcl5002ccuv3cg1fjsg7"},{"post_id":"cjl69pckq000zcuv398de3iq3","tag_id":"cjl69pcl40029cuv3pagcylio","_id":"cjl69pcl5002dcuv34x7l6911"},{"post_id":"cjl69pcks0012cuv3d4xhjk5m","tag_id":"cjl69pcl40029cuv3pagcylio","_id":"cjl69pcl6002ecuv3t8g3sq01"},{"post_id":"cjl69pcks0012cuv3d4xhjk5m","tag_id":"cjl69pckn000tcuv3t4tisaiq","_id":"cjl69pcl6002fcuv3fo1xbsjy"}],"Tag":[{"name":"vue","_id":"cjl69pck20005cuv3ojckuhud"},{"name":"mywork","_id":"cjl69pck7000bcuv3r0if0kc4"},{"name":"mongodb","_id":"cjl69pckd000hcuv3t0fj32xm"},{"name":"环境搭建","_id":"cjl69pckn000tcuv3t4tisaiq"},{"name":"linux","_id":"cjl69pckt0015cuv3m9p6niax"},{"name":"web移动端","_id":"cjl69pckv001acuv30w8crsex"},{"name":"缓存","_id":"cjl69pckw001gcuv3wv25sckk"},{"name":"JavaScript","_id":"cjl69pckx001jcuv38ml2800r"},{"name":"Web移动端","_id":"cjl69pcky001qcuv34j1qzn7b"},{"name":"threejs","_id":"cjl69pckz001tcuv3af9qw5o9"},{"name":"canvas","_id":"cjl69pcl0001zcuv3rw8j45ry"},{"name":"h5game","_id":"cjl69pcl10022cuv39we7qzdc"},{"name":"nodeJs","_id":"cjl69pcl30026cuv3nfe4xm57"},{"name":"Ruby","_id":"cjl69pcl40029cuv3pagcylio"}]}}