[{"title":"初了解vue&vuex","date":"2017-05-22T07:35:33.000Z","path":"2017/05/22/初了解vue&vuex 这很接地气/","text":"在某个深夜，我失眠到了凌晨3点，没想别的什么，而是被这类代码占据，恨不得立刻爬起来打开电脑，洒脱的码上上万条语句，这……肯定是老大在我睡梦中督促着我要好好工作。 好了言归正传。 网络上对于vuex这套状态管理模式已经有不少介绍的文章了。包括小伙伴们也有写相关的分享文，对这套体系简单剖析过一遍。然而在一开始接触的时候我还是绕了不少弯子。至于为什么说接地气，因为我才接触vue和vuex三天的样子。而且我理论知识不稳固，肯定探讨不出什么高深的学术性的东西，此文只是大概介绍一下我在运用时候遇到的一些坑吧。 Vue这个运用的融会贯通的人大有人在，我一个才用了三天的人就不详细说了。在这之前我一直用的angular v1.x（之后都称呼ng v1.x），之前有小哥问我为什么不用vue，当时我说了感觉vue有些不伦不类，像是ng和react的结合体。嗯，我有时候很脑残，这些话都当我没说过。 很多人觉得vue和ng有很相似的地方。是不是呢，当然我没去研究ng v2.x+的框架，从ng v1.x的角度上来看，两个框架差异还是相当大的。 ng像是一个工厂，在ng-app内，按照不同的功能来划分体系，模块和模块之间也能通过ng的规则联系在一起。虽然也有组件化的体系，通过scope来独立区域，但是组件和组件之前有提供信息传递的方法，就像工厂里面的传送带一样，任何一个区域都可以相互传递信息（反正在我脑子里记不住那些概念，但是对于ng大概就是这么理解的）。vue则更像是一个公寓大楼。component是一间间的房间，相互独立，可以像积木一样，一层层堆积拼接。但是并没有和ng那样相对比较完善的信息传递机制。 所以之前小易有问我ng v1.x有木有什么状态管理的架构。这之后我才知道的，ng v1.x应该是不需要额外的去搭建一个状态管理模式。","tags":[{"name":"vue","slug":"vue","permalink":"http://www.mjpiero.cc/tags/vue/"}]},{"title":"【Web移动端】web移动端软键盘状态","date":"2017-01-18T10:10:54.000Z","path":"2017/01/18/【Web移动端】web移动端软键盘状态/","text":"如今各种移动端设备盛行，虽然现在移动端开发已经非常通用和成熟，但是在开发过程中，还是经常遇到各种神奇的问题，在这里对于移动端web开发遇到的一些问题进行一一整理。对于移动端设备上的软键盘，在某些时候，会成为页面的一部分，并且不同型号的设备的软键盘对于Html布局的实现也有些不同。比如ios设备对于从下方推出键盘的时候，如果输入控件在页面推出之后，在键盘的高度的上方的话，则键盘是以一个浮层的方式弹出，并且将那个触发的控件推到键盘的上方。如果那个控件在页面底部，如果推出的键盘会覆盖该控件，系统会将整个页面向上推，直到将那个控件推到键盘上方为止。而android的实现的不同，有部分的android的实现和ios一样，有些android的机型的实现却不同，如果发现触发的input控件比键盘的高度底的时候，会自动将整个document的高度增加，增加到这个控件的高度超过键盘的高度为止。随后，在判断软键盘是否打开关闭的状态时，因为这两种展现方法的不同，我大概搜罗出可能的解决办法（没有测试全部机型）： 软键盘打开，整个页面向上滑动这种在ios系统里面比较常见，这类的基本上可以通过js的blur的方式来获取事件。$(&quot;.input-content input&quot;).on(&quot;blur&quot;,function()&#123; //键盘关闭事件 &#125;) 软键盘覆盖元素这种情况在ios和android中都有出现，这类的设备，可以通过检测窗口变化来识别var wHeight = window.innerHeight;//获取初始可视窗口高度 window.addEventListener(&apos;resize&apos;, function()&#123;//监测窗口大小的变化事件 var hh = window.innerHeight;//当前可视窗口高度 var viewTop = $(window).scrollTop();//可视窗口高度顶部距离网页顶部的距离 if(wHeight &gt; hh)&#123; //可以作为虚拟键盘弹出事件 &#125;else&#123; //可以作为虚拟键盘关闭事件 &#125; wHeight = hh; &#125;); 通用方法var flag = false;var wHeight = window.innerHeight;window.addEventListener(&apos;resize&apos;, function()&#123; var hh = window.innerHeight; var viewTop = $(window).scrollTop(); if(wHeight &gt; hh)&#123; flag = false; &#125;else&#123; if(!flag)&#123; alert($(&quot;.input-content input&quot;).val()); flag = true; &#125;else&#123; return; &#125; &#125; wHeight = hh; &#125;);$(&quot;.input-content input&quot;).on(&quot;blur&quot;,function()&#123; if(!flag)&#123; alert($(&quot;.input-content input&quot;).val()); flag = true; &#125;else&#123; return; &#125;&#125;).on(&quot;focus&quot;, function()&#123; flag = false;&#125;);","tags":[{"name":"Web移动端","slug":"Web移动端","permalink":"http://www.mjpiero.cc/tags/Web移动端/"},{"name":"Javascript","slug":"Javascript","permalink":"http://www.mjpiero.cc/tags/Javascript/"}]},{"title":"【Web移动端】web移动端调试大法","date":"2016-12-29T07:02:38.000Z","path":"2016/12/29/【Web移动端】web移动端调试大法/","text":"在做移动端web开发的时候，头痛遇到移动端调试的问题，虽然现在很多PC浏览器的开发工具都自带移动端调试功能，但是显然和真机测试还是有一定差距，因为移动端不同的设备会出现不同的问题，在PC模拟器上显示正常的换到真机上测试就是会出问题。在这里整理一些常见的移动端调试方法。 先从一般的页面调试方法开始。 console方式这个是最常见的一种调试方法，通过console在浏览器控制台打印出每步所需的回调数据。详细可以参考Web API接口 浏览器自带的移动端模拟器调试这个现在也比较常见了。最常用的是chrome的模拟器，当然现在流行的浏览器基本上都有开发者的模式，也都携有移动端的模拟器。比如火狐浏览器、360浏览器等。基本上浏览器开启开发者模式的方法都统一了，在windows环境下按F12进入开发者攻击界面，mac环境则是下按option+command+i。 UC浏览器测试UC浏览器提供了开发版方便开发者们连接测试。详见：UC浏览器开发者版 第三方平台在线模拟器调试第三方开发的平台比较方便，功能也相当强大，对于一些需要完善测试的，其实使用第三方的平台还是比较方便的。这里我就推荐几个比较有名的第三方平台： BrowserStack Keynote BrowserShots Browsera Ghostlab等等… 下面介绍一些我比较喜欢的一些远程调试工具。 Weinre之前微信开发工具中的远程调试也是基于这个开发的。安装方法很简单快捷。安装 Weinre：npm install -g weinre 安装完成之后，输入指令启动：weinre --httpPort 8081 --boundHost -all- 显示如下则启动成功。此时我们访问地址：http://localhost:8081/ 会显示下图：在页面中也有提供几种方案，在你的项目中添加对应的js。例如：&lt;script src=&quot;http://192.168.55.23:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;随后便可以通过PC访问http://192.168.55.23:8081/client/#anonymous就可以看到手机上访问的项目页面了。 代理应用这类代理应用实际上是用于抓包的，但是比起Weinre是基于开发者自身开发测试的。如果我们想要去获取其他网站的一些资源，例如http请求，或则一些js源码等。这时候使用代理工具比较合适。mac下常使用的是Charles,windows环境下可以用Fiddler默认开启的是8888端口。在手机上设置一个网络代理即可，这个不多详细介绍了。 BrowserSync这是一个很强大的多终端测试工具，它可以跨设备同步操作行为，还可以监听你的文件，在文件修改时自动刷新所有设备中页面。BrowserSync官方网站也可以通过npm全局安装npm install -g browser-sync 随后进入项目根目录下browser-sync start --files &quot;*.*&quot;// 意思为监听当前目录下所有改动 终端中若显示如下，则启动成功：终端中显示默认访问地址：http://localhost:3001 则可直接进入到控制台界面。之后和weinre类似，也是添加一段js在自己的项目底下。BrowserSync还可以和gulp以及webpack搭配使用，详细的可以看官方文档。 真机测试真机测试是一概而论的说法。由于像ios系统本身就提供了一些对前端十分友好的开发者工具。例如，Safari浏览器自带的开发者工具，或则xcode也有测试的方法，这里我局限性比较高，有这方面条件的是可以去搜罗一下相关的方法。再者，PhoneGap也是有调试工具的，只不过需要安装它测试app。这也是一种方法，不过个人还是偏爱Weinre或则BrowserSync的测试工具。 以上。是我整理的一些移动端测试的方法。欢迎补充~","tags":[{"name":"环境搭建","slug":"环境搭建","permalink":"http://www.mjpiero.cc/tags/环境搭建/"},{"name":"Web移动端","slug":"Web移动端","permalink":"http://www.mjpiero.cc/tags/Web移动端/"}]},{"title":"MongoDB如何开启认证权限功能","date":"2016-12-28T06:04:52.000Z","path":"2016/12/28/MongoDB如何开启认证权限功能/","text":"MongoDB预设不会开启认证权限功能（Authentication），所以任何人都可以随意连接到MongoDB的数据库。于是我们要去创建一个管理员的账号，并为其添加权限。 创建新用户在开启MongoDB服务的情况下。执行mongod或则mongod --dbpath &lt;path to data directory&gt; 进入MongoDB服务。进入服务之后，执行：use admindb.addUser(&quot;账户名称&quot;, &quot;密码&quot;)// 如果希望此账号只有读取的权限，则修改为// db.addUser(&quot;账户名称&quot;, &quot;密码&quot;, true) 执行完成之后，先停止MongoDB服务，在执行下面指令重新开启MongoDB服务：mongod --auth 进入库启动完成之后，在连接上MongoDB Shell，在其中执行以下命令才可进入到admin库中：use admin db.auth(&quot;账户名称&quot;, &quot;密码&quot;)","tags":[{"name":"mongodb","slug":"mongodb","permalink":"http://www.mjpiero.cc/tags/mongodb/"}]},{"title":"MongoDB添加到window服务，随系统自启动","date":"2016-12-28T03:38:01.000Z","path":"2016/12/28/MongoDB添加到window服务，随服务自启动/","text":"最近在window上安转MongoDB，记录一下遇到的一些的问题。 windows上安装MongoDB首先去官网下载Windows安装包：https://www.mongodb.org/downloads安装路径这里假设是安装在 D:/soft/mongodb/。安装好之后，我们可以随便在一个目录下，比如在 D:/ 根目录下创建一个目录 D:\\mongodb\\，进入该目录，新建data和logs两个目录。然后打开控制台命令窗口（CMD），输入D:\\soft\\mongodb\\bin 进入到安装目录下。再执行：mongod --dbpath d:/mongodb/data，开启MongoDB服务，并将运行目录指向之前创建好的 D:\\mongodb\\data 下。打开浏览器，进入：http://127.0.0.1:27017（window服务默认端口27017），这时你会看到以下提示语：You are trying to access MongoDB on the native driver port. For http diagnostic access, add 1000 to the port number 这说明MongoDB服务已经启动了。 添加MongoDB服务到windows本地服务中上面的方法要保证MongoDB服务运行，必须每次都要重复输入命令才能开启。为了方便在windows上开启MongoDB服务，我们需要将MongoDB服务到windows本地服务中，并且设置随系统启动开启。继续回到CMD中，在安装目录中（D:\\soft\\mongodb\\bin）执行：mongod.exe --logpath d:/soft/mongodb/logs/mongodb.log --logappend --dbpath d:/soft/mongodb/data --directoryperdb --serviceName MongoDB -install --auth 此处注意 “–auth” 是将服务开启权限认证，这样别人需要账户和密码才能去访问你的数据库。如果要开启认证，需要在前期运行时要在MongoDB服务中设置好账户密码。详细方法可参考：MongoDB如何开启认证权限功能如果不需要，或则选择后期再设置，可以不使用。 上面执行完毕之后，会在windows服务下创建一个名为MongoDB的服务。执行 net start MongoDB 便开启MongoDB服务了。可以在windows的服务窗口中看见MongoDB的服务状态。 删除MongoDB服务如果要删除MongoDB服务，首先先停止当前的MongoDB服务，这个可以去服务窗口停止。然后在CMD中执行：sc delete MongoDB这样之前安装的服务就会被删除。 安装时遇到的一些问题在安装时可能遇到的一些问题： Windows不能在本地计算机启动MongoDB，错误代码 100解决办法： MongoDB安装目录\\data\\将此文件夹下的mongod.lock、storage.bson删除 连接数据库时发生错误 failed to execute listdatabases command解决办法： 在安装服务的时候开启权限认证，确定一下账户密码是否有误。如果是在添加服务的时候使用了”–auth”命令，则需要进入MongoDB服务中重新添加新的账户和密码。详细方法可参考：MongoDB如何开启认证权限功能","tags":[{"name":"mongodb","slug":"mongodb","permalink":"http://www.mjpiero.cc/tags/mongodb/"},{"name":"环境搭建","slug":"环境搭建","permalink":"http://www.mjpiero.cc/tags/环境搭建/"}]},{"title":"兼容多种模块规范","date":"2016-12-08T04:13:38.000Z","path":"2016/12/08/兼容多种模块规范/","text":"我们通常需要将类库代码包装在一个闭包内，为了能兼容Node、AMD、CMD以及一些常见的浏览器环境中，我们可以使用如下的方法去包装。;(function (name, definition) &#123;// 检测上下文环境是否为AMD或CMDif (typeof define === &quot;function&quot; &amp;&amp; ( define.amd || define.cmd ) ) &#123; define(definition);// 检测上下文环境是否为Node&#125; else if ( typeof module !== &apos;undefined&apos; &amp;&amp; module.exports ) &#123; module.exports = definition();&#125; else &#123; // 将模块的执行结果在window变量中，在浏览器中this指向window对象 this[name] = definition();&#125;&#125;)(&apos;hello&apos;, function () &#123; var hello = function () &#123;&#125;; return hello;&#125;);","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.mjpiero.cc/tags/JavaScript/"}]},{"title":"包与NPM","date":"2016-12-08T02:39:20.000Z","path":"2016/12/08/包与NPM/","text":"在说到NPM之前，应该先提及CommonJS的包规范。 CommonJS包规范定义很简单，它是由包结构和包描述文件两个部分组成。 包结构包结构是用于组织包中的各种文件。完全符合CommonJS规范的包目录应该包含如下文件。 package.json ———— 包描述文件。 bin ———— 用于存放可执行二进制文件的目录。 lib ———— 用于存放js代码的目录。 doc ———— 用于存放文档的目录。 test ———— 用于存放单元测试用例的代码。 包描述文件包描述文件用于表达非代码相关的信息，它是一个JSON格式的文件（package.json），位于根目录下。 这里我们就只介绍 NPM 的 package.json 文件定义了哪些必需的字段： name ———— 项目名称。 version ———— 版本。在 http://semver.org/ 上有详细的定义，通常为 major.minor.revision 格式。 author ———— 作者。 description ———— 项目简介。 keywords ———— 关键词数组。用于NPM中做分类搜索的。 repository ———— 托管源代码的位置列表。示例：{ &quot;type&quot;: &quot;git&quot;, &quot;url&quot;: &quot;https://package/path&quot; } license ———— 当前包所使用的许可证列表。示例：[{ &quot;type&quot;: &quot;GPLv2&quot;, &quot;url&quot;: &quot;http://www.example.com/licenses/gpl.html&quot;, }] engines ———— 指明该项目所需要的nodejs版本。 bugs ———— 返回bug的网页地址或则邮箱地址。 contributors ———— 贡献者列表。 scripts ———— 指定了运行脚本命令的npm命令行缩写。可以自行写好运行脚本。 dependencies ———— 指定了项目运行所依赖的模块。npm install XX --save devDependencies ———— 指定项目开发所需要的模块。npm install XX --save-dev 波浪号（tilde）+指定版本：比如~1.2.2，表示安装1.2.x的最新版本（不低于1.2.2），但是不安装1.3.x，也就是说安装时不改变大版本号和次要版本号。 插入号（caret）+指定版本：比如ˆ1.2.2，表示安装1.x.x的最新版本（不低于1.2.2），但是不安装2.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。 latest：安装最新版本。 peerDependencies ———— 用来供插件指定其所需要的主工具的版本（从npm 3.0版开始，peerDependencies不再会默认安装了）。 bin ———— 用来指定各个内部命令对应的可执行文件的位置。 main ———— 指定加载的入口文件。 config ———— 用于向环境变量输出值。示例：{ &quot;port&quot; : &quot;8080&quot; }，则在server.js脚本就可以直接引用config里的值 http.createServer(...).listen(process.env.npm_package_config_port) 下面是express项目的package.json文件，可以参考下：&#123; &quot;name&quot;: &quot;express&quot;, &quot;description&quot;: &quot;Sinatra inspired web development framework&quot;, &quot;version&quot;: &quot;3.3.4&quot;, &quot;author&quot;: &quot;TJ Holowaychuk &lt;tj@vision-media.ca&gt;&quot;, &quot;contributors&quot;: [ &#123; &quot;name&quot;: &quot;TJ Holowaychuk&quot;, &quot;email&quot;: &quot;tj@vision-media.ca&quot; &#125;, &#123; &quot;name&quot;: &quot;Aaron Heckmann&quot;, &quot;email&quot;: &quot;aaron.heckmann+github@gmail.com&quot; &#125;, &#123; &quot;name&quot;: &quot;Ciaran Jessup&quot;, &quot;email&quot;: &quot;ciaranj@gmail.com&quot; &#125;, &#123; &quot;name&quot;: &quot;Guillermo Rauch&quot;, &quot;email&quot;: &quot;rauchg@gmail.com&quot; &#125; ], &quot;dependencies&quot;: &#123; &quot;connect&quot;: &quot;2.8.4&quot;, &quot;commander&quot;: &quot;1.2.0&quot;, &quot;range-parser&quot;: &quot;0.0.4&quot;, &quot;mkdirp&quot;: &quot;0.3.5&quot;, &quot;cookie&quot;: &quot;0.1.0&quot;, &quot;buffer-crc32&quot;: &quot;0.2.1&quot;, &quot;fresh&quot;: &quot;0.1.0&quot;, &quot;methods&quot;: &quot;0.0.1&quot;, &quot;send&quot;: &quot;0.1.3&quot;, &quot;cookie-signature&quot;: &quot;1.0.1&quot;, &quot;debug&quot;: &quot;*&quot; &#125;, &quot;devDependencies&quot;: &#123; &quot;ejs&quot;: &quot;*&quot;, &quot;mocha&quot;: &quot;*&quot;, &quot;jade&quot;: &quot;0.30.0&quot;, &quot;hjs&quot;: &quot;*&quot;, &quot;stylus&quot;: &quot;*&quot;, &quot;should&quot;: &quot;*&quot;, &quot;connect-redis&quot;: &quot;*&quot;, &quot;marked&quot;: &quot;*&quot;, &quot;supertest&quot;: &quot;0.6.0&quot; &#125;, &quot;keywords&quot;: [ &quot;express&quot;, &quot;framework&quot;, &quot;sinatra&quot;, &quot;web&quot;, &quot;rest&quot;, &quot;restful&quot;, &quot;router&quot;, &quot;app&quot;, &quot;api&quot; ], &quot;repository&quot;: &quot;git://github.com/visionmedia/express&quot;, &quot;main&quot;: &quot;index&quot;, &quot;bin&quot;: &#123; &quot;express&quot;: &quot;./bin/express&quot; &#125;, &quot;scripts&quot;: &#123; &quot;prepublish&quot;: &quot;npm prune&quot;, &quot;test&quot;: &quot;make test&quot; &#125;, &quot;engines&quot;: &#123; &quot;node&quot;: &quot;*&quot; &#125;&#125; 参考文献： 《深入浅出Node.js》朴灵 http://javascript.ruanyifeng.com/nodejs/packagejson.html","tags":[{"name":"nodeJs","slug":"nodeJs","permalink":"http://www.mjpiero.cc/tags/nodeJs/"}]},{"title":"Materialize UI 风格 WIKI 模板页","date":"2016-10-21T10:16:56.000Z","path":"2016/10/21/Materialize-UI-风格-WIKI-模板页/","text":"简介Materialize 是基于Material Design的UI框架。 使用Materialize框架制作了一个WIKI文档的模板页面。 实现功能 动态生成左侧栏导航 生成面包屑（这个一直没找到很好的控制方法，肯定是我蠢！） 【伪】templates加载（其实是想仿照做一个路由加载指定模块的功能） 源码github: https://github.com/MJPiero/wiki-materialize","tags":[{"name":"mywork","slug":"mywork","permalink":"http://www.mjpiero.cc/tags/mywork/"}]},{"title":"【接粽子】小游戏 Made With CreateJs","date":"2016-10-21T08:55:05.000Z","path":"2016/10/21/【接粽子】小游戏-Made-With-CreateJs/","text":"简介制作的一款类似于接金币一类的小游戏。公司为了在端午节做宣传用的。 一款好的游戏离不开好的设计，在此先给亲爱的设计妹纸点个赞~ (❁’▽’❁) 游戏效果如下： 第一次尝试用createJs框架去搭建H5游戏，确实比起以前自己用canvas写的要方面很多，也流畅了不少。 Demo在微信上发布的游戏，请用微信扫码查看： 源码github：https://github.com/MJPiero/catchzongzi 另外也在github上分享了源码。说实话本人对于我写的不算满意，因为…… 用了太多愚蠢的方法，不过当时时间有点赶，就没有花太多时间去优化。也希望大家能提出更好的优化方法来。大家一起学习一起奋进嘞嘿！！！！","tags":[{"name":"mywork","slug":"mywork","permalink":"http://www.mjpiero.cc/tags/mywork/"},{"name":"canvas","slug":"canvas","permalink":"http://www.mjpiero.cc/tags/canvas/"},{"name":"h5game","slug":"h5game","permalink":"http://www.mjpiero.cc/tags/h5game/"}]},{"title":"解决gem install SSL 证书错误","date":"2016-10-21T08:40:10.000Z","path":"2016/10/21/解决gem-install-SSL-证书错误/","text":"这个问题我是在替换gem镜像路径的时候遇到的。 详情见：解决国内Ruby Gem Install 失败问题 这个其实也折腾了我一个多小时在网上找解决办法。 问题相信有部分的人在按照上面方法安装的时候出现了和我一样的问题： 在网上搜索一圈之后，解释是： ruby 没有包含 SSL 证书，所以 https 的链接被服务器拒绝。 本来这个情况下，只要改用http路径就好了，偏偏淘宝已经停止基于HTTP协议的镜像服务了。 于是我继续在网上搜了一圈，找到了如下的解决办法（来源：https://gist.github.com/fnichol/867550 ）: 解决先下载证书 http://curl.haxx.se/ca/cacert.pem ，然后再环境变量里设置 SSL_CERT_FILE 这个环境变量，并指向 cacert.pem 文件。 之后再在cmd.exe中输入命令： set SSL_CERT_FILE=C:\\path\\to\\cacert.pem 之后再按照上面的方法来操作一遍~~~ Perfect！！","tags":[{"name":"环境搭建","slug":"环境搭建","permalink":"http://www.mjpiero.cc/tags/环境搭建/"},{"name":"Ruby","slug":"Ruby","permalink":"http://www.mjpiero.cc/tags/Ruby/"}]},{"title":"解决国内Ruby Gem Install 失败问题","date":"2016-10-21T06:55:48.000Z","path":"2016/10/21/解决国内Ruby-Gem-Install-失败问题/","text":"做一个国内的程序员真的是很辛苦很辛苦，各种被墙，科技还怎么进步捏。好在上有政策下有对策，国内大神还是很良心的给我们提供了很多不少解决方案。 淘宝团队提供了国内可以快速访问的镜像地址，官方地址：https://ruby.taobao.org/ 官方有详细的替换的方法，这里我也按照我的流程过一遍。 安装Ruby首先，我的系统是win7。 在window上安装Ruby，可以通过下载RubyInstaller工具（ http://rubyinstaller.org/ ）快速安装： 替换成taobao镜像之后 win+R 键打开运行窗口，输入cmd 快速打开命令行程序。$ gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/$ gem sources -l*** CURRENT SOURCES ***https://ruby.taobao.org# 请确保只有 ruby.taobao.org$ gem install rails 以上是淘宝官方的方法。很简单，然而现实总是没这么顺利… 和我一样安装遇到SSL证书错误的请看这里：解决gem install SSL 证书错误","tags":[{"name":"环境搭建","slug":"环境搭建","permalink":"http://www.mjpiero.cc/tags/环境搭建/"},{"name":"Ruby","slug":"Ruby","permalink":"http://www.mjpiero.cc/tags/Ruby/"}]},{"title":"开启新世界的大门！(灬ºωº灬)","date":"2016-10-21T06:38:33.000Z","path":"2016/10/21/开启新世界的大门！-灬ºωº灬/","text":"首先，欢迎你手残点进了此地！！！ξ( ✿＞◡❛) 博主前端开发人员一枚，于今涉足行业将近2年，在之前干过漫画编辑做过网页设计，可谓上得了厅堂下得了厨房。然而水平有限，寻求志同道合人士共同学习进步。 (´∩ω∩｀) 此博客内容仅仅是自己学习上的一些心得总结，并不一定是正确可取的，还希望发现BUG的小伙伴们积极指出错误！ 知错能改，善莫大焉。(⁰▿⁰) 还望大家文明交流，博主其实是玻璃心。(´▽`ʃ♡ƪ)","tags":[]}]